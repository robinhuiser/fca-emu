/*
 * Cloud API
 *
 * The public facing API through which connectors are exposed as a single abstract API
 *
 * API version: v1.5.1
 * Contact: support@trexis.net
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package finite

import (
	"encoding/json"
	"net/http"
	"strconv"
	"strings"

	"github.com/gorilla/mux"
)

// A ExchangeApiController binds http requests to an api service and writes the service results to the http response
type ExchangeApiController struct {
	service ExchangeApiServicer
}

// NewExchangeApiController creates a default api controller
func NewExchangeApiController(s ExchangeApiServicer) Router {
	return &ExchangeApiController{service: s}
}

// Routes returns all of the api route for the ExchangeApiController
func (c *ExchangeApiController) Routes() Routes {
	return Routes{
		{
			"DeleteExchangeTransaction",
			strings.ToUpper("Delete"),
			"/cloud/v1/exchange/{exchangeId}",
			c.DeleteExchangeTransaction,
		},
		{
			"GetExchangeTransaction",
			strings.ToUpper("Get"),
			"/cloud/v1/exchange/{exchangeId}",
			c.GetExchangeTransaction,
		},
		{
			"ListAccountExchangeTransactions",
			strings.ToUpper("Get"),
			"/cloud/v1/account/{accountId}/exchanges",
			c.ListAccountExchangeTransactions,
		},
		{
			"ListEntityExchangeTransactions",
			strings.ToUpper("Get"),
			"/cloud/v1/entity/{entityId}/exchanges",
			c.ListEntityExchangeTransactions,
		},
		{
			"PerformExchangeTransaction",
			strings.ToUpper("Post"),
			"/cloud/v1/exchange",
			c.PerformExchangeTransaction,
		},
		{
			"UpdateExchangeTransaction",
			strings.ToUpper("Put"),
			"/cloud/v1/exchange/{exchangeId}",
			c.UpdateExchangeTransaction,
		},
	}
}

// DeleteExchangeTransaction - Perform exchange delete, for money movement
func (c *ExchangeApiController) DeleteExchangeTransaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	exchangeId := params["exchangeId"]
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	result, err := c.service.DeleteExchangeTransaction(r.Context(), exchangeId, xTRACEID, xTOKEN)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetExchangeTransaction - Return a given exchange transaction
func (c *ExchangeApiController) GetExchangeTransaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	exchangeId := params["exchangeId"]
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	result, err := c.service.GetExchangeTransaction(r.Context(), exchangeId, mask, enhance, xTRACEID, xTOKEN)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListAccountExchangeTransactions - List of scheduled and past exchange transaction for a given account
func (c *ExchangeApiController) ListAccountExchangeTransactions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountId := params["accountId"]
	limit, err := parseInt32Parameter(query.Get("limit"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	cursor := query.Get("cursor")
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	result, err := c.service.ListAccountExchangeTransactions(r.Context(), accountId, limit, cursor, mask, enhance, xTRACEID, xTOKEN)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListEntityExchangeTransactions - List of scheduled and past exchange transaction for a given entity
func (c *ExchangeApiController) ListEntityExchangeTransactions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	entityId := params["entityId"]
	limit, err := parseInt32Parameter(query.Get("limit"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	cursor := query.Get("cursor")
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	result, err := c.service.ListEntityExchangeTransactions(r.Context(), entityId, limit, cursor, mask, enhance, xTRACEID, xTOKEN)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PerformExchangeTransaction - Perform exchange, for money movement
func (c *ExchangeApiController) PerformExchangeTransaction(w http.ResponseWriter, r *http.Request) {
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	exchangeTransaction := &ExchangeTransaction{}
	if err := json.NewDecoder(r.Body).Decode(&exchangeTransaction); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.PerformExchangeTransaction(r.Context(), xTRACEID, xTOKEN, *exchangeTransaction)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateExchangeTransaction - Perform exchange update, for money movement
func (c *ExchangeApiController) UpdateExchangeTransaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	exchangeId := params["exchangeId"]
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	exchangeTransaction := &ExchangeTransaction{}
	if err := json.NewDecoder(r.Body).Decode(&exchangeTransaction); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.UpdateExchangeTransaction(r.Context(), exchangeId, xTRACEID, xTOKEN, *exchangeTransaction)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
