/*
 * Cloud API
 *
 * The public facing API through which connectors are exposed as a single abstract API
 *
 * API version: v1.5.1
 * Contact: support@trexis.net
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package finite

import (
	"context"
	"net/http"
)



// AccountsApiRouter defines the required methods for binding the api requests to a responses for the AccountsApi
// The AccountsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a AccountsApiServicer to perform the required actions, then write the service results to the http response.
type AccountsApiRouter interface { 
	GetAccount(http.ResponseWriter, *http.Request)
	GetAccountBalances(http.ResponseWriter, *http.Request)
	GetAccountDetails(http.ResponseWriter, *http.Request)
	GetEntityAccountsList(http.ResponseWriter, *http.Request)
	PostEntityAccountsList(http.ResponseWriter, *http.Request)
	PutAccount(http.ResponseWriter, *http.Request)
	SearchAccounts(http.ResponseWriter, *http.Request)
}
// CacheApiRouter defines the required methods for binding the api requests to a responses for the CacheApi
// The CacheApiRouter implementation should parse necessary information from the http request, 
// pass the data to a CacheApiServicer to perform the required actions, then write the service results to the http response.
type CacheApiRouter interface { 
	DeleteAllCache(http.ResponseWriter, *http.Request)
	DeleteCache(http.ResponseWriter, *http.Request)
	GetCache(http.ResponseWriter, *http.Request)
	ListAllCache(http.ResponseWriter, *http.Request)
	RenewCache(http.ResponseWriter, *http.Request)
}
// CardsApiRouter defines the required methods for binding the api requests to a responses for the CardsApi
// The CardsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a CardsApiServicer to perform the required actions, then write the service results to the http response.
type CardsApiRouter interface { 
	GetAccountCards(http.ResponseWriter, *http.Request)
}
// EntityApiRouter defines the required methods for binding the api requests to a responses for the EntityApi
// The EntityApiRouter implementation should parse necessary information from the http request, 
// pass the data to a EntityApiServicer to perform the required actions, then write the service results to the http response.
type EntityApiRouter interface { 
	GetEntity(http.ResponseWriter, *http.Request)
	GetEntityProfile(http.ResponseWriter, *http.Request)
	PostEntityProfile(http.ResponseWriter, *http.Request)
	PutEntityProfile(http.ResponseWriter, *http.Request)
	SearchEntities(http.ResponseWriter, *http.Request)
}
// ExchangeApiRouter defines the required methods for binding the api requests to a responses for the ExchangeApi
// The ExchangeApiRouter implementation should parse necessary information from the http request, 
// pass the data to a ExchangeApiServicer to perform the required actions, then write the service results to the http response.
type ExchangeApiRouter interface { 
	DeleteExchangeTransaction(http.ResponseWriter, *http.Request)
	GetExchangeTransaction(http.ResponseWriter, *http.Request)
	ListAccountExchangeTransactions(http.ResponseWriter, *http.Request)
	ListEntityExchangeTransactions(http.ResponseWriter, *http.Request)
	PerformExchangeTransaction(http.ResponseWriter, *http.Request)
	UpdateExchangeTransaction(http.ResponseWriter, *http.Request)
}
// ProductsApiRouter defines the required methods for binding the api requests to a responses for the ProductsApi
// The ProductsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a ProductsApiServicer to perform the required actions, then write the service results to the http response.
type ProductsApiRouter interface { 
	GetProducts(http.ResponseWriter, *http.Request)
}
// StatementApiRouter defines the required methods for binding the api requests to a responses for the StatementApi
// The StatementApiRouter implementation should parse necessary information from the http request, 
// pass the data to a StatementApiServicer to perform the required actions, then write the service results to the http response.
type StatementApiRouter interface { 
	GetAccountStatementItem(http.ResponseWriter, *http.Request)
	GetAccountStatementItems(http.ResponseWriter, *http.Request)
	GetStatementItem(http.ResponseWriter, *http.Request)
	GetStatementItems(http.ResponseWriter, *http.Request)
}
// StatementsApiRouter defines the required methods for binding the api requests to a responses for the StatementsApi
// The StatementsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a StatementsApiServicer to perform the required actions, then write the service results to the http response.
type StatementsApiRouter interface { 
	GetAccountStatements(http.ResponseWriter, *http.Request)
}
// TransactionsApiRouter defines the required methods for binding the api requests to a responses for the TransactionsApi
// The TransactionsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a TransactionsApiServicer to perform the required actions, then write the service results to the http response.
type TransactionsApiRouter interface { 
	GetAccountTransaction(http.ResponseWriter, *http.Request)
	GetAccountTransactionImage(http.ResponseWriter, *http.Request)
	GetAccountTransactionImages(http.ResponseWriter, *http.Request)
	GetAccountTransactions(http.ResponseWriter, *http.Request)
	SearchTransactions(http.ResponseWriter, *http.Request)
}


// AccountsApiServicer defines the api actions for the AccountsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type AccountsApiServicer interface { 
	GetAccount(context.Context, string, bool, bool, string, string) (ImplResponse, error)
	GetAccountBalances(context.Context, string, bool, string, string) (ImplResponse, error)
	GetAccountDetails(context.Context, string, bool, bool, string, string) (ImplResponse, error)
	GetEntityAccountsList(context.Context, string, string, int32, string, bool, bool, string, string) (ImplResponse, error)
	PostEntityAccountsList(context.Context, int32, string, bool, bool, string, string, []SearchFilter) (ImplResponse, error)
	PutAccount(context.Context, string, bool, bool, string, string, Account) (ImplResponse, error)
	SearchAccounts(context.Context, string, int32, string, bool, bool, string, string, []SearchFilter) (ImplResponse, error)
}


// CacheApiServicer defines the api actions for the CacheApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type CacheApiServicer interface { 
	DeleteAllCache(context.Context, string) (ImplResponse, error)
	DeleteCache(context.Context, FiniteType, string) (ImplResponse, error)
	GetCache(context.Context, FiniteType, string) (ImplResponse, error)
	ListAllCache(context.Context, string) (ImplResponse, error)
	RenewCache(context.Context, FiniteType, string, CacheReference) (ImplResponse, error)
}


// CardsApiServicer defines the api actions for the CardsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type CardsApiServicer interface { 
	GetAccountCards(context.Context, string, bool, bool, string, string) (ImplResponse, error)
}


// EntityApiServicer defines the api actions for the EntityApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type EntityApiServicer interface { 
	GetEntity(context.Context, string, bool, bool, string, string) (ImplResponse, error)
	GetEntityProfile(context.Context, string, bool, bool, string, string) (ImplResponse, error)
	PostEntityProfile(context.Context, bool, bool, string, string, EntityProfile) (ImplResponse, error)
	PutEntityProfile(context.Context, string, bool, bool, string, string, EntityProfile) (ImplResponse, error)
	SearchEntities(context.Context, int32, string, bool, bool, string, string, []SearchFilter) (ImplResponse, error)
}


// ExchangeApiServicer defines the api actions for the ExchangeApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type ExchangeApiServicer interface { 
	DeleteExchangeTransaction(context.Context, string, string, string) (ImplResponse, error)
	GetExchangeTransaction(context.Context, string, bool, bool, string, string) (ImplResponse, error)
	ListAccountExchangeTransactions(context.Context, string, int32, string, bool, bool, string, string) (ImplResponse, error)
	ListEntityExchangeTransactions(context.Context, string, int32, string, bool, bool, string, string) (ImplResponse, error)
	PerformExchangeTransaction(context.Context, string, string, ExchangeTransaction) (ImplResponse, error)
	UpdateExchangeTransaction(context.Context, string, string, string, ExchangeTransaction) (ImplResponse, error)
}


// ProductsApiServicer defines the api actions for the ProductsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type ProductsApiServicer interface { 
	GetProducts(context.Context, string, int32, string, bool, string, string) (ImplResponse, error)
}


// StatementApiServicer defines the api actions for the StatementApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type StatementApiServicer interface { 
	GetAccountStatementItem(context.Context, string, string, string, bool, bool, string, string) (ImplResponse, error)
	GetAccountStatementItems(context.Context, string, string, bool, bool, bool, string, string) (ImplResponse, error)
	GetStatementItem(context.Context, string, string, bool, bool, string, string) (ImplResponse, error)
	GetStatementItems(context.Context, string, bool, bool, bool, string, string) (ImplResponse, error)
}


// StatementsApiServicer defines the api actions for the StatementsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type StatementsApiServicer interface { 
	GetAccountStatements(context.Context, string, bool, bool, string, string) (ImplResponse, error)
}


// TransactionsApiServicer defines the api actions for the TransactionsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type TransactionsApiServicer interface { 
	GetAccountTransaction(context.Context, string, string, bool, bool, bool, string, string) (ImplResponse, error)
	GetAccountTransactionImage(context.Context, string, string, string, string) (ImplResponse, error)
	GetAccountTransactionImages(context.Context, string, string, bool, bool, bool, string, string) (ImplResponse, error)
	GetAccountTransactions(context.Context, string, bool, string, string, bool, int32, string, TransactionStatus, bool, string, string) (ImplResponse, error)
	SearchTransactions(context.Context, string, int32, string, bool, bool, string, string, []SearchFilter) (ImplResponse, error)
}
