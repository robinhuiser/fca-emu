/*
 * Cloud API
 *
 * The public facing API through which connectors are exposed as a single abtract API
 *
 * API version: v1.5
 * Contact: support@trexis.net
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package finite

import (
	"fmt"
	"strings"
	"time"

	"github.com/robinhuiser/fca-emu/util"
)

const (
	FCA_SECRET  = "123456789"
	MASK_SYMBOL = "x"
)

//Response return a ImplResponse struct filled
func Response(code int, body interface{}) ImplResponse {
	return ImplResponse{Code: code, Body: body}
}

func isValidSecret(s string) bool {
	e := util.GetEnvString("FCA_SECRET", FCA_SECRET)
	return e == s
}

func setErrorResponse(e string) ErrorResponse {
	m := []string{e}
	return ErrorResponse{
		Status:   true,
		Messages: m,
	}
}

func isMasked(b bool, s string) string {
	if b {
		head := s[:len(s)-4]
		tail := s[len(s)-4:]
		mask := strings.Repeat(MASK_SYMBOL, len(head))
		return fmt.Sprintf("%v%v", mask, tail)
	} else {
		return s
	}
}

func isValidBankDate(d string) string {
	b, _ := time.Parse(util.APIDateFormat, "1974-01-01T00:00:00")
	t, err := time.Parse(util.APIDateFormat, d)
	if err != nil || t.Before(b) {
		return ""
	}
	return d
}

func isValidUUID(u string) string {
	if u == "00000000-0000-0000-0000-000000000000" {
		return ""
	}
	return u
}
