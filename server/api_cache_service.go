/*
 * Cloud API
 *
 * The public facing API through which connectors are exposed as a single abtract API
 *
 * API version: v1.5
 * Contact: support@trexis.net
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package finite

import (
	"context"
	"errors"
	"net/http"
)

// CacheApiService is a service that implents the logic for the CacheApiServicer
// This service should implement the business logic for every endpoint for the CacheApi API.
// Include any external packages or services that will be required by this service.
type CacheApiService struct {
}

// NewCacheApiService creates a default api service
func NewCacheApiService() CacheApiServicer {
	return &CacheApiService{}
}

// DeleteAllCache - Clear the cache for all Finite types
func (s *CacheApiService) DeleteAllCache(ctx context.Context, xTRACEID string) (ImplResponse, error) {

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteAllCache method not implemented")
}

// DeleteCache - Clear the cache for a given type
func (s *CacheApiService) DeleteCache(ctx context.Context, finiteType FiniteType, xTRACEID string) (ImplResponse, error) {

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteCache method not implemented")
}

// GetCache - Get the cache statistics for a given type
func (s *CacheApiService) GetCache(ctx context.Context, finiteType FiniteType, xTRACEID string) (ImplResponse, error) {

	return Response(http.StatusNotImplemented, nil), errors.New("GetCache method not implemented")
}

// ListAllCache - List of all cache statistics
func (s *CacheApiService) ListAllCache(ctx context.Context, xTRACEID string) (ImplResponse, error) {

	return Response(http.StatusNotImplemented, nil), errors.New("ListAllCache method not implemented")
}

// RenewCache - Clear and renew the cache
func (s *CacheApiService) RenewCache(ctx context.Context, finiteType FiniteType, xTRACEID string, cacheReference CacheReference) (ImplResponse, error) {

	return Response(http.StatusNotImplemented, nil), errors.New("RenewCache method not implemented")
}
