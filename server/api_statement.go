/*
 * Cloud API
 *
 * The public facing API through which connectors are exposed as a single abstract API
 *
 * API version: v1.5.1
 * Contact: support@trexis.net
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package finite

import (
	"net/http"
	"strconv"
	"strings"

	"github.com/gorilla/mux"
)

// A StatementApiController binds http requests to an api service and writes the service results to the http response
type StatementApiController struct {
	service StatementApiServicer
}

// NewStatementApiController creates a default api controller
func NewStatementApiController(s StatementApiServicer) Router {
	return &StatementApiController{service: s}
}

// Routes returns all of the api route for the StatementApiController
func (c *StatementApiController) Routes() Routes {
	return Routes{
		{
			"GetAccountStatementItem",
			strings.ToUpper("Get"),
			"/cloud/v1/account/{accountId}/statement/{statementId}/item/{itemId}",
			c.GetAccountStatementItem,
		},
		{
			"GetAccountStatementItems",
			strings.ToUpper("Get"),
			"/cloud/v1/account/{accountId}/statement/{statementId}",
			c.GetAccountStatementItems,
		},
		{
			"GetStatementItem",
			strings.ToUpper("Get"),
			"/cloud/v1/statement/{statementId}/item/{itemId}",
			c.GetStatementItem,
		},
		{
			"GetStatementItems",
			strings.ToUpper("Get"),
			"/cloud/v1/statement/{statementId}",
			c.GetStatementItems,
		},
	}
}

// GetAccountStatementItem - Return a binary item for a statement
func (c *StatementApiController) GetAccountStatementItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountId := params["accountId"]
	statementId := params["statementId"]
	itemId := params["itemId"]
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	result, err := c.service.GetAccountStatementItem(r.Context(), accountId, statementId, itemId, mask, enhance, xTRACEID, xTOKEN)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetAccountStatementItems - Return the list of content items associated with a statement
func (c *StatementApiController) GetAccountStatementItems(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountId := params["accountId"]
	statementId := params["statementId"]
	inline, _ := strconv.ParseBool(query.Get("inline"))
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	result, err := c.service.GetAccountStatementItems(r.Context(), accountId, statementId, inline, mask, enhance, xTRACEID, xTOKEN)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetStatementItem - Return a binary item for a statement
func (c *StatementApiController) GetStatementItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	statementId := params["statementId"]
	itemId := params["itemId"]
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	result, err := c.service.GetStatementItem(r.Context(), statementId, itemId, mask, enhance, xTRACEID, xTOKEN)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetStatementItems - Return the list of content items associated with a statement
func (c *StatementApiController) GetStatementItems(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	statementId := params["statementId"]
	inline, _ := strconv.ParseBool(query.Get("inline"))
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	result, err := c.service.GetStatementItems(r.Context(), statementId, inline, mask, enhance, xTRACEID, xTOKEN)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
