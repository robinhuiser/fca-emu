/*
 * Cloud API
 *
 * The public facing API through which connectors are exposed as a single abstract API
 *
 * API version: v1.5.1
 * Contact: support@trexis.net
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package finite

import (
	"encoding/json"
	"net/http"
	"strconv"
	"strings"

	"github.com/gorilla/mux"
)

// A EntityApiController binds http requests to an api service and writes the service results to the http response
type EntityApiController struct {
	service EntityApiServicer
}

// NewEntityApiController creates a default api controller
func NewEntityApiController(s EntityApiServicer) Router {
	return &EntityApiController{service: s}
}

// Routes returns all of the api route for the EntityApiController
func (c *EntityApiController) Routes() Routes {
	return Routes{
		{
			"GetEntity",
			strings.ToUpper("Get"),
			"/cloud/v1/entity/{entityId}",
			c.GetEntity,
		},
		{
			"GetEntityProfile",
			strings.ToUpper("Get"),
			"/cloud/v1/entity/{entityId}/profile",
			c.GetEntityProfile,
		},
		{
			"PostEntityProfile",
			strings.ToUpper("Post"),
			"/cloud/v1/entities",
			c.PostEntityProfile,
		},
		{
			"PutEntityProfile",
			strings.ToUpper("Put"),
			"/cloud/v1/entity/{entityId}/profile",
			c.PutEntityProfile,
		},
		{
			"SearchEntities",
			strings.ToUpper("Post"),
			"/cloud/v1/entities/search",
			c.SearchEntities,
		},
	}
}

// GetEntity - Return entity by entityId
func (c *EntityApiController) GetEntity(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	entityId := params["entityId"]
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	result, err := c.service.GetEntity(r.Context(), entityId, mask, enhance, xTRACEID, xTOKEN)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEntityProfile - Return entity profile
func (c *EntityApiController) GetEntityProfile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	entityId := params["entityId"]
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	result, err := c.service.GetEntityProfile(r.Context(), entityId, mask, enhance, xTRACEID, xTOKEN)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostEntityProfile - Create entity
func (c *EntityApiController) PostEntityProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	entityProfile := &EntityProfile{}
	if err := json.NewDecoder(r.Body).Decode(&entityProfile); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.PostEntityProfile(r.Context(), mask, enhance, xTRACEID, xTOKEN, *entityProfile)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PutEntityProfile - Update entity profile
func (c *EntityApiController) PutEntityProfile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	entityId := params["entityId"]
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	entityProfile := &EntityProfile{}
	if err := json.NewDecoder(r.Body).Decode(&entityProfile); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.PutEntityProfile(r.Context(), entityId, mask, enhance, xTRACEID, xTOKEN, *entityProfile)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchEntities - Search for entities
func (c *EntityApiController) SearchEntities(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	limit, err := parseInt32Parameter(query.Get("limit"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	cursor := query.Get("cursor")
	mask, _ := strconv.ParseBool(query.Get("mask"))
	enhance, _ := strconv.ParseBool(query.Get("enhance"))
	xTRACEID := r.Header.Get("X-TRACE-ID")
	xTOKEN := r.Header.Get("X-TOKEN")
	searchFilter := &[]SearchFilter{}
	if err := json.NewDecoder(r.Body).Decode(&searchFilter); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.SearchEntities(r.Context(), limit, cursor, mask, enhance, xTRACEID, xTOKEN, *searchFilter)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
