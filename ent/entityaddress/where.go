// Code generated by entc, DO NOT EDIT.

package entityaddress

import (
	"entgo.io/ent/dialect/sql"
	"github.com/robinhuiser/finite-mock-server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// PostalCode applies equality check predicate on the "postalCode" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// Line1 applies equality check predicate on the "line1" field. It's identical to Line1EQ.
func Line1(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLine1), v))
	})
}

// Line2 applies equality check predicate on the "line2" field. It's identical to Line2EQ.
func Line2(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLine2), v))
	})
}

// Line3 applies equality check predicate on the "line3" field. It's identical to Line3EQ.
func Line3(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLine3), v))
	})
}

// Primary applies equality check predicate on the "primary" field. It's identical to PrimaryEQ.
func Primary(v bool) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimary), v))
	})
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountry), v))
	})
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCountry), v...))
	})
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCountry), v...))
	})
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountry), v))
	})
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountry), v))
	})
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountry), v))
	})
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountry), v))
	})
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountry), v))
	})
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountry), v))
	})
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountry), v))
	})
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountry), v))
	})
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountry), v))
	})
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCity), v))
	})
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCity), v...))
	})
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCity), v...))
	})
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCity), v))
	})
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCity), v))
	})
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCity), v))
	})
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCity), v))
	})
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCity), v))
	})
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCity), v))
	})
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCity), v))
	})
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCity), v))
	})
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCity), v))
	})
}

// PostalCodeEQ applies the EQ predicate on the "postalCode" field.
func PostalCodeEQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeNEQ applies the NEQ predicate on the "postalCode" field.
func PostalCodeNEQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeIn applies the In predicate on the "postalCode" field.
func PostalCodeIn(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeNotIn applies the NotIn predicate on the "postalCode" field.
func PostalCodeNotIn(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeGT applies the GT predicate on the "postalCode" field.
func PostalCodeGT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeGTE applies the GTE predicate on the "postalCode" field.
func PostalCodeGTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLT applies the LT predicate on the "postalCode" field.
func PostalCodeLT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLTE applies the LTE predicate on the "postalCode" field.
func PostalCodeLTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContains applies the Contains predicate on the "postalCode" field.
func PostalCodeContains(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postalCode" field.
func PostalCodeHasPrefix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postalCode" field.
func PostalCodeHasSuffix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postalCode" field.
func PostalCodeEqualFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postalCode" field.
func PostalCodeContainsFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPostalCode), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldState), v))
	})
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldState), v))
	})
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldState), v))
	})
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldState), v))
	})
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldState), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// Line1EQ applies the EQ predicate on the "line1" field.
func Line1EQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLine1), v))
	})
}

// Line1NEQ applies the NEQ predicate on the "line1" field.
func Line1NEQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLine1), v))
	})
}

// Line1In applies the In predicate on the "line1" field.
func Line1In(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLine1), v...))
	})
}

// Line1NotIn applies the NotIn predicate on the "line1" field.
func Line1NotIn(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLine1), v...))
	})
}

// Line1GT applies the GT predicate on the "line1" field.
func Line1GT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLine1), v))
	})
}

// Line1GTE applies the GTE predicate on the "line1" field.
func Line1GTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLine1), v))
	})
}

// Line1LT applies the LT predicate on the "line1" field.
func Line1LT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLine1), v))
	})
}

// Line1LTE applies the LTE predicate on the "line1" field.
func Line1LTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLine1), v))
	})
}

// Line1Contains applies the Contains predicate on the "line1" field.
func Line1Contains(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLine1), v))
	})
}

// Line1HasPrefix applies the HasPrefix predicate on the "line1" field.
func Line1HasPrefix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLine1), v))
	})
}

// Line1HasSuffix applies the HasSuffix predicate on the "line1" field.
func Line1HasSuffix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLine1), v))
	})
}

// Line1EqualFold applies the EqualFold predicate on the "line1" field.
func Line1EqualFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLine1), v))
	})
}

// Line1ContainsFold applies the ContainsFold predicate on the "line1" field.
func Line1ContainsFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLine1), v))
	})
}

// Line2EQ applies the EQ predicate on the "line2" field.
func Line2EQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLine2), v))
	})
}

// Line2NEQ applies the NEQ predicate on the "line2" field.
func Line2NEQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLine2), v))
	})
}

// Line2In applies the In predicate on the "line2" field.
func Line2In(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLine2), v...))
	})
}

// Line2NotIn applies the NotIn predicate on the "line2" field.
func Line2NotIn(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLine2), v...))
	})
}

// Line2GT applies the GT predicate on the "line2" field.
func Line2GT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLine2), v))
	})
}

// Line2GTE applies the GTE predicate on the "line2" field.
func Line2GTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLine2), v))
	})
}

// Line2LT applies the LT predicate on the "line2" field.
func Line2LT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLine2), v))
	})
}

// Line2LTE applies the LTE predicate on the "line2" field.
func Line2LTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLine2), v))
	})
}

// Line2Contains applies the Contains predicate on the "line2" field.
func Line2Contains(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLine2), v))
	})
}

// Line2HasPrefix applies the HasPrefix predicate on the "line2" field.
func Line2HasPrefix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLine2), v))
	})
}

// Line2HasSuffix applies the HasSuffix predicate on the "line2" field.
func Line2HasSuffix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLine2), v))
	})
}

// Line2IsNil applies the IsNil predicate on the "line2" field.
func Line2IsNil() predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLine2)))
	})
}

// Line2NotNil applies the NotNil predicate on the "line2" field.
func Line2NotNil() predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLine2)))
	})
}

// Line2EqualFold applies the EqualFold predicate on the "line2" field.
func Line2EqualFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLine2), v))
	})
}

// Line2ContainsFold applies the ContainsFold predicate on the "line2" field.
func Line2ContainsFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLine2), v))
	})
}

// Line3EQ applies the EQ predicate on the "line3" field.
func Line3EQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLine3), v))
	})
}

// Line3NEQ applies the NEQ predicate on the "line3" field.
func Line3NEQ(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLine3), v))
	})
}

// Line3In applies the In predicate on the "line3" field.
func Line3In(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLine3), v...))
	})
}

// Line3NotIn applies the NotIn predicate on the "line3" field.
func Line3NotIn(vs ...string) predicate.EntityAddress {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityAddress(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLine3), v...))
	})
}

// Line3GT applies the GT predicate on the "line3" field.
func Line3GT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLine3), v))
	})
}

// Line3GTE applies the GTE predicate on the "line3" field.
func Line3GTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLine3), v))
	})
}

// Line3LT applies the LT predicate on the "line3" field.
func Line3LT(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLine3), v))
	})
}

// Line3LTE applies the LTE predicate on the "line3" field.
func Line3LTE(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLine3), v))
	})
}

// Line3Contains applies the Contains predicate on the "line3" field.
func Line3Contains(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLine3), v))
	})
}

// Line3HasPrefix applies the HasPrefix predicate on the "line3" field.
func Line3HasPrefix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLine3), v))
	})
}

// Line3HasSuffix applies the HasSuffix predicate on the "line3" field.
func Line3HasSuffix(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLine3), v))
	})
}

// Line3IsNil applies the IsNil predicate on the "line3" field.
func Line3IsNil() predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLine3)))
	})
}

// Line3NotNil applies the NotNil predicate on the "line3" field.
func Line3NotNil() predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLine3)))
	})
}

// Line3EqualFold applies the EqualFold predicate on the "line3" field.
func Line3EqualFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLine3), v))
	})
}

// Line3ContainsFold applies the ContainsFold predicate on the "line3" field.
func Line3ContainsFold(v string) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLine3), v))
	})
}

// PrimaryEQ applies the EQ predicate on the "primary" field.
func PrimaryEQ(v bool) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimary), v))
	})
}

// PrimaryNEQ applies the NEQ predicate on the "primary" field.
func PrimaryNEQ(v bool) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrimary), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntityAddress) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntityAddress) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntityAddress) predicate.EntityAddress {
	return predicate.EntityAddress(func(s *sql.Selector) {
		p(s.Not())
	})
}
