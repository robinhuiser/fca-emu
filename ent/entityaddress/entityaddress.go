// Code generated by entc, DO NOT EDIT.

package entityaddress

import (
	"fmt"
)

const (
	// Label holds the string label denoting the entityaddress type in the database.
	Label = "entity_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldPostalCode holds the string denoting the postalcode field in the database.
	FieldPostalCode = "postal_code"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLine1 holds the string denoting the line1 field in the database.
	FieldLine1 = "line1"
	// FieldLine2 holds the string denoting the line2 field in the database.
	FieldLine2 = "line2"
	// FieldLine3 holds the string denoting the line3 field in the database.
	FieldLine3 = "line3"
	// FieldPrimary holds the string denoting the primary field in the database.
	FieldPrimary = "primary"
	// Table holds the table name of the entityaddress in the database.
	Table = "entity_addresses"
)

// Columns holds all SQL columns for entityaddress fields.
var Columns = []string{
	FieldID,
	FieldCountry,
	FieldCity,
	FieldPostalCode,
	FieldState,
	FieldType,
	FieldLine1,
	FieldLine2,
	FieldLine3,
	FieldPrimary,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "entity_addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"entity_entity_addresses",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeBUSINESS Type = "BUSINESS"
	TypePRIVATE  Type = "PRIVATE"
	TypeMAILBOX  Type = "MAILBOX"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeBUSINESS, TypePRIVATE, TypeMAILBOX:
		return nil
	default:
		return fmt.Errorf("entityaddress: invalid enum value for type field: %q", _type)
	}
}
