// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/robinhuiser/fca-emu/ent/binaryitem"
)

// BinaryItemCreate is the builder for creating a BinaryItem entity.
type BinaryItemCreate struct {
	config
	mutation *BinaryItemMutation
	hooks    []Hook
}

// SetFormat sets the "format" field.
func (bic *BinaryItemCreate) SetFormat(s string) *BinaryItemCreate {
	bic.mutation.SetFormat(s)
	return bic
}

// SetLength sets the "length" field.
func (bic *BinaryItemCreate) SetLength(i int) *BinaryItemCreate {
	bic.mutation.SetLength(i)
	return bic
}

// SetContent sets the "content" field.
func (bic *BinaryItemCreate) SetContent(b []byte) *BinaryItemCreate {
	bic.mutation.SetContent(b)
	return bic
}

// SetURL sets the "url" field.
func (bic *BinaryItemCreate) SetURL(s string) *BinaryItemCreate {
	bic.mutation.SetURL(s)
	return bic
}

// Mutation returns the BinaryItemMutation object of the builder.
func (bic *BinaryItemCreate) Mutation() *BinaryItemMutation {
	return bic.mutation
}

// Save creates the BinaryItem in the database.
func (bic *BinaryItemCreate) Save(ctx context.Context) (*BinaryItem, error) {
	var (
		err  error
		node *BinaryItem
	)
	if len(bic.hooks) == 0 {
		if err = bic.check(); err != nil {
			return nil, err
		}
		node, err = bic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BinaryItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bic.check(); err != nil {
				return nil, err
			}
			bic.mutation = mutation
			node, err = bic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bic.hooks) - 1; i >= 0; i-- {
			mut = bic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bic *BinaryItemCreate) SaveX(ctx context.Context) *BinaryItem {
	v, err := bic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (bic *BinaryItemCreate) check() error {
	if _, ok := bic.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New("ent: missing required field \"format\"")}
	}
	if v, ok := bic.mutation.Format(); ok {
		if err := binaryitem.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf("ent: validator failed for field \"format\": %w", err)}
		}
	}
	if _, ok := bic.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New("ent: missing required field \"length\"")}
	}
	if _, ok := bic.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New("ent: missing required field \"content\"")}
	}
	if _, ok := bic.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New("ent: missing required field \"url\"")}
	}
	return nil
}

func (bic *BinaryItemCreate) sqlSave(ctx context.Context) (*BinaryItem, error) {
	_node, _spec := bic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bic *BinaryItemCreate) createSpec() (*BinaryItem, *sqlgraph.CreateSpec) {
	var (
		_node = &BinaryItem{config: bic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: binaryitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: binaryitem.FieldID,
			},
		}
	)
	if value, ok := bic.mutation.Format(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binaryitem.FieldFormat,
		})
		_node.Format = value
	}
	if value, ok := bic.mutation.Length(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: binaryitem.FieldLength,
		})
		_node.Length = value
	}
	if value, ok := bic.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: binaryitem.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := bic.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binaryitem.FieldURL,
		})
		_node.URL = value
	}
	return _node, _spec
}

// BinaryItemCreateBulk is the builder for creating many BinaryItem entities in bulk.
type BinaryItemCreateBulk struct {
	config
	builders []*BinaryItemCreate
}

// Save creates the BinaryItem entities in the database.
func (bicb *BinaryItemCreateBulk) Save(ctx context.Context) ([]*BinaryItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bicb.builders))
	nodes := make([]*BinaryItem, len(bicb.builders))
	mutators := make([]Mutator, len(bicb.builders))
	for i := range bicb.builders {
		func(i int, root context.Context) {
			builder := bicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BinaryItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bicb *BinaryItemCreateBulk) SaveX(ctx context.Context) []*BinaryItem {
	v, err := bicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
