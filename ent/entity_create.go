// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/robinhuiser/finite-mock-server/ent/account"
	"github.com/robinhuiser/finite-mock-server/ent/entity"
	"github.com/robinhuiser/finite-mock-server/ent/entityaddress"
	"github.com/robinhuiser/finite-mock-server/ent/entitycontactpoint"
	"github.com/robinhuiser/finite-mock-server/ent/entitypreference"
	"github.com/robinhuiser/finite-mock-server/ent/entitytaxinformation"
)

// EntityCreate is the builder for creating a Entity entity.
type EntityCreate struct {
	config
	mutation *EntityMutation
	hooks    []Hook
}

// SetDateCreated sets the "dateCreated" field.
func (ec *EntityCreate) SetDateCreated(t time.Time) *EntityCreate {
	ec.mutation.SetDateCreated(t)
	return ec
}

// SetFirstname sets the "firstname" field.
func (ec *EntityCreate) SetFirstname(s string) *EntityCreate {
	ec.mutation.SetFirstname(s)
	return ec
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (ec *EntityCreate) SetNillableFirstname(s *string) *EntityCreate {
	if s != nil {
		ec.SetFirstname(*s)
	}
	return ec
}

// SetLastname sets the "lastname" field.
func (ec *EntityCreate) SetLastname(s string) *EntityCreate {
	ec.mutation.SetLastname(s)
	return ec
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (ec *EntityCreate) SetNillableLastname(s *string) *EntityCreate {
	if s != nil {
		ec.SetLastname(*s)
	}
	return ec
}

// SetFullname sets the "fullname" field.
func (ec *EntityCreate) SetFullname(s string) *EntityCreate {
	ec.mutation.SetFullname(s)
	return ec
}

// SetNillableFullname sets the "fullname" field if the given value is not nil.
func (ec *EntityCreate) SetNillableFullname(s *string) *EntityCreate {
	if s != nil {
		ec.SetFullname(*s)
	}
	return ec
}

// SetDateOfBirth sets the "dateOfBirth" field.
func (ec *EntityCreate) SetDateOfBirth(t time.Time) *EntityCreate {
	ec.mutation.SetDateOfBirth(t)
	return ec
}

// SetType sets the "type" field.
func (ec *EntityCreate) SetType(e entity.Type) *EntityCreate {
	ec.mutation.SetType(e)
	return ec
}

// SetLastLoginDate sets the "lastLoginDate" field.
func (ec *EntityCreate) SetLastLoginDate(t time.Time) *EntityCreate {
	ec.mutation.SetLastLoginDate(t)
	return ec
}

// SetUsername sets the "username" field.
func (ec *EntityCreate) SetUsername(s string) *EntityCreate {
	ec.mutation.SetUsername(s)
	return ec
}

// SetToken sets the "token" field.
func (ec *EntityCreate) SetToken(s string) *EntityCreate {
	ec.mutation.SetToken(s)
	return ec
}

// SetURL sets the "url" field.
func (ec *EntityCreate) SetURL(s string) *EntityCreate {
	ec.mutation.SetURL(s)
	return ec
}

// SetID sets the "id" field.
func (ec *EntityCreate) SetID(u uuid.UUID) *EntityCreate {
	ec.mutation.SetID(u)
	return ec
}

// AddEntityTaxInformationIDs adds the "entityTaxInformation" edge to the EntityTaxInformation entity by IDs.
func (ec *EntityCreate) AddEntityTaxInformationIDs(ids ...int) *EntityCreate {
	ec.mutation.AddEntityTaxInformationIDs(ids...)
	return ec
}

// AddEntityTaxInformation adds the "entityTaxInformation" edges to the EntityTaxInformation entity.
func (ec *EntityCreate) AddEntityTaxInformation(e ...*EntityTaxInformation) *EntityCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEntityTaxInformationIDs(ids...)
}

// AddEntityAddressIDs adds the "entityAddresses" edge to the EntityAddress entity by IDs.
func (ec *EntityCreate) AddEntityAddressIDs(ids ...int) *EntityCreate {
	ec.mutation.AddEntityAddressIDs(ids...)
	return ec
}

// AddEntityAddresses adds the "entityAddresses" edges to the EntityAddress entity.
func (ec *EntityCreate) AddEntityAddresses(e ...*EntityAddress) *EntityCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEntityAddressIDs(ids...)
}

// AddEntityPreferenceIDs adds the "entityPreferences" edge to the EntityPreference entity by IDs.
func (ec *EntityCreate) AddEntityPreferenceIDs(ids ...int) *EntityCreate {
	ec.mutation.AddEntityPreferenceIDs(ids...)
	return ec
}

// AddEntityPreferences adds the "entityPreferences" edges to the EntityPreference entity.
func (ec *EntityCreate) AddEntityPreferences(e ...*EntityPreference) *EntityCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEntityPreferenceIDs(ids...)
}

// AddEntityContactPointIDs adds the "entityContactPoints" edge to the EntityContactPoint entity by IDs.
func (ec *EntityCreate) AddEntityContactPointIDs(ids ...int) *EntityCreate {
	ec.mutation.AddEntityContactPointIDs(ids...)
	return ec
}

// AddEntityContactPoints adds the "entityContactPoints" edges to the EntityContactPoint entity.
func (ec *EntityCreate) AddEntityContactPoints(e ...*EntityContactPoint) *EntityCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEntityContactPointIDs(ids...)
}

// AddOwnsAccountIDs adds the "owns_account" edge to the Account entity by IDs.
func (ec *EntityCreate) AddOwnsAccountIDs(ids ...uuid.UUID) *EntityCreate {
	ec.mutation.AddOwnsAccountIDs(ids...)
	return ec
}

// AddOwnsAccount adds the "owns_account" edges to the Account entity.
func (ec *EntityCreate) AddOwnsAccount(a ...*Account) *EntityCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ec.AddOwnsAccountIDs(ids...)
}

// Mutation returns the EntityMutation object of the builder.
func (ec *EntityCreate) Mutation() *EntityMutation {
	return ec.mutation
}

// Save creates the Entity in the database.
func (ec *EntityCreate) Save(ctx context.Context) (*Entity, error) {
	var (
		err  error
		node *Entity
	)
	ec.defaults()
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntityCreate) SaveX(ctx context.Context) *Entity {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ec *EntityCreate) defaults() {
	if _, ok := ec.mutation.ID(); !ok {
		v := entity.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntityCreate) check() error {
	if _, ok := ec.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "dateCreated", err: errors.New("ent: missing required field \"dateCreated\"")}
	}
	if _, ok := ec.mutation.DateOfBirth(); !ok {
		return &ValidationError{Name: "dateOfBirth", err: errors.New("ent: missing required field \"dateOfBirth\"")}
	}
	if _, ok := ec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := ec.mutation.GetType(); ok {
		if err := entity.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := ec.mutation.LastLoginDate(); !ok {
		return &ValidationError{Name: "lastLoginDate", err: errors.New("ent: missing required field \"lastLoginDate\"")}
	}
	if _, ok := ec.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New("ent: missing required field \"username\"")}
	}
	if _, ok := ec.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New("ent: missing required field \"token\"")}
	}
	if _, ok := ec.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New("ent: missing required field \"url\"")}
	}
	return nil
}

func (ec *EntityCreate) sqlSave(ctx context.Context) (*Entity, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (ec *EntityCreate) createSpec() (*Entity, *sqlgraph.CreateSpec) {
	var (
		_node = &Entity{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entity.FieldID,
			},
		}
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.DateCreated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateCreated,
		})
		_node.DateCreated = value
	}
	if value, ok := ec.mutation.Firstname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldFirstname,
		})
		_node.Firstname = value
	}
	if value, ok := ec.mutation.Lastname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldLastname,
		})
		_node.Lastname = value
	}
	if value, ok := ec.mutation.Fullname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldFullname,
		})
		_node.Fullname = value
	}
	if value, ok := ec.mutation.DateOfBirth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateOfBirth,
		})
		_node.DateOfBirth = value
	}
	if value, ok := ec.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entity.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ec.mutation.LastLoginDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldLastLoginDate,
		})
		_node.LastLoginDate = value
	}
	if value, ok := ec.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := ec.mutation.Token(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldToken,
		})
		_node.Token = value
	}
	if value, ok := ec.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldURL,
		})
		_node.URL = value
	}
	if nodes := ec.mutation.EntityTaxInformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityTaxInformationTable,
			Columns: []string{entity.EntityTaxInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitytaxinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EntityAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityAddressesTable,
			Columns: []string{entity.EntityAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entityaddress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EntityPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityPreferencesTable,
			Columns: []string{entity.EntityPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitypreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EntityContactPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityContactPointsTable,
			Columns: []string{entity.EntityContactPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitycontactpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.OwnsAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entity.OwnsAccountTable,
			Columns: entity.OwnsAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntityCreateBulk is the builder for creating many Entity entities in bulk.
type EntityCreateBulk struct {
	config
	builders []*EntityCreate
}

// Save creates the Entity entities in the database.
func (ecb *EntityCreateBulk) Save(ctx context.Context) ([]*Entity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entity, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntityCreateBulk) SaveX(ctx context.Context) []*Entity {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
