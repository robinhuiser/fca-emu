// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/robinhuiser/fca-emu/ent/entityaddress"
)

// EntityAddressCreate is the builder for creating a EntityAddress entity.
type EntityAddressCreate struct {
	config
	mutation *EntityAddressMutation
	hooks    []Hook
}

// SetCountry sets the "country" field.
func (eac *EntityAddressCreate) SetCountry(s string) *EntityAddressCreate {
	eac.mutation.SetCountry(s)
	return eac
}

// SetCity sets the "city" field.
func (eac *EntityAddressCreate) SetCity(s string) *EntityAddressCreate {
	eac.mutation.SetCity(s)
	return eac
}

// SetPostalCode sets the "postalCode" field.
func (eac *EntityAddressCreate) SetPostalCode(s string) *EntityAddressCreate {
	eac.mutation.SetPostalCode(s)
	return eac
}

// SetState sets the "state" field.
func (eac *EntityAddressCreate) SetState(s string) *EntityAddressCreate {
	eac.mutation.SetState(s)
	return eac
}

// SetType sets the "type" field.
func (eac *EntityAddressCreate) SetType(e entityaddress.Type) *EntityAddressCreate {
	eac.mutation.SetType(e)
	return eac
}

// SetLine1 sets the "line1" field.
func (eac *EntityAddressCreate) SetLine1(s string) *EntityAddressCreate {
	eac.mutation.SetLine1(s)
	return eac
}

// SetLine2 sets the "line2" field.
func (eac *EntityAddressCreate) SetLine2(s string) *EntityAddressCreate {
	eac.mutation.SetLine2(s)
	return eac
}

// SetNillableLine2 sets the "line2" field if the given value is not nil.
func (eac *EntityAddressCreate) SetNillableLine2(s *string) *EntityAddressCreate {
	if s != nil {
		eac.SetLine2(*s)
	}
	return eac
}

// SetLine3 sets the "line3" field.
func (eac *EntityAddressCreate) SetLine3(s string) *EntityAddressCreate {
	eac.mutation.SetLine3(s)
	return eac
}

// SetNillableLine3 sets the "line3" field if the given value is not nil.
func (eac *EntityAddressCreate) SetNillableLine3(s *string) *EntityAddressCreate {
	if s != nil {
		eac.SetLine3(*s)
	}
	return eac
}

// SetPrimary sets the "primary" field.
func (eac *EntityAddressCreate) SetPrimary(b bool) *EntityAddressCreate {
	eac.mutation.SetPrimary(b)
	return eac
}

// Mutation returns the EntityAddressMutation object of the builder.
func (eac *EntityAddressCreate) Mutation() *EntityAddressMutation {
	return eac.mutation
}

// Save creates the EntityAddress in the database.
func (eac *EntityAddressCreate) Save(ctx context.Context) (*EntityAddress, error) {
	var (
		err  error
		node *EntityAddress
	)
	if len(eac.hooks) == 0 {
		if err = eac.check(); err != nil {
			return nil, err
		}
		node, err = eac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityAddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eac.check(); err != nil {
				return nil, err
			}
			eac.mutation = mutation
			node, err = eac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eac.hooks) - 1; i >= 0; i-- {
			mut = eac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (eac *EntityAddressCreate) SaveX(ctx context.Context) *EntityAddress {
	v, err := eac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (eac *EntityAddressCreate) check() error {
	if _, ok := eac.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New("ent: missing required field \"country\"")}
	}
	if _, ok := eac.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New("ent: missing required field \"city\"")}
	}
	if _, ok := eac.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postalCode", err: errors.New("ent: missing required field \"postalCode\"")}
	}
	if _, ok := eac.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New("ent: missing required field \"state\"")}
	}
	if _, ok := eac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := eac.mutation.GetType(); ok {
		if err := entityaddress.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := eac.mutation.Line1(); !ok {
		return &ValidationError{Name: "line1", err: errors.New("ent: missing required field \"line1\"")}
	}
	if _, ok := eac.mutation.Primary(); !ok {
		return &ValidationError{Name: "primary", err: errors.New("ent: missing required field \"primary\"")}
	}
	return nil
}

func (eac *EntityAddressCreate) sqlSave(ctx context.Context) (*EntityAddress, error) {
	_node, _spec := eac.createSpec()
	if err := sqlgraph.CreateNode(ctx, eac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (eac *EntityAddressCreate) createSpec() (*EntityAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &EntityAddress{config: eac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entityaddress.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entityaddress.FieldID,
			},
		}
	)
	if value, ok := eac.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entityaddress.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := eac.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entityaddress.FieldCity,
		})
		_node.City = value
	}
	if value, ok := eac.mutation.PostalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entityaddress.FieldPostalCode,
		})
		_node.PostalCode = value
	}
	if value, ok := eac.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entityaddress.FieldState,
		})
		_node.State = value
	}
	if value, ok := eac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entityaddress.FieldType,
		})
		_node.Type = value
	}
	if value, ok := eac.mutation.Line1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entityaddress.FieldLine1,
		})
		_node.Line1 = value
	}
	if value, ok := eac.mutation.Line2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entityaddress.FieldLine2,
		})
		_node.Line2 = value
	}
	if value, ok := eac.mutation.Line3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entityaddress.FieldLine3,
		})
		_node.Line3 = value
	}
	if value, ok := eac.mutation.Primary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entityaddress.FieldPrimary,
		})
		_node.Primary = value
	}
	return _node, _spec
}

// EntityAddressCreateBulk is the builder for creating many EntityAddress entities in bulk.
type EntityAddressCreateBulk struct {
	config
	builders []*EntityAddressCreate
}

// Save creates the EntityAddress entities in the database.
func (eacb *EntityAddressCreateBulk) Save(ctx context.Context) ([]*EntityAddress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eacb.builders))
	nodes := make([]*EntityAddress, len(eacb.builders))
	mutators := make([]Mutator, len(eacb.builders))
	for i := range eacb.builders {
		func(i int, root context.Context) {
			builder := eacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eacb *EntityAddressCreateBulk) SaveX(ctx context.Context) []*EntityAddress {
	v, err := eacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
