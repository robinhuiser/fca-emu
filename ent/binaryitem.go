// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/robinhuiser/fca-emu/ent/binaryitem"
	"github.com/robinhuiser/fca-emu/ent/transaction"
)

// BinaryItem is the model entity for the BinaryItem schema.
type BinaryItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Format holds the value of the "format" field.
	Format string `json:"format,omitempty"`
	// Length holds the value of the "length" field.
	Length int `json:"length,omitempty"`
	// Content holds the value of the "content" field.
	Content []byte `json:"content,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BinaryItemQuery when eager-loading is set.
	Edges              BinaryItemEdges `json:"edges"`
	transaction_images *uuid.UUID
}

// BinaryItemEdges holds the relations/edges for other nodes in the graph.
type BinaryItemEdges struct {
	// Transaction holds the value of the transaction edge.
	Transaction *Transaction `json:"transaction,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TransactionOrErr returns the Transaction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BinaryItemEdges) TransactionOrErr() (*Transaction, error) {
	if e.loadedTypes[0] {
		if e.Transaction == nil {
			// The edge transaction was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: transaction.Label}
		}
		return e.Transaction, nil
	}
	return nil, &NotLoadedError{edge: "transaction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BinaryItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case binaryitem.FieldContent:
			values[i] = &[]byte{}
		case binaryitem.FieldID, binaryitem.FieldLength:
			values[i] = &sql.NullInt64{}
		case binaryitem.FieldFormat, binaryitem.FieldURL:
			values[i] = &sql.NullString{}
		case binaryitem.ForeignKeys[0]: // transaction_images
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type BinaryItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BinaryItem fields.
func (bi *BinaryItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case binaryitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bi.ID = int(value.Int64)
		case binaryitem.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				bi.Format = value.String
			}
		case binaryitem.FieldLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				bi.Length = int(value.Int64)
			}
		case binaryitem.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil {
				bi.Content = *value
			}
		case binaryitem.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				bi.URL = value.String
			}
		case binaryitem.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_images", values[i])
			} else if value != nil {
				bi.transaction_images = value
			}
		}
	}
	return nil
}

// QueryTransaction queries the "transaction" edge of the BinaryItem entity.
func (bi *BinaryItem) QueryTransaction() *TransactionQuery {
	return (&BinaryItemClient{config: bi.config}).QueryTransaction(bi)
}

// Update returns a builder for updating this BinaryItem.
// Note that you need to call BinaryItem.Unwrap() before calling this method if this BinaryItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (bi *BinaryItem) Update() *BinaryItemUpdateOne {
	return (&BinaryItemClient{config: bi.config}).UpdateOne(bi)
}

// Unwrap unwraps the BinaryItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bi *BinaryItem) Unwrap() *BinaryItem {
	tx, ok := bi.config.driver.(*txDriver)
	if !ok {
		panic("ent: BinaryItem is not a transactional entity")
	}
	bi.config.driver = tx.drv
	return bi
}

// String implements the fmt.Stringer.
func (bi *BinaryItem) String() string {
	var builder strings.Builder
	builder.WriteString("BinaryItem(")
	builder.WriteString(fmt.Sprintf("id=%v", bi.ID))
	builder.WriteString(", format=")
	builder.WriteString(bi.Format)
	builder.WriteString(", length=")
	builder.WriteString(fmt.Sprintf("%v", bi.Length))
	builder.WriteString(", content=")
	builder.WriteString(fmt.Sprintf("%v", bi.Content))
	builder.WriteString(", url=")
	builder.WriteString(bi.URL)
	builder.WriteByte(')')
	return builder.String()
}

// BinaryItems is a parsable slice of BinaryItem.
type BinaryItems []*BinaryItem

func (bi BinaryItems) config(cfg config) {
	for _i := range bi {
		bi[_i].config = cfg
	}
}
