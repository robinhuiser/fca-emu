// Code generated by entc, DO NOT EDIT.

package account

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the account type in the database.
	Label = "account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldParentId holds the string denoting the parentid field in the database.
	FieldParentId = "parent_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDateCreated holds the string denoting the datecreated field in the database.
	FieldDateCreated = "date_created"
	// FieldDateOpened holds the string denoting the dateopened field in the database.
	FieldDateOpened = "date_opened"
	// FieldDateLastUpdated holds the string denoting the datelastupdated field in the database.
	FieldDateLastUpdated = "date_last_updated"
	// FieldDateClosed holds the string denoting the dateclosed field in the database.
	FieldDateClosed = "date_closed"
	// FieldCurrencyCode holds the string denoting the currencycode field in the database.
	FieldCurrencyCode = "currency_code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldInterestReporting holds the string denoting the interestreporting field in the database.
	FieldInterestReporting = "interest_reporting"
	// FieldCurrentBalance holds the string denoting the currentbalance field in the database.
	FieldCurrentBalance = "current_balance"
	// FieldAvailableBalance holds the string denoting the availablebalance field in the database.
	FieldAvailableBalance = "available_balance"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// EdgeBranch holds the string denoting the branch edge name in mutations.
	EdgeBranch = "branch"
	// EdgeOwners holds the string denoting the owners edge name in mutations.
	EdgeOwners = "owners"
	// EdgePreferences holds the string denoting the preferences edge name in mutations.
	EdgePreferences = "preferences"
	// EdgeRoutingnumbers holds the string denoting the routingnumbers edge name in mutations.
	EdgeRoutingnumbers = "routingnumbers"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// EdgeTransactions holds the string denoting the transactions edge name in mutations.
	EdgeTransactions = "transactions"
	// Table holds the table name of the account in the database.
	Table = "accounts"
	// BranchTable is the table the holds the branch relation/edge.
	BranchTable = "accounts"
	// BranchInverseTable is the table name for the Branch entity.
	// It exists in this package in order to avoid circular dependency with the "branch" package.
	BranchInverseTable = "branches"
	// BranchColumn is the table column denoting the branch relation/edge.
	BranchColumn = "account_branch"
	// OwnersTable is the table the holds the owners relation/edge. The primary key declared below.
	OwnersTable = "account_owners"
	// OwnersInverseTable is the table name for the Entity entity.
	// It exists in this package in order to avoid circular dependency with the "entity" package.
	OwnersInverseTable = "entities"
	// PreferencesTable is the table the holds the preferences relation/edge.
	PreferencesTable = "preferences"
	// PreferencesInverseTable is the table name for the Preference entity.
	// It exists in this package in order to avoid circular dependency with the "preference" package.
	PreferencesInverseTable = "preferences"
	// PreferencesColumn is the table column denoting the preferences relation/edge.
	PreferencesColumn = "account_preferences"
	// RoutingnumbersTable is the table the holds the routingnumbers relation/edge.
	RoutingnumbersTable = "routing_numbers"
	// RoutingnumbersInverseTable is the table name for the RoutingNumber entity.
	// It exists in this package in order to avoid circular dependency with the "routingnumber" package.
	RoutingnumbersInverseTable = "routing_numbers"
	// RoutingnumbersColumn is the table column denoting the routingnumbers relation/edge.
	RoutingnumbersColumn = "account_routingnumbers"
	// ProductTable is the table the holds the product relation/edge.
	ProductTable = "accounts"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "account_product"
	// TransactionsTable is the table the holds the transactions relation/edge.
	TransactionsTable = "transactions"
	// TransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionsInverseTable = "transactions"
	// TransactionsColumn is the table column denoting the transactions relation/edge.
	TransactionsColumn = "account_transactions"
)

// Columns holds all SQL columns for account fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldNumber,
	FieldParentId,
	FieldName,
	FieldTitle,
	FieldDateCreated,
	FieldDateOpened,
	FieldDateLastUpdated,
	FieldDateClosed,
	FieldCurrencyCode,
	FieldStatus,
	FieldSource,
	FieldInterestReporting,
	FieldCurrentBalance,
	FieldAvailableBalance,
	FieldURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "accounts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"account_branch",
	"account_product",
}

var (
	// OwnersPrimaryKey and OwnersColumn2 are the table columns denoting the
	// primary key for the owners relation (M2M).
	OwnersPrimaryKey = []string{"account_id", "entity_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
