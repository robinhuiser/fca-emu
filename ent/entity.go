// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/robinhuiser/fca-emu/ent/entity"
)

// Entity is the model entity for the Entity schema.
type Entity struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DateCreated holds the value of the "dateCreated" field.
	DateCreated time.Time `json:"dateCreated,omitempty"`
	// Firstname holds the value of the "firstname" field.
	Firstname string `json:"firstname,omitempty"`
	// Lastname holds the value of the "lastname" field.
	Lastname string `json:"lastname,omitempty"`
	// Fullname holds the value of the "fullname" field.
	Fullname string `json:"fullname,omitempty"`
	// DateOfBirth holds the value of the "dateOfBirth" field.
	DateOfBirth time.Time `json:"dateOfBirth,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Type holds the value of the "type" field.
	Type entity.Type `json:"type,omitempty"`
	// LastLoginDate holds the value of the "lastLoginDate" field.
	LastLoginDate time.Time `json:"lastLoginDate,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntityQuery when eager-loading is set.
	Edges EntityEdges `json:"edges"`
}

// EntityEdges holds the relations/edges for other nodes in the graph.
type EntityEdges struct {
	// EntityTaxInformation holds the value of the entityTaxInformation edge.
	EntityTaxInformation []*EntityTaxInformation `json:"entityTaxInformation,omitempty"`
	// EntityAddresses holds the value of the entityAddresses edge.
	EntityAddresses []*EntityAddress `json:"entityAddresses,omitempty"`
	// EntityPreferences holds the value of the entityPreferences edge.
	EntityPreferences []*Preference `json:"entityPreferences,omitempty"`
	// EntityContactPoints holds the value of the entityContactPoints edge.
	EntityContactPoints []*EntityContactPoint `json:"entityContactPoints,omitempty"`
	// OwnsAccount holds the value of the owns_account edge.
	OwnsAccount []*Account `json:"owns_account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// EntityTaxInformationOrErr returns the EntityTaxInformation value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) EntityTaxInformationOrErr() ([]*EntityTaxInformation, error) {
	if e.loadedTypes[0] {
		return e.EntityTaxInformation, nil
	}
	return nil, &NotLoadedError{edge: "entityTaxInformation"}
}

// EntityAddressesOrErr returns the EntityAddresses value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) EntityAddressesOrErr() ([]*EntityAddress, error) {
	if e.loadedTypes[1] {
		return e.EntityAddresses, nil
	}
	return nil, &NotLoadedError{edge: "entityAddresses"}
}

// EntityPreferencesOrErr returns the EntityPreferences value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) EntityPreferencesOrErr() ([]*Preference, error) {
	if e.loadedTypes[2] {
		return e.EntityPreferences, nil
	}
	return nil, &NotLoadedError{edge: "entityPreferences"}
}

// EntityContactPointsOrErr returns the EntityContactPoints value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) EntityContactPointsOrErr() ([]*EntityContactPoint, error) {
	if e.loadedTypes[3] {
		return e.EntityContactPoints, nil
	}
	return nil, &NotLoadedError{edge: "entityContactPoints"}
}

// OwnsAccountOrErr returns the OwnsAccount value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) OwnsAccountOrErr() ([]*Account, error) {
	if e.loadedTypes[4] {
		return e.OwnsAccount, nil
	}
	return nil, &NotLoadedError{edge: "owns_account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Entity) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case entity.FieldActive:
			values[i] = &sql.NullBool{}
		case entity.FieldFirstname, entity.FieldLastname, entity.FieldFullname, entity.FieldType, entity.FieldUsername, entity.FieldToken, entity.FieldURL:
			values[i] = &sql.NullString{}
		case entity.FieldDateCreated, entity.FieldDateOfBirth, entity.FieldLastLoginDate:
			values[i] = &sql.NullTime{}
		case entity.FieldID:
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Entity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Entity fields.
func (e *Entity) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entity.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case entity.FieldDateCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateCreated", values[i])
			} else if value.Valid {
				e.DateCreated = value.Time
			}
		case entity.FieldFirstname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstname", values[i])
			} else if value.Valid {
				e.Firstname = value.String
			}
		case entity.FieldLastname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastname", values[i])
			} else if value.Valid {
				e.Lastname = value.String
			}
		case entity.FieldFullname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fullname", values[i])
			} else if value.Valid {
				e.Fullname = value.String
			}
		case entity.FieldDateOfBirth:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateOfBirth", values[i])
			} else if value.Valid {
				e.DateOfBirth = value.Time
			}
		case entity.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				e.Active = value.Bool
			}
		case entity.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				e.Type = entity.Type(value.String)
			}
		case entity.FieldLastLoginDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastLoginDate", values[i])
			} else if value.Valid {
				e.LastLoginDate = value.Time
			}
		case entity.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				e.Username = value.String
			}
		case entity.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				e.Token = value.String
			}
		case entity.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				e.URL = value.String
			}
		}
	}
	return nil
}

// QueryEntityTaxInformation queries the "entityTaxInformation" edge of the Entity entity.
func (e *Entity) QueryEntityTaxInformation() *EntityTaxInformationQuery {
	return (&EntityClient{config: e.config}).QueryEntityTaxInformation(e)
}

// QueryEntityAddresses queries the "entityAddresses" edge of the Entity entity.
func (e *Entity) QueryEntityAddresses() *EntityAddressQuery {
	return (&EntityClient{config: e.config}).QueryEntityAddresses(e)
}

// QueryEntityPreferences queries the "entityPreferences" edge of the Entity entity.
func (e *Entity) QueryEntityPreferences() *PreferenceQuery {
	return (&EntityClient{config: e.config}).QueryEntityPreferences(e)
}

// QueryEntityContactPoints queries the "entityContactPoints" edge of the Entity entity.
func (e *Entity) QueryEntityContactPoints() *EntityContactPointQuery {
	return (&EntityClient{config: e.config}).QueryEntityContactPoints(e)
}

// QueryOwnsAccount queries the "owns_account" edge of the Entity entity.
func (e *Entity) QueryOwnsAccount() *AccountQuery {
	return (&EntityClient{config: e.config}).QueryOwnsAccount(e)
}

// Update returns a builder for updating this Entity.
// Note that you need to call Entity.Unwrap() before calling this method if this Entity
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Entity) Update() *EntityUpdateOne {
	return (&EntityClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Entity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Entity) Unwrap() *Entity {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Entity is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Entity) String() string {
	var builder strings.Builder
	builder.WriteString("Entity(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", dateCreated=")
	builder.WriteString(e.DateCreated.Format(time.ANSIC))
	builder.WriteString(", firstname=")
	builder.WriteString(e.Firstname)
	builder.WriteString(", lastname=")
	builder.WriteString(e.Lastname)
	builder.WriteString(", fullname=")
	builder.WriteString(e.Fullname)
	builder.WriteString(", dateOfBirth=")
	builder.WriteString(e.DateOfBirth.Format(time.ANSIC))
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", e.Active))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", e.Type))
	builder.WriteString(", lastLoginDate=")
	builder.WriteString(e.LastLoginDate.Format(time.ANSIC))
	builder.WriteString(", username=")
	builder.WriteString(e.Username)
	builder.WriteString(", token=")
	builder.WriteString(e.Token)
	builder.WriteString(", url=")
	builder.WriteString(e.URL)
	builder.WriteByte(')')
	return builder.String()
}

// Entities is a parsable slice of Entity.
type Entities []*Entity

func (e Entities) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
