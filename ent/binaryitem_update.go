// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/robinhuiser/fca-emu/ent/binaryitem"
	"github.com/robinhuiser/fca-emu/ent/predicate"
	"github.com/robinhuiser/fca-emu/ent/transaction"
)

// BinaryItemUpdate is the builder for updating BinaryItem entities.
type BinaryItemUpdate struct {
	config
	hooks    []Hook
	mutation *BinaryItemMutation
}

// Where adds a new predicate for the BinaryItemUpdate builder.
func (biu *BinaryItemUpdate) Where(ps ...predicate.BinaryItem) *BinaryItemUpdate {
	biu.mutation.predicates = append(biu.mutation.predicates, ps...)
	return biu
}

// SetFormat sets the "format" field.
func (biu *BinaryItemUpdate) SetFormat(s string) *BinaryItemUpdate {
	biu.mutation.SetFormat(s)
	return biu
}

// SetLength sets the "length" field.
func (biu *BinaryItemUpdate) SetLength(i int) *BinaryItemUpdate {
	biu.mutation.ResetLength()
	biu.mutation.SetLength(i)
	return biu
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (biu *BinaryItemUpdate) SetNillableLength(i *int) *BinaryItemUpdate {
	if i != nil {
		biu.SetLength(*i)
	}
	return biu
}

// AddLength adds i to the "length" field.
func (biu *BinaryItemUpdate) AddLength(i int) *BinaryItemUpdate {
	biu.mutation.AddLength(i)
	return biu
}

// ClearLength clears the value of the "length" field.
func (biu *BinaryItemUpdate) ClearLength() *BinaryItemUpdate {
	biu.mutation.ClearLength()
	return biu
}

// SetContent sets the "content" field.
func (biu *BinaryItemUpdate) SetContent(b []byte) *BinaryItemUpdate {
	biu.mutation.SetContent(b)
	return biu
}

// SetURL sets the "url" field.
func (biu *BinaryItemUpdate) SetURL(s string) *BinaryItemUpdate {
	biu.mutation.SetURL(s)
	return biu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (biu *BinaryItemUpdate) SetNillableURL(s *string) *BinaryItemUpdate {
	if s != nil {
		biu.SetURL(*s)
	}
	return biu
}

// ClearURL clears the value of the "url" field.
func (biu *BinaryItemUpdate) ClearURL() *BinaryItemUpdate {
	biu.mutation.ClearURL()
	return biu
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (biu *BinaryItemUpdate) SetTransactionID(id uuid.UUID) *BinaryItemUpdate {
	biu.mutation.SetTransactionID(id)
	return biu
}

// SetNillableTransactionID sets the "transaction" edge to the Transaction entity by ID if the given value is not nil.
func (biu *BinaryItemUpdate) SetNillableTransactionID(id *uuid.UUID) *BinaryItemUpdate {
	if id != nil {
		biu = biu.SetTransactionID(*id)
	}
	return biu
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (biu *BinaryItemUpdate) SetTransaction(t *Transaction) *BinaryItemUpdate {
	return biu.SetTransactionID(t.ID)
}

// Mutation returns the BinaryItemMutation object of the builder.
func (biu *BinaryItemUpdate) Mutation() *BinaryItemMutation {
	return biu.mutation
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (biu *BinaryItemUpdate) ClearTransaction() *BinaryItemUpdate {
	biu.mutation.ClearTransaction()
	return biu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BinaryItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(biu.hooks) == 0 {
		if err = biu.check(); err != nil {
			return 0, err
		}
		affected, err = biu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BinaryItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = biu.check(); err != nil {
				return 0, err
			}
			biu.mutation = mutation
			affected, err = biu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(biu.hooks) - 1; i >= 0; i-- {
			mut = biu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, biu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BinaryItemUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BinaryItemUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BinaryItemUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biu *BinaryItemUpdate) check() error {
	if v, ok := biu.mutation.Format(); ok {
		if err := binaryitem.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf("ent: validator failed for field \"format\": %w", err)}
		}
	}
	return nil
}

func (biu *BinaryItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   binaryitem.Table,
			Columns: binaryitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: binaryitem.FieldID,
			},
		},
	}
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.Format(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binaryitem.FieldFormat,
		})
	}
	if value, ok := biu.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: binaryitem.FieldLength,
		})
	}
	if value, ok := biu.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: binaryitem.FieldLength,
		})
	}
	if biu.mutation.LengthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: binaryitem.FieldLength,
		})
	}
	if value, ok := biu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: binaryitem.FieldContent,
		})
	}
	if value, ok := biu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binaryitem.FieldURL,
		})
	}
	if biu.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: binaryitem.FieldURL,
		})
	}
	if biu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binaryitem.TransactionTable,
			Columns: []string{binaryitem.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binaryitem.TransactionTable,
			Columns: []string{binaryitem.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{binaryitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BinaryItemUpdateOne is the builder for updating a single BinaryItem entity.
type BinaryItemUpdateOne struct {
	config
	hooks    []Hook
	mutation *BinaryItemMutation
}

// SetFormat sets the "format" field.
func (biuo *BinaryItemUpdateOne) SetFormat(s string) *BinaryItemUpdateOne {
	biuo.mutation.SetFormat(s)
	return biuo
}

// SetLength sets the "length" field.
func (biuo *BinaryItemUpdateOne) SetLength(i int) *BinaryItemUpdateOne {
	biuo.mutation.ResetLength()
	biuo.mutation.SetLength(i)
	return biuo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (biuo *BinaryItemUpdateOne) SetNillableLength(i *int) *BinaryItemUpdateOne {
	if i != nil {
		biuo.SetLength(*i)
	}
	return biuo
}

// AddLength adds i to the "length" field.
func (biuo *BinaryItemUpdateOne) AddLength(i int) *BinaryItemUpdateOne {
	biuo.mutation.AddLength(i)
	return biuo
}

// ClearLength clears the value of the "length" field.
func (biuo *BinaryItemUpdateOne) ClearLength() *BinaryItemUpdateOne {
	biuo.mutation.ClearLength()
	return biuo
}

// SetContent sets the "content" field.
func (biuo *BinaryItemUpdateOne) SetContent(b []byte) *BinaryItemUpdateOne {
	biuo.mutation.SetContent(b)
	return biuo
}

// SetURL sets the "url" field.
func (biuo *BinaryItemUpdateOne) SetURL(s string) *BinaryItemUpdateOne {
	biuo.mutation.SetURL(s)
	return biuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (biuo *BinaryItemUpdateOne) SetNillableURL(s *string) *BinaryItemUpdateOne {
	if s != nil {
		biuo.SetURL(*s)
	}
	return biuo
}

// ClearURL clears the value of the "url" field.
func (biuo *BinaryItemUpdateOne) ClearURL() *BinaryItemUpdateOne {
	biuo.mutation.ClearURL()
	return biuo
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (biuo *BinaryItemUpdateOne) SetTransactionID(id uuid.UUID) *BinaryItemUpdateOne {
	biuo.mutation.SetTransactionID(id)
	return biuo
}

// SetNillableTransactionID sets the "transaction" edge to the Transaction entity by ID if the given value is not nil.
func (biuo *BinaryItemUpdateOne) SetNillableTransactionID(id *uuid.UUID) *BinaryItemUpdateOne {
	if id != nil {
		biuo = biuo.SetTransactionID(*id)
	}
	return biuo
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (biuo *BinaryItemUpdateOne) SetTransaction(t *Transaction) *BinaryItemUpdateOne {
	return biuo.SetTransactionID(t.ID)
}

// Mutation returns the BinaryItemMutation object of the builder.
func (biuo *BinaryItemUpdateOne) Mutation() *BinaryItemMutation {
	return biuo.mutation
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (biuo *BinaryItemUpdateOne) ClearTransaction() *BinaryItemUpdateOne {
	biuo.mutation.ClearTransaction()
	return biuo
}

// Save executes the query and returns the updated BinaryItem entity.
func (biuo *BinaryItemUpdateOne) Save(ctx context.Context) (*BinaryItem, error) {
	var (
		err  error
		node *BinaryItem
	)
	if len(biuo.hooks) == 0 {
		if err = biuo.check(); err != nil {
			return nil, err
		}
		node, err = biuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BinaryItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = biuo.check(); err != nil {
				return nil, err
			}
			biuo.mutation = mutation
			node, err = biuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(biuo.hooks) - 1; i >= 0; i-- {
			mut = biuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, biuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BinaryItemUpdateOne) SaveX(ctx context.Context) *BinaryItem {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BinaryItemUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BinaryItemUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biuo *BinaryItemUpdateOne) check() error {
	if v, ok := biuo.mutation.Format(); ok {
		if err := binaryitem.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf("ent: validator failed for field \"format\": %w", err)}
		}
	}
	return nil
}

func (biuo *BinaryItemUpdateOne) sqlSave(ctx context.Context) (_node *BinaryItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   binaryitem.Table,
			Columns: binaryitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: binaryitem.FieldID,
			},
		},
	}
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BinaryItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.Format(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binaryitem.FieldFormat,
		})
	}
	if value, ok := biuo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: binaryitem.FieldLength,
		})
	}
	if value, ok := biuo.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: binaryitem.FieldLength,
		})
	}
	if biuo.mutation.LengthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: binaryitem.FieldLength,
		})
	}
	if value, ok := biuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: binaryitem.FieldContent,
		})
	}
	if value, ok := biuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binaryitem.FieldURL,
		})
	}
	if biuo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: binaryitem.FieldURL,
		})
	}
	if biuo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binaryitem.TransactionTable,
			Columns: []string{binaryitem.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binaryitem.TransactionTable,
			Columns: []string{binaryitem.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BinaryItem{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{binaryitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
