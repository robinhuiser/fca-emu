// Code generated by entc, DO NOT EDIT.

package branch

const (
	// Label holds the string label denoting the branch type in the database.
	Label = "branch"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBranchCode holds the string denoting the branchcode field in the database.
	FieldBranchCode = "branch_code"
	// FieldStreetNumber holds the string denoting the streetnumber field in the database.
	FieldStreetNumber = "street_number"
	// FieldStreetName holds the string denoting the streetname field in the database.
	FieldStreetName = "street_name"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldZip holds the string denoting the zip field in the database.
	FieldZip = "zip"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the branch in the database.
	Table = "branches"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "branches"
	// OwnerInverseTable is the table name for the Bank entity.
	// It exists in this package in order to avoid circular dependency with the "bank" package.
	OwnerInverseTable = "banks"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "bank_branches"
)

// Columns holds all SQL columns for branch fields.
var Columns = []string{
	FieldID,
	FieldBranchCode,
	FieldStreetNumber,
	FieldStreetName,
	FieldCity,
	FieldState,
	FieldZip,
	FieldLatitude,
	FieldLongitude,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "branches"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bank_branches",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(string) error
)
