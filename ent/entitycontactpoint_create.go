// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/robinhuiser/finite-mock-server/ent/entitycontactpoint"
)

// EntityContactPointCreate is the builder for creating a EntityContactPoint entity.
type EntityContactPointCreate struct {
	config
	mutation *EntityContactPointMutation
	hooks    []Hook
}

// SetPrefix sets the "prefix" field.
func (ecpc *EntityContactPointCreate) SetPrefix(i int) *EntityContactPointCreate {
	ecpc.mutation.SetPrefix(i)
	return ecpc
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (ecpc *EntityContactPointCreate) SetNillablePrefix(i *int) *EntityContactPointCreate {
	if i != nil {
		ecpc.SetPrefix(*i)
	}
	return ecpc
}

// SetName sets the "name" field.
func (ecpc *EntityContactPointCreate) SetName(s string) *EntityContactPointCreate {
	ecpc.mutation.SetName(s)
	return ecpc
}

// SetType sets the "type" field.
func (ecpc *EntityContactPointCreate) SetType(e entitycontactpoint.Type) *EntityContactPointCreate {
	ecpc.mutation.SetType(e)
	return ecpc
}

// SetSuffix sets the "suffix" field.
func (ecpc *EntityContactPointCreate) SetSuffix(i int) *EntityContactPointCreate {
	ecpc.mutation.SetSuffix(i)
	return ecpc
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (ecpc *EntityContactPointCreate) SetNillableSuffix(i *int) *EntityContactPointCreate {
	if i != nil {
		ecpc.SetSuffix(*i)
	}
	return ecpc
}

// SetValue sets the "value" field.
func (ecpc *EntityContactPointCreate) SetValue(s string) *EntityContactPointCreate {
	ecpc.mutation.SetValue(s)
	return ecpc
}

// Mutation returns the EntityContactPointMutation object of the builder.
func (ecpc *EntityContactPointCreate) Mutation() *EntityContactPointMutation {
	return ecpc.mutation
}

// Save creates the EntityContactPoint in the database.
func (ecpc *EntityContactPointCreate) Save(ctx context.Context) (*EntityContactPoint, error) {
	var (
		err  error
		node *EntityContactPoint
	)
	if len(ecpc.hooks) == 0 {
		if err = ecpc.check(); err != nil {
			return nil, err
		}
		node, err = ecpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityContactPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ecpc.check(); err != nil {
				return nil, err
			}
			ecpc.mutation = mutation
			node, err = ecpc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ecpc.hooks) - 1; i >= 0; i-- {
			mut = ecpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ecpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ecpc *EntityContactPointCreate) SaveX(ctx context.Context) *EntityContactPoint {
	v, err := ecpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ecpc *EntityContactPointCreate) check() error {
	if _, ok := ecpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := ecpc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := ecpc.mutation.GetType(); ok {
		if err := entitycontactpoint.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := ecpc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New("ent: missing required field \"value\"")}
	}
	return nil
}

func (ecpc *EntityContactPointCreate) sqlSave(ctx context.Context) (*EntityContactPoint, error) {
	_node, _spec := ecpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecpc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ecpc *EntityContactPointCreate) createSpec() (*EntityContactPoint, *sqlgraph.CreateSpec) {
	var (
		_node = &EntityContactPoint{config: ecpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entitycontactpoint.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entitycontactpoint.FieldID,
			},
		}
	)
	if value, ok := ecpc.mutation.Prefix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: entitycontactpoint.FieldPrefix,
		})
		_node.Prefix = value
	}
	if value, ok := ecpc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entitycontactpoint.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ecpc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entitycontactpoint.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ecpc.mutation.Suffix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: entitycontactpoint.FieldSuffix,
		})
		_node.Suffix = value
	}
	if value, ok := ecpc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entitycontactpoint.FieldValue,
		})
		_node.Value = value
	}
	return _node, _spec
}

// EntityContactPointCreateBulk is the builder for creating many EntityContactPoint entities in bulk.
type EntityContactPointCreateBulk struct {
	config
	builders []*EntityContactPointCreate
}

// Save creates the EntityContactPoint entities in the database.
func (ecpcb *EntityContactPointCreateBulk) Save(ctx context.Context) ([]*EntityContactPoint, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecpcb.builders))
	nodes := make([]*EntityContactPoint, len(ecpcb.builders))
	mutators := make([]Mutator, len(ecpcb.builders))
	for i := range ecpcb.builders {
		func(i int, root context.Context) {
			builder := ecpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityContactPointMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecpcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecpcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecpcb *EntityContactPointCreateBulk) SaveX(ctx context.Context) []*EntityContactPoint {
	v, err := ecpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
