// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/robinhuiser/fca-emu/ent/account"
	"github.com/robinhuiser/fca-emu/ent/entity"
	"github.com/robinhuiser/fca-emu/ent/entityaddress"
	"github.com/robinhuiser/fca-emu/ent/entitycontactpoint"
	"github.com/robinhuiser/fca-emu/ent/entitytaxinformation"
	"github.com/robinhuiser/fca-emu/ent/predicate"
	"github.com/robinhuiser/fca-emu/ent/preference"
)

// EntityUpdate is the builder for updating Entity entities.
type EntityUpdate struct {
	config
	hooks    []Hook
	mutation *EntityMutation
}

// Where adds a new predicate for the EntityUpdate builder.
func (eu *EntityUpdate) Where(ps ...predicate.Entity) *EntityUpdate {
	eu.mutation.predicates = append(eu.mutation.predicates, ps...)
	return eu
}

// SetDateCreated sets the "dateCreated" field.
func (eu *EntityUpdate) SetDateCreated(t time.Time) *EntityUpdate {
	eu.mutation.SetDateCreated(t)
	return eu
}

// SetFirstname sets the "firstname" field.
func (eu *EntityUpdate) SetFirstname(s string) *EntityUpdate {
	eu.mutation.SetFirstname(s)
	return eu
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableFirstname(s *string) *EntityUpdate {
	if s != nil {
		eu.SetFirstname(*s)
	}
	return eu
}

// ClearFirstname clears the value of the "firstname" field.
func (eu *EntityUpdate) ClearFirstname() *EntityUpdate {
	eu.mutation.ClearFirstname()
	return eu
}

// SetLastname sets the "lastname" field.
func (eu *EntityUpdate) SetLastname(s string) *EntityUpdate {
	eu.mutation.SetLastname(s)
	return eu
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableLastname(s *string) *EntityUpdate {
	if s != nil {
		eu.SetLastname(*s)
	}
	return eu
}

// ClearLastname clears the value of the "lastname" field.
func (eu *EntityUpdate) ClearLastname() *EntityUpdate {
	eu.mutation.ClearLastname()
	return eu
}

// SetFullname sets the "fullname" field.
func (eu *EntityUpdate) SetFullname(s string) *EntityUpdate {
	eu.mutation.SetFullname(s)
	return eu
}

// SetNillableFullname sets the "fullname" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableFullname(s *string) *EntityUpdate {
	if s != nil {
		eu.SetFullname(*s)
	}
	return eu
}

// ClearFullname clears the value of the "fullname" field.
func (eu *EntityUpdate) ClearFullname() *EntityUpdate {
	eu.mutation.ClearFullname()
	return eu
}

// SetDateOfBirth sets the "dateOfBirth" field.
func (eu *EntityUpdate) SetDateOfBirth(t time.Time) *EntityUpdate {
	eu.mutation.SetDateOfBirth(t)
	return eu
}

// SetActive sets the "active" field.
func (eu *EntityUpdate) SetActive(b bool) *EntityUpdate {
	eu.mutation.SetActive(b)
	return eu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableActive(b *bool) *EntityUpdate {
	if b != nil {
		eu.SetActive(*b)
	}
	return eu
}

// SetType sets the "type" field.
func (eu *EntityUpdate) SetType(e entity.Type) *EntityUpdate {
	eu.mutation.SetType(e)
	return eu
}

// SetLastLoginDate sets the "lastLoginDate" field.
func (eu *EntityUpdate) SetLastLoginDate(t time.Time) *EntityUpdate {
	eu.mutation.SetLastLoginDate(t)
	return eu
}

// SetUsername sets the "username" field.
func (eu *EntityUpdate) SetUsername(s string) *EntityUpdate {
	eu.mutation.SetUsername(s)
	return eu
}

// SetToken sets the "token" field.
func (eu *EntityUpdate) SetToken(s string) *EntityUpdate {
	eu.mutation.SetToken(s)
	return eu
}

// SetURL sets the "url" field.
func (eu *EntityUpdate) SetURL(s string) *EntityUpdate {
	eu.mutation.SetURL(s)
	return eu
}

// AddEntityTaxInformationIDs adds the "entityTaxInformation" edge to the EntityTaxInformation entity by IDs.
func (eu *EntityUpdate) AddEntityTaxInformationIDs(ids ...int) *EntityUpdate {
	eu.mutation.AddEntityTaxInformationIDs(ids...)
	return eu
}

// AddEntityTaxInformation adds the "entityTaxInformation" edges to the EntityTaxInformation entity.
func (eu *EntityUpdate) AddEntityTaxInformation(e ...*EntityTaxInformation) *EntityUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEntityTaxInformationIDs(ids...)
}

// AddEntityAddressIDs adds the "entityAddresses" edge to the EntityAddress entity by IDs.
func (eu *EntityUpdate) AddEntityAddressIDs(ids ...int) *EntityUpdate {
	eu.mutation.AddEntityAddressIDs(ids...)
	return eu
}

// AddEntityAddresses adds the "entityAddresses" edges to the EntityAddress entity.
func (eu *EntityUpdate) AddEntityAddresses(e ...*EntityAddress) *EntityUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEntityAddressIDs(ids...)
}

// AddEntityPreferenceIDs adds the "entityPreferences" edge to the Preference entity by IDs.
func (eu *EntityUpdate) AddEntityPreferenceIDs(ids ...int) *EntityUpdate {
	eu.mutation.AddEntityPreferenceIDs(ids...)
	return eu
}

// AddEntityPreferences adds the "entityPreferences" edges to the Preference entity.
func (eu *EntityUpdate) AddEntityPreferences(p ...*Preference) *EntityUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddEntityPreferenceIDs(ids...)
}

// AddEntityContactPointIDs adds the "entityContactPoints" edge to the EntityContactPoint entity by IDs.
func (eu *EntityUpdate) AddEntityContactPointIDs(ids ...int) *EntityUpdate {
	eu.mutation.AddEntityContactPointIDs(ids...)
	return eu
}

// AddEntityContactPoints adds the "entityContactPoints" edges to the EntityContactPoint entity.
func (eu *EntityUpdate) AddEntityContactPoints(e ...*EntityContactPoint) *EntityUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEntityContactPointIDs(ids...)
}

// AddOwnsAccountIDs adds the "owns_account" edge to the Account entity by IDs.
func (eu *EntityUpdate) AddOwnsAccountIDs(ids ...uuid.UUID) *EntityUpdate {
	eu.mutation.AddOwnsAccountIDs(ids...)
	return eu
}

// AddOwnsAccount adds the "owns_account" edges to the Account entity.
func (eu *EntityUpdate) AddOwnsAccount(a ...*Account) *EntityUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddOwnsAccountIDs(ids...)
}

// Mutation returns the EntityMutation object of the builder.
func (eu *EntityUpdate) Mutation() *EntityMutation {
	return eu.mutation
}

// ClearEntityTaxInformation clears all "entityTaxInformation" edges to the EntityTaxInformation entity.
func (eu *EntityUpdate) ClearEntityTaxInformation() *EntityUpdate {
	eu.mutation.ClearEntityTaxInformation()
	return eu
}

// RemoveEntityTaxInformationIDs removes the "entityTaxInformation" edge to EntityTaxInformation entities by IDs.
func (eu *EntityUpdate) RemoveEntityTaxInformationIDs(ids ...int) *EntityUpdate {
	eu.mutation.RemoveEntityTaxInformationIDs(ids...)
	return eu
}

// RemoveEntityTaxInformation removes "entityTaxInformation" edges to EntityTaxInformation entities.
func (eu *EntityUpdate) RemoveEntityTaxInformation(e ...*EntityTaxInformation) *EntityUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEntityTaxInformationIDs(ids...)
}

// ClearEntityAddresses clears all "entityAddresses" edges to the EntityAddress entity.
func (eu *EntityUpdate) ClearEntityAddresses() *EntityUpdate {
	eu.mutation.ClearEntityAddresses()
	return eu
}

// RemoveEntityAddressIDs removes the "entityAddresses" edge to EntityAddress entities by IDs.
func (eu *EntityUpdate) RemoveEntityAddressIDs(ids ...int) *EntityUpdate {
	eu.mutation.RemoveEntityAddressIDs(ids...)
	return eu
}

// RemoveEntityAddresses removes "entityAddresses" edges to EntityAddress entities.
func (eu *EntityUpdate) RemoveEntityAddresses(e ...*EntityAddress) *EntityUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEntityAddressIDs(ids...)
}

// ClearEntityPreferences clears all "entityPreferences" edges to the Preference entity.
func (eu *EntityUpdate) ClearEntityPreferences() *EntityUpdate {
	eu.mutation.ClearEntityPreferences()
	return eu
}

// RemoveEntityPreferenceIDs removes the "entityPreferences" edge to Preference entities by IDs.
func (eu *EntityUpdate) RemoveEntityPreferenceIDs(ids ...int) *EntityUpdate {
	eu.mutation.RemoveEntityPreferenceIDs(ids...)
	return eu
}

// RemoveEntityPreferences removes "entityPreferences" edges to Preference entities.
func (eu *EntityUpdate) RemoveEntityPreferences(p ...*Preference) *EntityUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveEntityPreferenceIDs(ids...)
}

// ClearEntityContactPoints clears all "entityContactPoints" edges to the EntityContactPoint entity.
func (eu *EntityUpdate) ClearEntityContactPoints() *EntityUpdate {
	eu.mutation.ClearEntityContactPoints()
	return eu
}

// RemoveEntityContactPointIDs removes the "entityContactPoints" edge to EntityContactPoint entities by IDs.
func (eu *EntityUpdate) RemoveEntityContactPointIDs(ids ...int) *EntityUpdate {
	eu.mutation.RemoveEntityContactPointIDs(ids...)
	return eu
}

// RemoveEntityContactPoints removes "entityContactPoints" edges to EntityContactPoint entities.
func (eu *EntityUpdate) RemoveEntityContactPoints(e ...*EntityContactPoint) *EntityUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEntityContactPointIDs(ids...)
}

// ClearOwnsAccount clears all "owns_account" edges to the Account entity.
func (eu *EntityUpdate) ClearOwnsAccount() *EntityUpdate {
	eu.mutation.ClearOwnsAccount()
	return eu
}

// RemoveOwnsAccountIDs removes the "owns_account" edge to Account entities by IDs.
func (eu *EntityUpdate) RemoveOwnsAccountIDs(ids ...uuid.UUID) *EntityUpdate {
	eu.mutation.RemoveOwnsAccountIDs(ids...)
	return eu
}

// RemoveOwnsAccount removes "owns_account" edges to Account entities.
func (eu *EntityUpdate) RemoveOwnsAccount(a ...*Account) *EntityUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveOwnsAccountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntityUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntityUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntityUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EntityUpdate) check() error {
	if v, ok := eu.mutation.GetType(); ok {
		if err := entity.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (eu *EntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entity.Table,
			Columns: entity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entity.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.DateCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateCreated,
		})
	}
	if value, ok := eu.mutation.Firstname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldFirstname,
		})
	}
	if eu.mutation.FirstnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entity.FieldFirstname,
		})
	}
	if value, ok := eu.mutation.Lastname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldLastname,
		})
	}
	if eu.mutation.LastnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entity.FieldLastname,
		})
	}
	if value, ok := eu.mutation.Fullname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldFullname,
		})
	}
	if eu.mutation.FullnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entity.FieldFullname,
		})
	}
	if value, ok := eu.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateOfBirth,
		})
	}
	if value, ok := eu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entity.FieldActive,
		})
	}
	if value, ok := eu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entity.FieldType,
		})
	}
	if value, ok := eu.mutation.LastLoginDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldLastLoginDate,
		})
	}
	if value, ok := eu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldUsername,
		})
	}
	if value, ok := eu.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldToken,
		})
	}
	if value, ok := eu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldURL,
		})
	}
	if eu.mutation.EntityTaxInformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityTaxInformationTable,
			Columns: []string{entity.EntityTaxInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitytaxinformation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEntityTaxInformationIDs(); len(nodes) > 0 && !eu.mutation.EntityTaxInformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityTaxInformationTable,
			Columns: []string{entity.EntityTaxInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitytaxinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EntityTaxInformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityTaxInformationTable,
			Columns: []string{entity.EntityTaxInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitytaxinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EntityAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityAddressesTable,
			Columns: []string{entity.EntityAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entityaddress.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEntityAddressesIDs(); len(nodes) > 0 && !eu.mutation.EntityAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityAddressesTable,
			Columns: []string{entity.EntityAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entityaddress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EntityAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityAddressesTable,
			Columns: []string{entity.EntityAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entityaddress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EntityPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityPreferencesTable,
			Columns: []string{entity.EntityPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEntityPreferencesIDs(); len(nodes) > 0 && !eu.mutation.EntityPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityPreferencesTable,
			Columns: []string{entity.EntityPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EntityPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityPreferencesTable,
			Columns: []string{entity.EntityPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EntityContactPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityContactPointsTable,
			Columns: []string{entity.EntityContactPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitycontactpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEntityContactPointsIDs(); len(nodes) > 0 && !eu.mutation.EntityContactPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityContactPointsTable,
			Columns: []string{entity.EntityContactPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitycontactpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EntityContactPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityContactPointsTable,
			Columns: []string{entity.EntityContactPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitycontactpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OwnsAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entity.OwnsAccountTable,
			Columns: entity.OwnsAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedOwnsAccountIDs(); len(nodes) > 0 && !eu.mutation.OwnsAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entity.OwnsAccountTable,
			Columns: entity.OwnsAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OwnsAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entity.OwnsAccountTable,
			Columns: entity.OwnsAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EntityUpdateOne is the builder for updating a single Entity entity.
type EntityUpdateOne struct {
	config
	hooks    []Hook
	mutation *EntityMutation
}

// SetDateCreated sets the "dateCreated" field.
func (euo *EntityUpdateOne) SetDateCreated(t time.Time) *EntityUpdateOne {
	euo.mutation.SetDateCreated(t)
	return euo
}

// SetFirstname sets the "firstname" field.
func (euo *EntityUpdateOne) SetFirstname(s string) *EntityUpdateOne {
	euo.mutation.SetFirstname(s)
	return euo
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableFirstname(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetFirstname(*s)
	}
	return euo
}

// ClearFirstname clears the value of the "firstname" field.
func (euo *EntityUpdateOne) ClearFirstname() *EntityUpdateOne {
	euo.mutation.ClearFirstname()
	return euo
}

// SetLastname sets the "lastname" field.
func (euo *EntityUpdateOne) SetLastname(s string) *EntityUpdateOne {
	euo.mutation.SetLastname(s)
	return euo
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableLastname(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetLastname(*s)
	}
	return euo
}

// ClearLastname clears the value of the "lastname" field.
func (euo *EntityUpdateOne) ClearLastname() *EntityUpdateOne {
	euo.mutation.ClearLastname()
	return euo
}

// SetFullname sets the "fullname" field.
func (euo *EntityUpdateOne) SetFullname(s string) *EntityUpdateOne {
	euo.mutation.SetFullname(s)
	return euo
}

// SetNillableFullname sets the "fullname" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableFullname(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetFullname(*s)
	}
	return euo
}

// ClearFullname clears the value of the "fullname" field.
func (euo *EntityUpdateOne) ClearFullname() *EntityUpdateOne {
	euo.mutation.ClearFullname()
	return euo
}

// SetDateOfBirth sets the "dateOfBirth" field.
func (euo *EntityUpdateOne) SetDateOfBirth(t time.Time) *EntityUpdateOne {
	euo.mutation.SetDateOfBirth(t)
	return euo
}

// SetActive sets the "active" field.
func (euo *EntityUpdateOne) SetActive(b bool) *EntityUpdateOne {
	euo.mutation.SetActive(b)
	return euo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableActive(b *bool) *EntityUpdateOne {
	if b != nil {
		euo.SetActive(*b)
	}
	return euo
}

// SetType sets the "type" field.
func (euo *EntityUpdateOne) SetType(e entity.Type) *EntityUpdateOne {
	euo.mutation.SetType(e)
	return euo
}

// SetLastLoginDate sets the "lastLoginDate" field.
func (euo *EntityUpdateOne) SetLastLoginDate(t time.Time) *EntityUpdateOne {
	euo.mutation.SetLastLoginDate(t)
	return euo
}

// SetUsername sets the "username" field.
func (euo *EntityUpdateOne) SetUsername(s string) *EntityUpdateOne {
	euo.mutation.SetUsername(s)
	return euo
}

// SetToken sets the "token" field.
func (euo *EntityUpdateOne) SetToken(s string) *EntityUpdateOne {
	euo.mutation.SetToken(s)
	return euo
}

// SetURL sets the "url" field.
func (euo *EntityUpdateOne) SetURL(s string) *EntityUpdateOne {
	euo.mutation.SetURL(s)
	return euo
}

// AddEntityTaxInformationIDs adds the "entityTaxInformation" edge to the EntityTaxInformation entity by IDs.
func (euo *EntityUpdateOne) AddEntityTaxInformationIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.AddEntityTaxInformationIDs(ids...)
	return euo
}

// AddEntityTaxInformation adds the "entityTaxInformation" edges to the EntityTaxInformation entity.
func (euo *EntityUpdateOne) AddEntityTaxInformation(e ...*EntityTaxInformation) *EntityUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEntityTaxInformationIDs(ids...)
}

// AddEntityAddressIDs adds the "entityAddresses" edge to the EntityAddress entity by IDs.
func (euo *EntityUpdateOne) AddEntityAddressIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.AddEntityAddressIDs(ids...)
	return euo
}

// AddEntityAddresses adds the "entityAddresses" edges to the EntityAddress entity.
func (euo *EntityUpdateOne) AddEntityAddresses(e ...*EntityAddress) *EntityUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEntityAddressIDs(ids...)
}

// AddEntityPreferenceIDs adds the "entityPreferences" edge to the Preference entity by IDs.
func (euo *EntityUpdateOne) AddEntityPreferenceIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.AddEntityPreferenceIDs(ids...)
	return euo
}

// AddEntityPreferences adds the "entityPreferences" edges to the Preference entity.
func (euo *EntityUpdateOne) AddEntityPreferences(p ...*Preference) *EntityUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddEntityPreferenceIDs(ids...)
}

// AddEntityContactPointIDs adds the "entityContactPoints" edge to the EntityContactPoint entity by IDs.
func (euo *EntityUpdateOne) AddEntityContactPointIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.AddEntityContactPointIDs(ids...)
	return euo
}

// AddEntityContactPoints adds the "entityContactPoints" edges to the EntityContactPoint entity.
func (euo *EntityUpdateOne) AddEntityContactPoints(e ...*EntityContactPoint) *EntityUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEntityContactPointIDs(ids...)
}

// AddOwnsAccountIDs adds the "owns_account" edge to the Account entity by IDs.
func (euo *EntityUpdateOne) AddOwnsAccountIDs(ids ...uuid.UUID) *EntityUpdateOne {
	euo.mutation.AddOwnsAccountIDs(ids...)
	return euo
}

// AddOwnsAccount adds the "owns_account" edges to the Account entity.
func (euo *EntityUpdateOne) AddOwnsAccount(a ...*Account) *EntityUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddOwnsAccountIDs(ids...)
}

// Mutation returns the EntityMutation object of the builder.
func (euo *EntityUpdateOne) Mutation() *EntityMutation {
	return euo.mutation
}

// ClearEntityTaxInformation clears all "entityTaxInformation" edges to the EntityTaxInformation entity.
func (euo *EntityUpdateOne) ClearEntityTaxInformation() *EntityUpdateOne {
	euo.mutation.ClearEntityTaxInformation()
	return euo
}

// RemoveEntityTaxInformationIDs removes the "entityTaxInformation" edge to EntityTaxInformation entities by IDs.
func (euo *EntityUpdateOne) RemoveEntityTaxInformationIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.RemoveEntityTaxInformationIDs(ids...)
	return euo
}

// RemoveEntityTaxInformation removes "entityTaxInformation" edges to EntityTaxInformation entities.
func (euo *EntityUpdateOne) RemoveEntityTaxInformation(e ...*EntityTaxInformation) *EntityUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEntityTaxInformationIDs(ids...)
}

// ClearEntityAddresses clears all "entityAddresses" edges to the EntityAddress entity.
func (euo *EntityUpdateOne) ClearEntityAddresses() *EntityUpdateOne {
	euo.mutation.ClearEntityAddresses()
	return euo
}

// RemoveEntityAddressIDs removes the "entityAddresses" edge to EntityAddress entities by IDs.
func (euo *EntityUpdateOne) RemoveEntityAddressIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.RemoveEntityAddressIDs(ids...)
	return euo
}

// RemoveEntityAddresses removes "entityAddresses" edges to EntityAddress entities.
func (euo *EntityUpdateOne) RemoveEntityAddresses(e ...*EntityAddress) *EntityUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEntityAddressIDs(ids...)
}

// ClearEntityPreferences clears all "entityPreferences" edges to the Preference entity.
func (euo *EntityUpdateOne) ClearEntityPreferences() *EntityUpdateOne {
	euo.mutation.ClearEntityPreferences()
	return euo
}

// RemoveEntityPreferenceIDs removes the "entityPreferences" edge to Preference entities by IDs.
func (euo *EntityUpdateOne) RemoveEntityPreferenceIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.RemoveEntityPreferenceIDs(ids...)
	return euo
}

// RemoveEntityPreferences removes "entityPreferences" edges to Preference entities.
func (euo *EntityUpdateOne) RemoveEntityPreferences(p ...*Preference) *EntityUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveEntityPreferenceIDs(ids...)
}

// ClearEntityContactPoints clears all "entityContactPoints" edges to the EntityContactPoint entity.
func (euo *EntityUpdateOne) ClearEntityContactPoints() *EntityUpdateOne {
	euo.mutation.ClearEntityContactPoints()
	return euo
}

// RemoveEntityContactPointIDs removes the "entityContactPoints" edge to EntityContactPoint entities by IDs.
func (euo *EntityUpdateOne) RemoveEntityContactPointIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.RemoveEntityContactPointIDs(ids...)
	return euo
}

// RemoveEntityContactPoints removes "entityContactPoints" edges to EntityContactPoint entities.
func (euo *EntityUpdateOne) RemoveEntityContactPoints(e ...*EntityContactPoint) *EntityUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEntityContactPointIDs(ids...)
}

// ClearOwnsAccount clears all "owns_account" edges to the Account entity.
func (euo *EntityUpdateOne) ClearOwnsAccount() *EntityUpdateOne {
	euo.mutation.ClearOwnsAccount()
	return euo
}

// RemoveOwnsAccountIDs removes the "owns_account" edge to Account entities by IDs.
func (euo *EntityUpdateOne) RemoveOwnsAccountIDs(ids ...uuid.UUID) *EntityUpdateOne {
	euo.mutation.RemoveOwnsAccountIDs(ids...)
	return euo
}

// RemoveOwnsAccount removes "owns_account" edges to Account entities.
func (euo *EntityUpdateOne) RemoveOwnsAccount(a ...*Account) *EntityUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveOwnsAccountIDs(ids...)
}

// Save executes the query and returns the updated Entity entity.
func (euo *EntityUpdateOne) Save(ctx context.Context) (*Entity, error) {
	var (
		err  error
		node *Entity
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntityUpdateOne) SaveX(ctx context.Context) *Entity {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntityUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntityUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EntityUpdateOne) check() error {
	if v, ok := euo.mutation.GetType(); ok {
		if err := entity.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (euo *EntityUpdateOne) sqlSave(ctx context.Context) (_node *Entity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entity.Table,
			Columns: entity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entity.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Entity.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.DateCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateCreated,
		})
	}
	if value, ok := euo.mutation.Firstname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldFirstname,
		})
	}
	if euo.mutation.FirstnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entity.FieldFirstname,
		})
	}
	if value, ok := euo.mutation.Lastname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldLastname,
		})
	}
	if euo.mutation.LastnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entity.FieldLastname,
		})
	}
	if value, ok := euo.mutation.Fullname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldFullname,
		})
	}
	if euo.mutation.FullnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entity.FieldFullname,
		})
	}
	if value, ok := euo.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateOfBirth,
		})
	}
	if value, ok := euo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entity.FieldActive,
		})
	}
	if value, ok := euo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entity.FieldType,
		})
	}
	if value, ok := euo.mutation.LastLoginDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldLastLoginDate,
		})
	}
	if value, ok := euo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldUsername,
		})
	}
	if value, ok := euo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldToken,
		})
	}
	if value, ok := euo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldURL,
		})
	}
	if euo.mutation.EntityTaxInformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityTaxInformationTable,
			Columns: []string{entity.EntityTaxInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitytaxinformation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEntityTaxInformationIDs(); len(nodes) > 0 && !euo.mutation.EntityTaxInformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityTaxInformationTable,
			Columns: []string{entity.EntityTaxInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitytaxinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EntityTaxInformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityTaxInformationTable,
			Columns: []string{entity.EntityTaxInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitytaxinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EntityAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityAddressesTable,
			Columns: []string{entity.EntityAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entityaddress.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEntityAddressesIDs(); len(nodes) > 0 && !euo.mutation.EntityAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityAddressesTable,
			Columns: []string{entity.EntityAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entityaddress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EntityAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityAddressesTable,
			Columns: []string{entity.EntityAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entityaddress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EntityPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityPreferencesTable,
			Columns: []string{entity.EntityPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEntityPreferencesIDs(); len(nodes) > 0 && !euo.mutation.EntityPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityPreferencesTable,
			Columns: []string{entity.EntityPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EntityPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityPreferencesTable,
			Columns: []string{entity.EntityPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EntityContactPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityContactPointsTable,
			Columns: []string{entity.EntityContactPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitycontactpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEntityContactPointsIDs(); len(nodes) > 0 && !euo.mutation.EntityContactPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityContactPointsTable,
			Columns: []string{entity.EntityContactPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitycontactpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EntityContactPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.EntityContactPointsTable,
			Columns: []string{entity.EntityContactPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entitycontactpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OwnsAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entity.OwnsAccountTable,
			Columns: entity.OwnsAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedOwnsAccountIDs(); len(nodes) > 0 && !euo.mutation.OwnsAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entity.OwnsAccountTable,
			Columns: entity.OwnsAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OwnsAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entity.OwnsAccountTable,
			Columns: entity.OwnsAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Entity{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
