// Code generated by entc, DO NOT EDIT.

package entity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/robinhuiser/fca-emu/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DateCreated applies equality check predicate on the "dateCreated" field. It's identical to DateCreatedEQ.
func DateCreated(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateCreated), v))
	})
}

// Firstname applies equality check predicate on the "firstname" field. It's identical to FirstnameEQ.
func Firstname(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstname), v))
	})
}

// Lastname applies equality check predicate on the "lastname" field. It's identical to LastnameEQ.
func Lastname(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastname), v))
	})
}

// Fullname applies equality check predicate on the "fullname" field. It's identical to FullnameEQ.
func Fullname(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFullname), v))
	})
}

// DateOfBirth applies equality check predicate on the "dateOfBirth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfBirth), v))
	})
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// LastLoginDate applies equality check predicate on the "lastLoginDate" field. It's identical to LastLoginDateEQ.
func LastLoginDate(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastLoginDate), v))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// DateCreatedEQ applies the EQ predicate on the "dateCreated" field.
func DateCreatedEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateCreated), v))
	})
}

// DateCreatedNEQ applies the NEQ predicate on the "dateCreated" field.
func DateCreatedNEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateCreated), v))
	})
}

// DateCreatedIn applies the In predicate on the "dateCreated" field.
func DateCreatedIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateCreated), v...))
	})
}

// DateCreatedNotIn applies the NotIn predicate on the "dateCreated" field.
func DateCreatedNotIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateCreated), v...))
	})
}

// DateCreatedGT applies the GT predicate on the "dateCreated" field.
func DateCreatedGT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateCreated), v))
	})
}

// DateCreatedGTE applies the GTE predicate on the "dateCreated" field.
func DateCreatedGTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateCreated), v))
	})
}

// DateCreatedLT applies the LT predicate on the "dateCreated" field.
func DateCreatedLT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateCreated), v))
	})
}

// DateCreatedLTE applies the LTE predicate on the "dateCreated" field.
func DateCreatedLTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateCreated), v))
	})
}

// FirstnameEQ applies the EQ predicate on the "firstname" field.
func FirstnameEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstname), v))
	})
}

// FirstnameNEQ applies the NEQ predicate on the "firstname" field.
func FirstnameNEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstname), v))
	})
}

// FirstnameIn applies the In predicate on the "firstname" field.
func FirstnameIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstname), v...))
	})
}

// FirstnameNotIn applies the NotIn predicate on the "firstname" field.
func FirstnameNotIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstname), v...))
	})
}

// FirstnameGT applies the GT predicate on the "firstname" field.
func FirstnameGT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstname), v))
	})
}

// FirstnameGTE applies the GTE predicate on the "firstname" field.
func FirstnameGTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstname), v))
	})
}

// FirstnameLT applies the LT predicate on the "firstname" field.
func FirstnameLT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstname), v))
	})
}

// FirstnameLTE applies the LTE predicate on the "firstname" field.
func FirstnameLTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstname), v))
	})
}

// FirstnameContains applies the Contains predicate on the "firstname" field.
func FirstnameContains(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstname), v))
	})
}

// FirstnameHasPrefix applies the HasPrefix predicate on the "firstname" field.
func FirstnameHasPrefix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstname), v))
	})
}

// FirstnameHasSuffix applies the HasSuffix predicate on the "firstname" field.
func FirstnameHasSuffix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstname), v))
	})
}

// FirstnameIsNil applies the IsNil predicate on the "firstname" field.
func FirstnameIsNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstname)))
	})
}

// FirstnameNotNil applies the NotNil predicate on the "firstname" field.
func FirstnameNotNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstname)))
	})
}

// FirstnameEqualFold applies the EqualFold predicate on the "firstname" field.
func FirstnameEqualFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstname), v))
	})
}

// FirstnameContainsFold applies the ContainsFold predicate on the "firstname" field.
func FirstnameContainsFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstname), v))
	})
}

// LastnameEQ applies the EQ predicate on the "lastname" field.
func LastnameEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastname), v))
	})
}

// LastnameNEQ applies the NEQ predicate on the "lastname" field.
func LastnameNEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastname), v))
	})
}

// LastnameIn applies the In predicate on the "lastname" field.
func LastnameIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastname), v...))
	})
}

// LastnameNotIn applies the NotIn predicate on the "lastname" field.
func LastnameNotIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastname), v...))
	})
}

// LastnameGT applies the GT predicate on the "lastname" field.
func LastnameGT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastname), v))
	})
}

// LastnameGTE applies the GTE predicate on the "lastname" field.
func LastnameGTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastname), v))
	})
}

// LastnameLT applies the LT predicate on the "lastname" field.
func LastnameLT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastname), v))
	})
}

// LastnameLTE applies the LTE predicate on the "lastname" field.
func LastnameLTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastname), v))
	})
}

// LastnameContains applies the Contains predicate on the "lastname" field.
func LastnameContains(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastname), v))
	})
}

// LastnameHasPrefix applies the HasPrefix predicate on the "lastname" field.
func LastnameHasPrefix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastname), v))
	})
}

// LastnameHasSuffix applies the HasSuffix predicate on the "lastname" field.
func LastnameHasSuffix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastname), v))
	})
}

// LastnameIsNil applies the IsNil predicate on the "lastname" field.
func LastnameIsNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastname)))
	})
}

// LastnameNotNil applies the NotNil predicate on the "lastname" field.
func LastnameNotNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastname)))
	})
}

// LastnameEqualFold applies the EqualFold predicate on the "lastname" field.
func LastnameEqualFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastname), v))
	})
}

// LastnameContainsFold applies the ContainsFold predicate on the "lastname" field.
func LastnameContainsFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastname), v))
	})
}

// FullnameEQ applies the EQ predicate on the "fullname" field.
func FullnameEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFullname), v))
	})
}

// FullnameNEQ applies the NEQ predicate on the "fullname" field.
func FullnameNEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFullname), v))
	})
}

// FullnameIn applies the In predicate on the "fullname" field.
func FullnameIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFullname), v...))
	})
}

// FullnameNotIn applies the NotIn predicate on the "fullname" field.
func FullnameNotIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFullname), v...))
	})
}

// FullnameGT applies the GT predicate on the "fullname" field.
func FullnameGT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFullname), v))
	})
}

// FullnameGTE applies the GTE predicate on the "fullname" field.
func FullnameGTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFullname), v))
	})
}

// FullnameLT applies the LT predicate on the "fullname" field.
func FullnameLT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFullname), v))
	})
}

// FullnameLTE applies the LTE predicate on the "fullname" field.
func FullnameLTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFullname), v))
	})
}

// FullnameContains applies the Contains predicate on the "fullname" field.
func FullnameContains(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFullname), v))
	})
}

// FullnameHasPrefix applies the HasPrefix predicate on the "fullname" field.
func FullnameHasPrefix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFullname), v))
	})
}

// FullnameHasSuffix applies the HasSuffix predicate on the "fullname" field.
func FullnameHasSuffix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFullname), v))
	})
}

// FullnameIsNil applies the IsNil predicate on the "fullname" field.
func FullnameIsNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFullname)))
	})
}

// FullnameNotNil applies the NotNil predicate on the "fullname" field.
func FullnameNotNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFullname)))
	})
}

// FullnameEqualFold applies the EqualFold predicate on the "fullname" field.
func FullnameEqualFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFullname), v))
	})
}

// FullnameContainsFold applies the ContainsFold predicate on the "fullname" field.
func FullnameContainsFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFullname), v))
	})
}

// DateOfBirthEQ applies the EQ predicate on the "dateOfBirth" field.
func DateOfBirthEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthNEQ applies the NEQ predicate on the "dateOfBirth" field.
func DateOfBirthNEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthIn applies the In predicate on the "dateOfBirth" field.
func DateOfBirthIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateOfBirth), v...))
	})
}

// DateOfBirthNotIn applies the NotIn predicate on the "dateOfBirth" field.
func DateOfBirthNotIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateOfBirth), v...))
	})
}

// DateOfBirthGT applies the GT predicate on the "dateOfBirth" field.
func DateOfBirthGT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthGTE applies the GTE predicate on the "dateOfBirth" field.
func DateOfBirthGTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthLT applies the LT predicate on the "dateOfBirth" field.
func DateOfBirthLT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthLTE applies the LTE predicate on the "dateOfBirth" field.
func DateOfBirthLTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateOfBirth), v))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// LastLoginDateEQ applies the EQ predicate on the "lastLoginDate" field.
func LastLoginDateEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastLoginDate), v))
	})
}

// LastLoginDateNEQ applies the NEQ predicate on the "lastLoginDate" field.
func LastLoginDateNEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastLoginDate), v))
	})
}

// LastLoginDateIn applies the In predicate on the "lastLoginDate" field.
func LastLoginDateIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastLoginDate), v...))
	})
}

// LastLoginDateNotIn applies the NotIn predicate on the "lastLoginDate" field.
func LastLoginDateNotIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastLoginDate), v...))
	})
}

// LastLoginDateGT applies the GT predicate on the "lastLoginDate" field.
func LastLoginDateGT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastLoginDate), v))
	})
}

// LastLoginDateGTE applies the GTE predicate on the "lastLoginDate" field.
func LastLoginDateGTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastLoginDate), v))
	})
}

// LastLoginDateLT applies the LT predicate on the "lastLoginDate" field.
func LastLoginDateLT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastLoginDate), v))
	})
}

// LastLoginDateLTE applies the LTE predicate on the "lastLoginDate" field.
func LastLoginDateLTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastLoginDate), v))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken), v))
	})
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToken), v))
	})
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldToken), v...))
	})
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldToken), v...))
	})
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToken), v))
	})
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToken), v))
	})
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToken), v))
	})
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToken), v))
	})
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldToken), v))
	})
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldToken), v))
	})
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldToken), v))
	})
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldToken), v))
	})
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldToken), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// HasEntityTaxInformation applies the HasEdge predicate on the "entityTaxInformation" edge.
func HasEntityTaxInformation() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EntityTaxInformationTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntityTaxInformationTable, EntityTaxInformationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntityTaxInformationWith applies the HasEdge predicate on the "entityTaxInformation" edge with a given conditions (other predicates).
func HasEntityTaxInformationWith(preds ...predicate.EntityTaxInformation) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EntityTaxInformationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntityTaxInformationTable, EntityTaxInformationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEntityAddresses applies the HasEdge predicate on the "entityAddresses" edge.
func HasEntityAddresses() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EntityAddressesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntityAddressesTable, EntityAddressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntityAddressesWith applies the HasEdge predicate on the "entityAddresses" edge with a given conditions (other predicates).
func HasEntityAddressesWith(preds ...predicate.EntityAddress) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EntityAddressesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntityAddressesTable, EntityAddressesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEntityPreferences applies the HasEdge predicate on the "entityPreferences" edge.
func HasEntityPreferences() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EntityPreferencesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntityPreferencesTable, EntityPreferencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntityPreferencesWith applies the HasEdge predicate on the "entityPreferences" edge with a given conditions (other predicates).
func HasEntityPreferencesWith(preds ...predicate.Preference) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EntityPreferencesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntityPreferencesTable, EntityPreferencesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEntityContactPoints applies the HasEdge predicate on the "entityContactPoints" edge.
func HasEntityContactPoints() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EntityContactPointsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntityContactPointsTable, EntityContactPointsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntityContactPointsWith applies the HasEdge predicate on the "entityContactPoints" edge with a given conditions (other predicates).
func HasEntityContactPointsWith(preds ...predicate.EntityContactPoint) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EntityContactPointsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntityContactPointsTable, EntityContactPointsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnsAccount applies the HasEdge predicate on the "owns_account" edge.
func HasOwnsAccount() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnsAccountTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnsAccountTable, OwnsAccountPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnsAccountWith applies the HasEdge predicate on the "owns_account" edge with a given conditions (other predicates).
func HasOwnsAccountWith(preds ...predicate.Account) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnsAccountInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnsAccountTable, OwnsAccountPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		p(s.Not())
	})
}
