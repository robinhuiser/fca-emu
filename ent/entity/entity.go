// Code generated by entc, DO NOT EDIT.

package entity

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the entity type in the database.
	Label = "entity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDateCreated holds the string denoting the datecreated field in the database.
	FieldDateCreated = "date_created"
	// FieldFirstname holds the string denoting the firstname field in the database.
	FieldFirstname = "firstname"
	// FieldLastname holds the string denoting the lastname field in the database.
	FieldLastname = "lastname"
	// FieldFullname holds the string denoting the fullname field in the database.
	FieldFullname = "fullname"
	// FieldDateOfBirth holds the string denoting the dateofbirth field in the database.
	FieldDateOfBirth = "date_of_birth"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLastLoginDate holds the string denoting the lastlogindate field in the database.
	FieldLastLoginDate = "last_login_date"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// EdgeEntityTaxInformation holds the string denoting the entitytaxinformation edge name in mutations.
	EdgeEntityTaxInformation = "entityTaxInformation"
	// EdgeEntityAddresses holds the string denoting the entityaddresses edge name in mutations.
	EdgeEntityAddresses = "entityAddresses"
	// EdgeEntityPreferences holds the string denoting the entitypreferences edge name in mutations.
	EdgeEntityPreferences = "entityPreferences"
	// EdgeEntityContactPoints holds the string denoting the entitycontactpoints edge name in mutations.
	EdgeEntityContactPoints = "entityContactPoints"
	// EdgeOwnsAccount holds the string denoting the owns_account edge name in mutations.
	EdgeOwnsAccount = "owns_account"
	// Table holds the table name of the entity in the database.
	Table = "entities"
	// EntityTaxInformationTable is the table the holds the entityTaxInformation relation/edge.
	EntityTaxInformationTable = "entity_tax_informations"
	// EntityTaxInformationInverseTable is the table name for the EntityTaxInformation entity.
	// It exists in this package in order to avoid circular dependency with the "entitytaxinformation" package.
	EntityTaxInformationInverseTable = "entity_tax_informations"
	// EntityTaxInformationColumn is the table column denoting the entityTaxInformation relation/edge.
	EntityTaxInformationColumn = "entity_entity_tax_information"
	// EntityAddressesTable is the table the holds the entityAddresses relation/edge.
	EntityAddressesTable = "entity_addresses"
	// EntityAddressesInverseTable is the table name for the EntityAddress entity.
	// It exists in this package in order to avoid circular dependency with the "entityaddress" package.
	EntityAddressesInverseTable = "entity_addresses"
	// EntityAddressesColumn is the table column denoting the entityAddresses relation/edge.
	EntityAddressesColumn = "entity_entity_addresses"
	// EntityPreferencesTable is the table the holds the entityPreferences relation/edge.
	EntityPreferencesTable = "entity_preferences"
	// EntityPreferencesInverseTable is the table name for the EntityPreference entity.
	// It exists in this package in order to avoid circular dependency with the "entitypreference" package.
	EntityPreferencesInverseTable = "entity_preferences"
	// EntityPreferencesColumn is the table column denoting the entityPreferences relation/edge.
	EntityPreferencesColumn = "entity_entity_preferences"
	// EntityContactPointsTable is the table the holds the entityContactPoints relation/edge.
	EntityContactPointsTable = "entity_contact_points"
	// EntityContactPointsInverseTable is the table name for the EntityContactPoint entity.
	// It exists in this package in order to avoid circular dependency with the "entitycontactpoint" package.
	EntityContactPointsInverseTable = "entity_contact_points"
	// EntityContactPointsColumn is the table column denoting the entityContactPoints relation/edge.
	EntityContactPointsColumn = "entity_entity_contact_points"
	// OwnsAccountTable is the table the holds the owns_account relation/edge. The primary key declared below.
	OwnsAccountTable = "account_owner"
	// OwnsAccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	OwnsAccountInverseTable = "accounts"
)

// Columns holds all SQL columns for entity fields.
var Columns = []string{
	FieldID,
	FieldDateCreated,
	FieldFirstname,
	FieldLastname,
	FieldFullname,
	FieldDateOfBirth,
	FieldType,
	FieldLastLoginDate,
	FieldUsername,
	FieldToken,
	FieldURL,
}

var (
	// OwnsAccountPrimaryKey and OwnsAccountColumn2 are the table columns denoting the
	// primary key for the owns_account relation (M2M).
	OwnsAccountPrimaryKey = []string{"account_id", "entity_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypePERSON       Type = "PERSON"
	TypeORGANIZATION Type = "ORGANIZATION"
	TypeCORPORATE    Type = "CORPORATE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePERSON, TypeORGANIZATION, TypeCORPORATE:
		return nil
	default:
		return fmt.Errorf("entity: invalid enum value for type field: %q", _type)
	}
}
