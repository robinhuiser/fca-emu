// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/robinhuiser/fca-emu/ent/entitytaxinformation"
	"github.com/robinhuiser/fca-emu/ent/predicate"
)

// EntityTaxInformationQuery is the builder for querying EntityTaxInformation entities.
type EntityTaxInformationQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.EntityTaxInformation
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntityTaxInformationQuery builder.
func (etiq *EntityTaxInformationQuery) Where(ps ...predicate.EntityTaxInformation) *EntityTaxInformationQuery {
	etiq.predicates = append(etiq.predicates, ps...)
	return etiq
}

// Limit adds a limit step to the query.
func (etiq *EntityTaxInformationQuery) Limit(limit int) *EntityTaxInformationQuery {
	etiq.limit = &limit
	return etiq
}

// Offset adds an offset step to the query.
func (etiq *EntityTaxInformationQuery) Offset(offset int) *EntityTaxInformationQuery {
	etiq.offset = &offset
	return etiq
}

// Order adds an order step to the query.
func (etiq *EntityTaxInformationQuery) Order(o ...OrderFunc) *EntityTaxInformationQuery {
	etiq.order = append(etiq.order, o...)
	return etiq
}

// First returns the first EntityTaxInformation entity from the query.
// Returns a *NotFoundError when no EntityTaxInformation was found.
func (etiq *EntityTaxInformationQuery) First(ctx context.Context) (*EntityTaxInformation, error) {
	nodes, err := etiq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{entitytaxinformation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (etiq *EntityTaxInformationQuery) FirstX(ctx context.Context) *EntityTaxInformation {
	node, err := etiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EntityTaxInformation ID from the query.
// Returns a *NotFoundError when no EntityTaxInformation ID was found.
func (etiq *EntityTaxInformationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = etiq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{entitytaxinformation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (etiq *EntityTaxInformationQuery) FirstIDX(ctx context.Context) int {
	id, err := etiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EntityTaxInformation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one EntityTaxInformation entity is not found.
// Returns a *NotFoundError when no EntityTaxInformation entities are found.
func (etiq *EntityTaxInformationQuery) Only(ctx context.Context) (*EntityTaxInformation, error) {
	nodes, err := etiq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{entitytaxinformation.Label}
	default:
		return nil, &NotSingularError{entitytaxinformation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (etiq *EntityTaxInformationQuery) OnlyX(ctx context.Context) *EntityTaxInformation {
	node, err := etiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EntityTaxInformation ID in the query.
// Returns a *NotSingularError when exactly one EntityTaxInformation ID is not found.
// Returns a *NotFoundError when no entities are found.
func (etiq *EntityTaxInformationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = etiq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{entitytaxinformation.Label}
	default:
		err = &NotSingularError{entitytaxinformation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (etiq *EntityTaxInformationQuery) OnlyIDX(ctx context.Context) int {
	id, err := etiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EntityTaxInformations.
func (etiq *EntityTaxInformationQuery) All(ctx context.Context) ([]*EntityTaxInformation, error) {
	if err := etiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return etiq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (etiq *EntityTaxInformationQuery) AllX(ctx context.Context) []*EntityTaxInformation {
	nodes, err := etiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EntityTaxInformation IDs.
func (etiq *EntityTaxInformationQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := etiq.Select(entitytaxinformation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (etiq *EntityTaxInformationQuery) IDsX(ctx context.Context) []int {
	ids, err := etiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (etiq *EntityTaxInformationQuery) Count(ctx context.Context) (int, error) {
	if err := etiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return etiq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (etiq *EntityTaxInformationQuery) CountX(ctx context.Context) int {
	count, err := etiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (etiq *EntityTaxInformationQuery) Exist(ctx context.Context) (bool, error) {
	if err := etiq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return etiq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (etiq *EntityTaxInformationQuery) ExistX(ctx context.Context) bool {
	exist, err := etiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntityTaxInformationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (etiq *EntityTaxInformationQuery) Clone() *EntityTaxInformationQuery {
	if etiq == nil {
		return nil
	}
	return &EntityTaxInformationQuery{
		config:     etiq.config,
		limit:      etiq.limit,
		offset:     etiq.offset,
		order:      append([]OrderFunc{}, etiq.order...),
		predicates: append([]predicate.EntityTaxInformation{}, etiq.predicates...),
		// clone intermediate query.
		sql:  etiq.sql.Clone(),
		path: etiq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type entitytaxinformation.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EntityTaxInformation.Query().
//		GroupBy(entitytaxinformation.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (etiq *EntityTaxInformationQuery) GroupBy(field string, fields ...string) *EntityTaxInformationGroupBy {
	group := &EntityTaxInformationGroupBy{config: etiq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := etiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return etiq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type entitytaxinformation.Type `json:"type,omitempty"`
//	}
//
//	client.EntityTaxInformation.Query().
//		Select(entitytaxinformation.FieldType).
//		Scan(ctx, &v)
//
func (etiq *EntityTaxInformationQuery) Select(field string, fields ...string) *EntityTaxInformationSelect {
	etiq.fields = append([]string{field}, fields...)
	return &EntityTaxInformationSelect{EntityTaxInformationQuery: etiq}
}

func (etiq *EntityTaxInformationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range etiq.fields {
		if !entitytaxinformation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if etiq.path != nil {
		prev, err := etiq.path(ctx)
		if err != nil {
			return err
		}
		etiq.sql = prev
	}
	return nil
}

func (etiq *EntityTaxInformationQuery) sqlAll(ctx context.Context) ([]*EntityTaxInformation, error) {
	var (
		nodes   = []*EntityTaxInformation{}
		withFKs = etiq.withFKs
		_spec   = etiq.querySpec()
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, entitytaxinformation.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &EntityTaxInformation{config: etiq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, etiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (etiq *EntityTaxInformationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := etiq.querySpec()
	return sqlgraph.CountNodes(ctx, etiq.driver, _spec)
}

func (etiq *EntityTaxInformationQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := etiq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (etiq *EntityTaxInformationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entitytaxinformation.Table,
			Columns: entitytaxinformation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entitytaxinformation.FieldID,
			},
		},
		From:   etiq.sql,
		Unique: true,
	}
	if fields := etiq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitytaxinformation.FieldID)
		for i := range fields {
			if fields[i] != entitytaxinformation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := etiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := etiq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := etiq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := etiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, entitytaxinformation.ValidColumn)
			}
		}
	}
	return _spec
}

func (etiq *EntityTaxInformationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(etiq.driver.Dialect())
	t1 := builder.Table(entitytaxinformation.Table)
	selector := builder.Select(t1.Columns(entitytaxinformation.Columns...)...).From(t1)
	if etiq.sql != nil {
		selector = etiq.sql
		selector.Select(selector.Columns(entitytaxinformation.Columns...)...)
	}
	for _, p := range etiq.predicates {
		p(selector)
	}
	for _, p := range etiq.order {
		p(selector, entitytaxinformation.ValidColumn)
	}
	if offset := etiq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := etiq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EntityTaxInformationGroupBy is the group-by builder for EntityTaxInformation entities.
type EntityTaxInformationGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (etigb *EntityTaxInformationGroupBy) Aggregate(fns ...AggregateFunc) *EntityTaxInformationGroupBy {
	etigb.fns = append(etigb.fns, fns...)
	return etigb
}

// Scan applies the group-by query and scans the result into the given value.
func (etigb *EntityTaxInformationGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := etigb.path(ctx)
	if err != nil {
		return err
	}
	etigb.sql = query
	return etigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (etigb *EntityTaxInformationGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := etigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (etigb *EntityTaxInformationGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(etigb.fields) > 1 {
		return nil, errors.New("ent: EntityTaxInformationGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := etigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (etigb *EntityTaxInformationGroupBy) StringsX(ctx context.Context) []string {
	v, err := etigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (etigb *EntityTaxInformationGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = etigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entitytaxinformation.Label}
	default:
		err = fmt.Errorf("ent: EntityTaxInformationGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (etigb *EntityTaxInformationGroupBy) StringX(ctx context.Context) string {
	v, err := etigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (etigb *EntityTaxInformationGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(etigb.fields) > 1 {
		return nil, errors.New("ent: EntityTaxInformationGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := etigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (etigb *EntityTaxInformationGroupBy) IntsX(ctx context.Context) []int {
	v, err := etigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (etigb *EntityTaxInformationGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = etigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entitytaxinformation.Label}
	default:
		err = fmt.Errorf("ent: EntityTaxInformationGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (etigb *EntityTaxInformationGroupBy) IntX(ctx context.Context) int {
	v, err := etigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (etigb *EntityTaxInformationGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(etigb.fields) > 1 {
		return nil, errors.New("ent: EntityTaxInformationGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := etigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (etigb *EntityTaxInformationGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := etigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (etigb *EntityTaxInformationGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = etigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entitytaxinformation.Label}
	default:
		err = fmt.Errorf("ent: EntityTaxInformationGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (etigb *EntityTaxInformationGroupBy) Float64X(ctx context.Context) float64 {
	v, err := etigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (etigb *EntityTaxInformationGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(etigb.fields) > 1 {
		return nil, errors.New("ent: EntityTaxInformationGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := etigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (etigb *EntityTaxInformationGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := etigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (etigb *EntityTaxInformationGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = etigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entitytaxinformation.Label}
	default:
		err = fmt.Errorf("ent: EntityTaxInformationGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (etigb *EntityTaxInformationGroupBy) BoolX(ctx context.Context) bool {
	v, err := etigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (etigb *EntityTaxInformationGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range etigb.fields {
		if !entitytaxinformation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := etigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := etigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (etigb *EntityTaxInformationGroupBy) sqlQuery() *sql.Selector {
	selector := etigb.sql
	columns := make([]string, 0, len(etigb.fields)+len(etigb.fns))
	columns = append(columns, etigb.fields...)
	for _, fn := range etigb.fns {
		columns = append(columns, fn(selector, entitytaxinformation.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(etigb.fields...)
}

// EntityTaxInformationSelect is the builder for selecting fields of EntityTaxInformation entities.
type EntityTaxInformationSelect struct {
	*EntityTaxInformationQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (etis *EntityTaxInformationSelect) Scan(ctx context.Context, v interface{}) error {
	if err := etis.prepareQuery(ctx); err != nil {
		return err
	}
	etis.sql = etis.EntityTaxInformationQuery.sqlQuery(ctx)
	return etis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (etis *EntityTaxInformationSelect) ScanX(ctx context.Context, v interface{}) {
	if err := etis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (etis *EntityTaxInformationSelect) Strings(ctx context.Context) ([]string, error) {
	if len(etis.fields) > 1 {
		return nil, errors.New("ent: EntityTaxInformationSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := etis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (etis *EntityTaxInformationSelect) StringsX(ctx context.Context) []string {
	v, err := etis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (etis *EntityTaxInformationSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = etis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entitytaxinformation.Label}
	default:
		err = fmt.Errorf("ent: EntityTaxInformationSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (etis *EntityTaxInformationSelect) StringX(ctx context.Context) string {
	v, err := etis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (etis *EntityTaxInformationSelect) Ints(ctx context.Context) ([]int, error) {
	if len(etis.fields) > 1 {
		return nil, errors.New("ent: EntityTaxInformationSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := etis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (etis *EntityTaxInformationSelect) IntsX(ctx context.Context) []int {
	v, err := etis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (etis *EntityTaxInformationSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = etis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entitytaxinformation.Label}
	default:
		err = fmt.Errorf("ent: EntityTaxInformationSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (etis *EntityTaxInformationSelect) IntX(ctx context.Context) int {
	v, err := etis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (etis *EntityTaxInformationSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(etis.fields) > 1 {
		return nil, errors.New("ent: EntityTaxInformationSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := etis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (etis *EntityTaxInformationSelect) Float64sX(ctx context.Context) []float64 {
	v, err := etis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (etis *EntityTaxInformationSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = etis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entitytaxinformation.Label}
	default:
		err = fmt.Errorf("ent: EntityTaxInformationSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (etis *EntityTaxInformationSelect) Float64X(ctx context.Context) float64 {
	v, err := etis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (etis *EntityTaxInformationSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(etis.fields) > 1 {
		return nil, errors.New("ent: EntityTaxInformationSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := etis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (etis *EntityTaxInformationSelect) BoolsX(ctx context.Context) []bool {
	v, err := etis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (etis *EntityTaxInformationSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = etis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entitytaxinformation.Label}
	default:
		err = fmt.Errorf("ent: EntityTaxInformationSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (etis *EntityTaxInformationSelect) BoolX(ctx context.Context) bool {
	v, err := etis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (etis *EntityTaxInformationSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := etis.sqlQuery().Query()
	if err := etis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (etis *EntityTaxInformationSelect) sqlQuery() sql.Querier {
	selector := etis.sql
	selector.Select(selector.Columns(etis.fields...)...)
	return selector
}
