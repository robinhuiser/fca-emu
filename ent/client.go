// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/robinhuiser/fca-emu/ent/migrate"

	"github.com/robinhuiser/fca-emu/ent/account"
	"github.com/robinhuiser/fca-emu/ent/bank"
	"github.com/robinhuiser/fca-emu/ent/binaryitem"
	"github.com/robinhuiser/fca-emu/ent/branch"
	"github.com/robinhuiser/fca-emu/ent/card"
	"github.com/robinhuiser/fca-emu/ent/cardnetwork"
	"github.com/robinhuiser/fca-emu/ent/entity"
	"github.com/robinhuiser/fca-emu/ent/entityaddress"
	"github.com/robinhuiser/fca-emu/ent/entitycontactpoint"
	"github.com/robinhuiser/fca-emu/ent/entitytaxinformation"
	"github.com/robinhuiser/fca-emu/ent/preference"
	"github.com/robinhuiser/fca-emu/ent/product"
	"github.com/robinhuiser/fca-emu/ent/routingnumber"
	"github.com/robinhuiser/fca-emu/ent/transaction"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// Bank is the client for interacting with the Bank builders.
	Bank *BankClient
	// BinaryItem is the client for interacting with the BinaryItem builders.
	BinaryItem *BinaryItemClient
	// Branch is the client for interacting with the Branch builders.
	Branch *BranchClient
	// Card is the client for interacting with the Card builders.
	Card *CardClient
	// CardNetwork is the client for interacting with the CardNetwork builders.
	CardNetwork *CardNetworkClient
	// Entity is the client for interacting with the Entity builders.
	Entity *EntityClient
	// EntityAddress is the client for interacting with the EntityAddress builders.
	EntityAddress *EntityAddressClient
	// EntityContactPoint is the client for interacting with the EntityContactPoint builders.
	EntityContactPoint *EntityContactPointClient
	// EntityTaxInformation is the client for interacting with the EntityTaxInformation builders.
	EntityTaxInformation *EntityTaxInformationClient
	// Preference is the client for interacting with the Preference builders.
	Preference *PreferenceClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// RoutingNumber is the client for interacting with the RoutingNumber builders.
	RoutingNumber *RoutingNumberClient
	// Transaction is the client for interacting with the Transaction builders.
	Transaction *TransactionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Account = NewAccountClient(c.config)
	c.Bank = NewBankClient(c.config)
	c.BinaryItem = NewBinaryItemClient(c.config)
	c.Branch = NewBranchClient(c.config)
	c.Card = NewCardClient(c.config)
	c.CardNetwork = NewCardNetworkClient(c.config)
	c.Entity = NewEntityClient(c.config)
	c.EntityAddress = NewEntityAddressClient(c.config)
	c.EntityContactPoint = NewEntityContactPointClient(c.config)
	c.EntityTaxInformation = NewEntityTaxInformationClient(c.config)
	c.Preference = NewPreferenceClient(c.config)
	c.Product = NewProductClient(c.config)
	c.RoutingNumber = NewRoutingNumberClient(c.config)
	c.Transaction = NewTransactionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Account:              NewAccountClient(cfg),
		Bank:                 NewBankClient(cfg),
		BinaryItem:           NewBinaryItemClient(cfg),
		Branch:               NewBranchClient(cfg),
		Card:                 NewCardClient(cfg),
		CardNetwork:          NewCardNetworkClient(cfg),
		Entity:               NewEntityClient(cfg),
		EntityAddress:        NewEntityAddressClient(cfg),
		EntityContactPoint:   NewEntityContactPointClient(cfg),
		EntityTaxInformation: NewEntityTaxInformationClient(cfg),
		Preference:           NewPreferenceClient(cfg),
		Product:              NewProductClient(cfg),
		RoutingNumber:        NewRoutingNumberClient(cfg),
		Transaction:          NewTransactionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:               cfg,
		Account:              NewAccountClient(cfg),
		Bank:                 NewBankClient(cfg),
		BinaryItem:           NewBinaryItemClient(cfg),
		Branch:               NewBranchClient(cfg),
		Card:                 NewCardClient(cfg),
		CardNetwork:          NewCardNetworkClient(cfg),
		Entity:               NewEntityClient(cfg),
		EntityAddress:        NewEntityAddressClient(cfg),
		EntityContactPoint:   NewEntityContactPointClient(cfg),
		EntityTaxInformation: NewEntityTaxInformationClient(cfg),
		Preference:           NewPreferenceClient(cfg),
		Product:              NewProductClient(cfg),
		RoutingNumber:        NewRoutingNumberClient(cfg),
		Transaction:          NewTransactionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Account.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Account.Use(hooks...)
	c.Bank.Use(hooks...)
	c.BinaryItem.Use(hooks...)
	c.Branch.Use(hooks...)
	c.Card.Use(hooks...)
	c.CardNetwork.Use(hooks...)
	c.Entity.Use(hooks...)
	c.EntityAddress.Use(hooks...)
	c.EntityContactPoint.Use(hooks...)
	c.EntityTaxInformation.Use(hooks...)
	c.Preference.Use(hooks...)
	c.Product.Use(hooks...)
	c.RoutingNumber.Use(hooks...)
	c.Transaction.Use(hooks...)
}

// AccountClient is a client for the Account schema.
type AccountClient struct {
	config
}

// NewAccountClient returns a client for the Account from the given config.
func NewAccountClient(c config) *AccountClient {
	return &AccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `account.Hooks(f(g(h())))`.
func (c *AccountClient) Use(hooks ...Hook) {
	c.hooks.Account = append(c.hooks.Account, hooks...)
}

// Create returns a create builder for Account.
func (c *AccountClient) Create() *AccountCreate {
	mutation := newAccountMutation(c.config, OpCreate)
	return &AccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Account entities.
func (c *AccountClient) CreateBulk(builders ...*AccountCreate) *AccountCreateBulk {
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Account.
func (c *AccountClient) Update() *AccountUpdate {
	mutation := newAccountMutation(c.config, OpUpdate)
	return &AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountClient) UpdateOne(a *Account) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccount(a))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountClient) UpdateOneID(id uuid.UUID) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccountID(id))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Account.
func (c *AccountClient) Delete() *AccountDelete {
	mutation := newAccountMutation(c.config, OpDelete)
	return &AccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AccountClient) DeleteOne(a *Account) *AccountDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AccountClient) DeleteOneID(id uuid.UUID) *AccountDeleteOne {
	builder := c.Delete().Where(account.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDeleteOne{builder}
}

// Query returns a query builder for Account.
func (c *AccountClient) Query() *AccountQuery {
	return &AccountQuery{config: c.config}
}

// Get returns a Account entity by its id.
func (c *AccountClient) Get(ctx context.Context, id uuid.UUID) (*Account, error) {
	return c.Query().Where(account.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountClient) GetX(ctx context.Context, id uuid.UUID) *Account {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBranch queries the branch edge of a Account.
func (c *AccountClient) QueryBranch(a *Account) *BranchQuery {
	query := &BranchQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, account.BranchTable, account.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwners queries the owners edge of a Account.
func (c *AccountClient) QueryOwners(a *Account) *EntityQuery {
	query := &EntityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(entity.Table, entity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, account.OwnersTable, account.OwnersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPreferences queries the preferences edge of a Account.
func (c *AccountClient) QueryPreferences(a *Account) *PreferenceQuery {
	query := &PreferenceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(preference.Table, preference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, account.PreferencesTable, account.PreferencesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoutingnumbers queries the routingnumbers edge of a Account.
func (c *AccountClient) QueryRoutingnumbers(a *Account) *RoutingNumberQuery {
	query := &RoutingNumberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(routingnumber.Table, routingnumber.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, account.RoutingnumbersTable, account.RoutingnumbersColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a Account.
func (c *AccountClient) QueryProduct(a *Account) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, account.ProductTable, account.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransactions queries the transactions edge of a Account.
func (c *AccountClient) QueryTransactions(a *Account) *TransactionQuery {
	query := &TransactionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, account.TransactionsTable, account.TransactionsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountClient) Hooks() []Hook {
	return c.hooks.Account
}

// BankClient is a client for the Bank schema.
type BankClient struct {
	config
}

// NewBankClient returns a client for the Bank from the given config.
func NewBankClient(c config) *BankClient {
	return &BankClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bank.Hooks(f(g(h())))`.
func (c *BankClient) Use(hooks ...Hook) {
	c.hooks.Bank = append(c.hooks.Bank, hooks...)
}

// Create returns a create builder for Bank.
func (c *BankClient) Create() *BankCreate {
	mutation := newBankMutation(c.config, OpCreate)
	return &BankCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bank entities.
func (c *BankClient) CreateBulk(builders ...*BankCreate) *BankCreateBulk {
	return &BankCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bank.
func (c *BankClient) Update() *BankUpdate {
	mutation := newBankMutation(c.config, OpUpdate)
	return &BankUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BankClient) UpdateOne(b *Bank) *BankUpdateOne {
	mutation := newBankMutation(c.config, OpUpdateOne, withBank(b))
	return &BankUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BankClient) UpdateOneID(id int) *BankUpdateOne {
	mutation := newBankMutation(c.config, OpUpdateOne, withBankID(id))
	return &BankUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bank.
func (c *BankClient) Delete() *BankDelete {
	mutation := newBankMutation(c.config, OpDelete)
	return &BankDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BankClient) DeleteOne(b *Bank) *BankDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BankClient) DeleteOneID(id int) *BankDeleteOne {
	builder := c.Delete().Where(bank.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BankDeleteOne{builder}
}

// Query returns a query builder for Bank.
func (c *BankClient) Query() *BankQuery {
	return &BankQuery{config: c.config}
}

// Get returns a Bank entity by its id.
func (c *BankClient) Get(ctx context.Context, id int) (*Bank, error) {
	return c.Query().Where(bank.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BankClient) GetX(ctx context.Context, id int) *Bank {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBranches queries the branches edge of a Bank.
func (c *BankClient) QueryBranches(b *Bank) *BranchQuery {
	query := &BranchQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bank.Table, bank.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bank.BranchesTable, bank.BranchesColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BankClient) Hooks() []Hook {
	return c.hooks.Bank
}

// BinaryItemClient is a client for the BinaryItem schema.
type BinaryItemClient struct {
	config
}

// NewBinaryItemClient returns a client for the BinaryItem from the given config.
func NewBinaryItemClient(c config) *BinaryItemClient {
	return &BinaryItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `binaryitem.Hooks(f(g(h())))`.
func (c *BinaryItemClient) Use(hooks ...Hook) {
	c.hooks.BinaryItem = append(c.hooks.BinaryItem, hooks...)
}

// Create returns a create builder for BinaryItem.
func (c *BinaryItemClient) Create() *BinaryItemCreate {
	mutation := newBinaryItemMutation(c.config, OpCreate)
	return &BinaryItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BinaryItem entities.
func (c *BinaryItemClient) CreateBulk(builders ...*BinaryItemCreate) *BinaryItemCreateBulk {
	return &BinaryItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BinaryItem.
func (c *BinaryItemClient) Update() *BinaryItemUpdate {
	mutation := newBinaryItemMutation(c.config, OpUpdate)
	return &BinaryItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BinaryItemClient) UpdateOne(bi *BinaryItem) *BinaryItemUpdateOne {
	mutation := newBinaryItemMutation(c.config, OpUpdateOne, withBinaryItem(bi))
	return &BinaryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BinaryItemClient) UpdateOneID(id int) *BinaryItemUpdateOne {
	mutation := newBinaryItemMutation(c.config, OpUpdateOne, withBinaryItemID(id))
	return &BinaryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BinaryItem.
func (c *BinaryItemClient) Delete() *BinaryItemDelete {
	mutation := newBinaryItemMutation(c.config, OpDelete)
	return &BinaryItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BinaryItemClient) DeleteOne(bi *BinaryItem) *BinaryItemDeleteOne {
	return c.DeleteOneID(bi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BinaryItemClient) DeleteOneID(id int) *BinaryItemDeleteOne {
	builder := c.Delete().Where(binaryitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BinaryItemDeleteOne{builder}
}

// Query returns a query builder for BinaryItem.
func (c *BinaryItemClient) Query() *BinaryItemQuery {
	return &BinaryItemQuery{config: c.config}
}

// Get returns a BinaryItem entity by its id.
func (c *BinaryItemClient) Get(ctx context.Context, id int) (*BinaryItem, error) {
	return c.Query().Where(binaryitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BinaryItemClient) GetX(ctx context.Context, id int) *BinaryItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransaction queries the transaction edge of a BinaryItem.
func (c *BinaryItemClient) QueryTransaction(bi *BinaryItem) *TransactionQuery {
	query := &TransactionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(binaryitem.Table, binaryitem.FieldID, id),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, binaryitem.TransactionTable, binaryitem.TransactionColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BinaryItemClient) Hooks() []Hook {
	return c.hooks.BinaryItem
}

// BranchClient is a client for the Branch schema.
type BranchClient struct {
	config
}

// NewBranchClient returns a client for the Branch from the given config.
func NewBranchClient(c config) *BranchClient {
	return &BranchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `branch.Hooks(f(g(h())))`.
func (c *BranchClient) Use(hooks ...Hook) {
	c.hooks.Branch = append(c.hooks.Branch, hooks...)
}

// Create returns a create builder for Branch.
func (c *BranchClient) Create() *BranchCreate {
	mutation := newBranchMutation(c.config, OpCreate)
	return &BranchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Branch entities.
func (c *BranchClient) CreateBulk(builders ...*BranchCreate) *BranchCreateBulk {
	return &BranchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Branch.
func (c *BranchClient) Update() *BranchUpdate {
	mutation := newBranchMutation(c.config, OpUpdate)
	return &BranchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BranchClient) UpdateOne(b *Branch) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranch(b))
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BranchClient) UpdateOneID(id int) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranchID(id))
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Branch.
func (c *BranchClient) Delete() *BranchDelete {
	mutation := newBranchMutation(c.config, OpDelete)
	return &BranchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BranchClient) DeleteOne(b *Branch) *BranchDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BranchClient) DeleteOneID(id int) *BranchDeleteOne {
	builder := c.Delete().Where(branch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BranchDeleteOne{builder}
}

// Query returns a query builder for Branch.
func (c *BranchClient) Query() *BranchQuery {
	return &BranchQuery{config: c.config}
}

// Get returns a Branch entity by its id.
func (c *BranchClient) Get(ctx context.Context, id int) (*Branch, error) {
	return c.Query().Where(branch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BranchClient) GetX(ctx context.Context, id int) *Branch {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Branch.
func (c *BranchClient) QueryOwner(b *Branch) *BankQuery {
	query := &BankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(bank.Table, bank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, branch.OwnerTable, branch.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BranchClient) Hooks() []Hook {
	return c.hooks.Branch
}

// CardClient is a client for the Card schema.
type CardClient struct {
	config
}

// NewCardClient returns a client for the Card from the given config.
func NewCardClient(c config) *CardClient {
	return &CardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `card.Hooks(f(g(h())))`.
func (c *CardClient) Use(hooks ...Hook) {
	c.hooks.Card = append(c.hooks.Card, hooks...)
}

// Create returns a create builder for Card.
func (c *CardClient) Create() *CardCreate {
	mutation := newCardMutation(c.config, OpCreate)
	return &CardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Card entities.
func (c *CardClient) CreateBulk(builders ...*CardCreate) *CardCreateBulk {
	return &CardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Card.
func (c *CardClient) Update() *CardUpdate {
	mutation := newCardMutation(c.config, OpUpdate)
	return &CardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CardClient) UpdateOne(ca *Card) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCard(ca))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CardClient) UpdateOneID(id int) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCardID(id))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Card.
func (c *CardClient) Delete() *CardDelete {
	mutation := newCardMutation(c.config, OpDelete)
	return &CardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CardClient) DeleteOne(ca *Card) *CardDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CardClient) DeleteOneID(id int) *CardDeleteOne {
	builder := c.Delete().Where(card.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CardDeleteOne{builder}
}

// Query returns a query builder for Card.
func (c *CardClient) Query() *CardQuery {
	return &CardQuery{config: c.config}
}

// Get returns a Card entity by its id.
func (c *CardClient) Get(ctx context.Context, id int) (*Card, error) {
	return c.Query().Where(card.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CardClient) GetX(ctx context.Context, id int) *Card {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNetwork queries the network edge of a Card.
func (c *CardClient) QueryNetwork(ca *Card) *CardNetworkQuery {
	query := &CardNetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(cardnetwork.Table, cardnetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, card.NetworkTable, card.NetworkColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CardClient) Hooks() []Hook {
	return c.hooks.Card
}

// CardNetworkClient is a client for the CardNetwork schema.
type CardNetworkClient struct {
	config
}

// NewCardNetworkClient returns a client for the CardNetwork from the given config.
func NewCardNetworkClient(c config) *CardNetworkClient {
	return &CardNetworkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cardnetwork.Hooks(f(g(h())))`.
func (c *CardNetworkClient) Use(hooks ...Hook) {
	c.hooks.CardNetwork = append(c.hooks.CardNetwork, hooks...)
}

// Create returns a create builder for CardNetwork.
func (c *CardNetworkClient) Create() *CardNetworkCreate {
	mutation := newCardNetworkMutation(c.config, OpCreate)
	return &CardNetworkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CardNetwork entities.
func (c *CardNetworkClient) CreateBulk(builders ...*CardNetworkCreate) *CardNetworkCreateBulk {
	return &CardNetworkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CardNetwork.
func (c *CardNetworkClient) Update() *CardNetworkUpdate {
	mutation := newCardNetworkMutation(c.config, OpUpdate)
	return &CardNetworkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CardNetworkClient) UpdateOne(cn *CardNetwork) *CardNetworkUpdateOne {
	mutation := newCardNetworkMutation(c.config, OpUpdateOne, withCardNetwork(cn))
	return &CardNetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CardNetworkClient) UpdateOneID(id int) *CardNetworkUpdateOne {
	mutation := newCardNetworkMutation(c.config, OpUpdateOne, withCardNetworkID(id))
	return &CardNetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CardNetwork.
func (c *CardNetworkClient) Delete() *CardNetworkDelete {
	mutation := newCardNetworkMutation(c.config, OpDelete)
	return &CardNetworkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CardNetworkClient) DeleteOne(cn *CardNetwork) *CardNetworkDeleteOne {
	return c.DeleteOneID(cn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CardNetworkClient) DeleteOneID(id int) *CardNetworkDeleteOne {
	builder := c.Delete().Where(cardnetwork.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CardNetworkDeleteOne{builder}
}

// Query returns a query builder for CardNetwork.
func (c *CardNetworkClient) Query() *CardNetworkQuery {
	return &CardNetworkQuery{config: c.config}
}

// Get returns a CardNetwork entity by its id.
func (c *CardNetworkClient) Get(ctx context.Context, id int) (*CardNetwork, error) {
	return c.Query().Where(cardnetwork.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CardNetworkClient) GetX(ctx context.Context, id int) *CardNetwork {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CardNetworkClient) Hooks() []Hook {
	return c.hooks.CardNetwork
}

// EntityClient is a client for the Entity schema.
type EntityClient struct {
	config
}

// NewEntityClient returns a client for the Entity from the given config.
func NewEntityClient(c config) *EntityClient {
	return &EntityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entity.Hooks(f(g(h())))`.
func (c *EntityClient) Use(hooks ...Hook) {
	c.hooks.Entity = append(c.hooks.Entity, hooks...)
}

// Create returns a create builder for Entity.
func (c *EntityClient) Create() *EntityCreate {
	mutation := newEntityMutation(c.config, OpCreate)
	return &EntityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Entity entities.
func (c *EntityClient) CreateBulk(builders ...*EntityCreate) *EntityCreateBulk {
	return &EntityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Entity.
func (c *EntityClient) Update() *EntityUpdate {
	mutation := newEntityMutation(c.config, OpUpdate)
	return &EntityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntityClient) UpdateOne(e *Entity) *EntityUpdateOne {
	mutation := newEntityMutation(c.config, OpUpdateOne, withEntity(e))
	return &EntityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntityClient) UpdateOneID(id uuid.UUID) *EntityUpdateOne {
	mutation := newEntityMutation(c.config, OpUpdateOne, withEntityID(id))
	return &EntityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Entity.
func (c *EntityClient) Delete() *EntityDelete {
	mutation := newEntityMutation(c.config, OpDelete)
	return &EntityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EntityClient) DeleteOne(e *Entity) *EntityDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EntityClient) DeleteOneID(id uuid.UUID) *EntityDeleteOne {
	builder := c.Delete().Where(entity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntityDeleteOne{builder}
}

// Query returns a query builder for Entity.
func (c *EntityClient) Query() *EntityQuery {
	return &EntityQuery{config: c.config}
}

// Get returns a Entity entity by its id.
func (c *EntityClient) Get(ctx context.Context, id uuid.UUID) (*Entity, error) {
	return c.Query().Where(entity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntityClient) GetX(ctx context.Context, id uuid.UUID) *Entity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTaxSpecifications queries the taxSpecifications edge of a Entity.
func (c *EntityClient) QueryTaxSpecifications(e *Entity) *EntityTaxInformationQuery {
	query := &EntityTaxInformationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entity.Table, entity.FieldID, id),
			sqlgraph.To(entitytaxinformation.Table, entitytaxinformation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entity.TaxSpecificationsTable, entity.TaxSpecificationsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddresses queries the addresses edge of a Entity.
func (c *EntityClient) QueryAddresses(e *Entity) *EntityAddressQuery {
	query := &EntityAddressQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entity.Table, entity.FieldID, id),
			sqlgraph.To(entityaddress.Table, entityaddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entity.AddressesTable, entity.AddressesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPreferences queries the preferences edge of a Entity.
func (c *EntityClient) QueryPreferences(e *Entity) *PreferenceQuery {
	query := &PreferenceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entity.Table, entity.FieldID, id),
			sqlgraph.To(preference.Table, preference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entity.PreferencesTable, entity.PreferencesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContactPoints queries the contactPoints edge of a Entity.
func (c *EntityClient) QueryContactPoints(e *Entity) *EntityContactPointQuery {
	query := &EntityContactPointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entity.Table, entity.FieldID, id),
			sqlgraph.To(entitycontactpoint.Table, entitycontactpoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entity.ContactPointsTable, entity.ContactPointsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnsAccount queries the owns_account edge of a Entity.
func (c *EntityClient) QueryOwnsAccount(e *Entity) *AccountQuery {
	query := &AccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entity.Table, entity.FieldID, id),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, entity.OwnsAccountTable, entity.OwnsAccountPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntityClient) Hooks() []Hook {
	return c.hooks.Entity
}

// EntityAddressClient is a client for the EntityAddress schema.
type EntityAddressClient struct {
	config
}

// NewEntityAddressClient returns a client for the EntityAddress from the given config.
func NewEntityAddressClient(c config) *EntityAddressClient {
	return &EntityAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entityaddress.Hooks(f(g(h())))`.
func (c *EntityAddressClient) Use(hooks ...Hook) {
	c.hooks.EntityAddress = append(c.hooks.EntityAddress, hooks...)
}

// Create returns a create builder for EntityAddress.
func (c *EntityAddressClient) Create() *EntityAddressCreate {
	mutation := newEntityAddressMutation(c.config, OpCreate)
	return &EntityAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntityAddress entities.
func (c *EntityAddressClient) CreateBulk(builders ...*EntityAddressCreate) *EntityAddressCreateBulk {
	return &EntityAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntityAddress.
func (c *EntityAddressClient) Update() *EntityAddressUpdate {
	mutation := newEntityAddressMutation(c.config, OpUpdate)
	return &EntityAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntityAddressClient) UpdateOne(ea *EntityAddress) *EntityAddressUpdateOne {
	mutation := newEntityAddressMutation(c.config, OpUpdateOne, withEntityAddress(ea))
	return &EntityAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntityAddressClient) UpdateOneID(id int) *EntityAddressUpdateOne {
	mutation := newEntityAddressMutation(c.config, OpUpdateOne, withEntityAddressID(id))
	return &EntityAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntityAddress.
func (c *EntityAddressClient) Delete() *EntityAddressDelete {
	mutation := newEntityAddressMutation(c.config, OpDelete)
	return &EntityAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EntityAddressClient) DeleteOne(ea *EntityAddress) *EntityAddressDeleteOne {
	return c.DeleteOneID(ea.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EntityAddressClient) DeleteOneID(id int) *EntityAddressDeleteOne {
	builder := c.Delete().Where(entityaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntityAddressDeleteOne{builder}
}

// Query returns a query builder for EntityAddress.
func (c *EntityAddressClient) Query() *EntityAddressQuery {
	return &EntityAddressQuery{config: c.config}
}

// Get returns a EntityAddress entity by its id.
func (c *EntityAddressClient) Get(ctx context.Context, id int) (*EntityAddress, error) {
	return c.Query().Where(entityaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntityAddressClient) GetX(ctx context.Context, id int) *EntityAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EntityAddressClient) Hooks() []Hook {
	return c.hooks.EntityAddress
}

// EntityContactPointClient is a client for the EntityContactPoint schema.
type EntityContactPointClient struct {
	config
}

// NewEntityContactPointClient returns a client for the EntityContactPoint from the given config.
func NewEntityContactPointClient(c config) *EntityContactPointClient {
	return &EntityContactPointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entitycontactpoint.Hooks(f(g(h())))`.
func (c *EntityContactPointClient) Use(hooks ...Hook) {
	c.hooks.EntityContactPoint = append(c.hooks.EntityContactPoint, hooks...)
}

// Create returns a create builder for EntityContactPoint.
func (c *EntityContactPointClient) Create() *EntityContactPointCreate {
	mutation := newEntityContactPointMutation(c.config, OpCreate)
	return &EntityContactPointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntityContactPoint entities.
func (c *EntityContactPointClient) CreateBulk(builders ...*EntityContactPointCreate) *EntityContactPointCreateBulk {
	return &EntityContactPointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntityContactPoint.
func (c *EntityContactPointClient) Update() *EntityContactPointUpdate {
	mutation := newEntityContactPointMutation(c.config, OpUpdate)
	return &EntityContactPointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntityContactPointClient) UpdateOne(ecp *EntityContactPoint) *EntityContactPointUpdateOne {
	mutation := newEntityContactPointMutation(c.config, OpUpdateOne, withEntityContactPoint(ecp))
	return &EntityContactPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntityContactPointClient) UpdateOneID(id int) *EntityContactPointUpdateOne {
	mutation := newEntityContactPointMutation(c.config, OpUpdateOne, withEntityContactPointID(id))
	return &EntityContactPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntityContactPoint.
func (c *EntityContactPointClient) Delete() *EntityContactPointDelete {
	mutation := newEntityContactPointMutation(c.config, OpDelete)
	return &EntityContactPointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EntityContactPointClient) DeleteOne(ecp *EntityContactPoint) *EntityContactPointDeleteOne {
	return c.DeleteOneID(ecp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EntityContactPointClient) DeleteOneID(id int) *EntityContactPointDeleteOne {
	builder := c.Delete().Where(entitycontactpoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntityContactPointDeleteOne{builder}
}

// Query returns a query builder for EntityContactPoint.
func (c *EntityContactPointClient) Query() *EntityContactPointQuery {
	return &EntityContactPointQuery{config: c.config}
}

// Get returns a EntityContactPoint entity by its id.
func (c *EntityContactPointClient) Get(ctx context.Context, id int) (*EntityContactPoint, error) {
	return c.Query().Where(entitycontactpoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntityContactPointClient) GetX(ctx context.Context, id int) *EntityContactPoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EntityContactPointClient) Hooks() []Hook {
	return c.hooks.EntityContactPoint
}

// EntityTaxInformationClient is a client for the EntityTaxInformation schema.
type EntityTaxInformationClient struct {
	config
}

// NewEntityTaxInformationClient returns a client for the EntityTaxInformation from the given config.
func NewEntityTaxInformationClient(c config) *EntityTaxInformationClient {
	return &EntityTaxInformationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entitytaxinformation.Hooks(f(g(h())))`.
func (c *EntityTaxInformationClient) Use(hooks ...Hook) {
	c.hooks.EntityTaxInformation = append(c.hooks.EntityTaxInformation, hooks...)
}

// Create returns a create builder for EntityTaxInformation.
func (c *EntityTaxInformationClient) Create() *EntityTaxInformationCreate {
	mutation := newEntityTaxInformationMutation(c.config, OpCreate)
	return &EntityTaxInformationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntityTaxInformation entities.
func (c *EntityTaxInformationClient) CreateBulk(builders ...*EntityTaxInformationCreate) *EntityTaxInformationCreateBulk {
	return &EntityTaxInformationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntityTaxInformation.
func (c *EntityTaxInformationClient) Update() *EntityTaxInformationUpdate {
	mutation := newEntityTaxInformationMutation(c.config, OpUpdate)
	return &EntityTaxInformationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntityTaxInformationClient) UpdateOne(eti *EntityTaxInformation) *EntityTaxInformationUpdateOne {
	mutation := newEntityTaxInformationMutation(c.config, OpUpdateOne, withEntityTaxInformation(eti))
	return &EntityTaxInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntityTaxInformationClient) UpdateOneID(id int) *EntityTaxInformationUpdateOne {
	mutation := newEntityTaxInformationMutation(c.config, OpUpdateOne, withEntityTaxInformationID(id))
	return &EntityTaxInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntityTaxInformation.
func (c *EntityTaxInformationClient) Delete() *EntityTaxInformationDelete {
	mutation := newEntityTaxInformationMutation(c.config, OpDelete)
	return &EntityTaxInformationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EntityTaxInformationClient) DeleteOne(eti *EntityTaxInformation) *EntityTaxInformationDeleteOne {
	return c.DeleteOneID(eti.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EntityTaxInformationClient) DeleteOneID(id int) *EntityTaxInformationDeleteOne {
	builder := c.Delete().Where(entitytaxinformation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntityTaxInformationDeleteOne{builder}
}

// Query returns a query builder for EntityTaxInformation.
func (c *EntityTaxInformationClient) Query() *EntityTaxInformationQuery {
	return &EntityTaxInformationQuery{config: c.config}
}

// Get returns a EntityTaxInformation entity by its id.
func (c *EntityTaxInformationClient) Get(ctx context.Context, id int) (*EntityTaxInformation, error) {
	return c.Query().Where(entitytaxinformation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntityTaxInformationClient) GetX(ctx context.Context, id int) *EntityTaxInformation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EntityTaxInformationClient) Hooks() []Hook {
	return c.hooks.EntityTaxInformation
}

// PreferenceClient is a client for the Preference schema.
type PreferenceClient struct {
	config
}

// NewPreferenceClient returns a client for the Preference from the given config.
func NewPreferenceClient(c config) *PreferenceClient {
	return &PreferenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `preference.Hooks(f(g(h())))`.
func (c *PreferenceClient) Use(hooks ...Hook) {
	c.hooks.Preference = append(c.hooks.Preference, hooks...)
}

// Create returns a create builder for Preference.
func (c *PreferenceClient) Create() *PreferenceCreate {
	mutation := newPreferenceMutation(c.config, OpCreate)
	return &PreferenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Preference entities.
func (c *PreferenceClient) CreateBulk(builders ...*PreferenceCreate) *PreferenceCreateBulk {
	return &PreferenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Preference.
func (c *PreferenceClient) Update() *PreferenceUpdate {
	mutation := newPreferenceMutation(c.config, OpUpdate)
	return &PreferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PreferenceClient) UpdateOne(pr *Preference) *PreferenceUpdateOne {
	mutation := newPreferenceMutation(c.config, OpUpdateOne, withPreference(pr))
	return &PreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PreferenceClient) UpdateOneID(id int) *PreferenceUpdateOne {
	mutation := newPreferenceMutation(c.config, OpUpdateOne, withPreferenceID(id))
	return &PreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Preference.
func (c *PreferenceClient) Delete() *PreferenceDelete {
	mutation := newPreferenceMutation(c.config, OpDelete)
	return &PreferenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PreferenceClient) DeleteOne(pr *Preference) *PreferenceDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PreferenceClient) DeleteOneID(id int) *PreferenceDeleteOne {
	builder := c.Delete().Where(preference.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PreferenceDeleteOne{builder}
}

// Query returns a query builder for Preference.
func (c *PreferenceClient) Query() *PreferenceQuery {
	return &PreferenceQuery{config: c.config}
}

// Get returns a Preference entity by its id.
func (c *PreferenceClient) Get(ctx context.Context, id int) (*Preference, error) {
	return c.Query().Where(preference.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PreferenceClient) GetX(ctx context.Context, id int) *Preference {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PreferenceClient) Hooks() []Hook {
	return c.hooks.Preference
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Create returns a create builder for Product.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{config: c.config}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// RoutingNumberClient is a client for the RoutingNumber schema.
type RoutingNumberClient struct {
	config
}

// NewRoutingNumberClient returns a client for the RoutingNumber from the given config.
func NewRoutingNumberClient(c config) *RoutingNumberClient {
	return &RoutingNumberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `routingnumber.Hooks(f(g(h())))`.
func (c *RoutingNumberClient) Use(hooks ...Hook) {
	c.hooks.RoutingNumber = append(c.hooks.RoutingNumber, hooks...)
}

// Create returns a create builder for RoutingNumber.
func (c *RoutingNumberClient) Create() *RoutingNumberCreate {
	mutation := newRoutingNumberMutation(c.config, OpCreate)
	return &RoutingNumberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoutingNumber entities.
func (c *RoutingNumberClient) CreateBulk(builders ...*RoutingNumberCreate) *RoutingNumberCreateBulk {
	return &RoutingNumberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoutingNumber.
func (c *RoutingNumberClient) Update() *RoutingNumberUpdate {
	mutation := newRoutingNumberMutation(c.config, OpUpdate)
	return &RoutingNumberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoutingNumberClient) UpdateOne(rn *RoutingNumber) *RoutingNumberUpdateOne {
	mutation := newRoutingNumberMutation(c.config, OpUpdateOne, withRoutingNumber(rn))
	return &RoutingNumberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoutingNumberClient) UpdateOneID(id int) *RoutingNumberUpdateOne {
	mutation := newRoutingNumberMutation(c.config, OpUpdateOne, withRoutingNumberID(id))
	return &RoutingNumberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoutingNumber.
func (c *RoutingNumberClient) Delete() *RoutingNumberDelete {
	mutation := newRoutingNumberMutation(c.config, OpDelete)
	return &RoutingNumberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoutingNumberClient) DeleteOne(rn *RoutingNumber) *RoutingNumberDeleteOne {
	return c.DeleteOneID(rn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoutingNumberClient) DeleteOneID(id int) *RoutingNumberDeleteOne {
	builder := c.Delete().Where(routingnumber.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoutingNumberDeleteOne{builder}
}

// Query returns a query builder for RoutingNumber.
func (c *RoutingNumberClient) Query() *RoutingNumberQuery {
	return &RoutingNumberQuery{config: c.config}
}

// Get returns a RoutingNumber entity by its id.
func (c *RoutingNumberClient) Get(ctx context.Context, id int) (*RoutingNumber, error) {
	return c.Query().Where(routingnumber.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoutingNumberClient) GetX(ctx context.Context, id int) *RoutingNumber {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RoutingNumberClient) Hooks() []Hook {
	return c.hooks.RoutingNumber
}

// TransactionClient is a client for the Transaction schema.
type TransactionClient struct {
	config
}

// NewTransactionClient returns a client for the Transaction from the given config.
func NewTransactionClient(c config) *TransactionClient {
	return &TransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transaction.Hooks(f(g(h())))`.
func (c *TransactionClient) Use(hooks ...Hook) {
	c.hooks.Transaction = append(c.hooks.Transaction, hooks...)
}

// Create returns a create builder for Transaction.
func (c *TransactionClient) Create() *TransactionCreate {
	mutation := newTransactionMutation(c.config, OpCreate)
	return &TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transaction entities.
func (c *TransactionClient) CreateBulk(builders ...*TransactionCreate) *TransactionCreateBulk {
	return &TransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transaction.
func (c *TransactionClient) Update() *TransactionUpdate {
	mutation := newTransactionMutation(c.config, OpUpdate)
	return &TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionClient) UpdateOne(t *Transaction) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransaction(t))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionClient) UpdateOneID(id uuid.UUID) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransactionID(id))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transaction.
func (c *TransactionClient) Delete() *TransactionDelete {
	mutation := newTransactionMutation(c.config, OpDelete)
	return &TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TransactionClient) DeleteOne(t *Transaction) *TransactionDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TransactionClient) DeleteOneID(id uuid.UUID) *TransactionDeleteOne {
	builder := c.Delete().Where(transaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionDeleteOne{builder}
}

// Query returns a query builder for Transaction.
func (c *TransactionClient) Query() *TransactionQuery {
	return &TransactionQuery{config: c.config}
}

// Get returns a Transaction entity by its id.
func (c *TransactionClient) Get(ctx context.Context, id uuid.UUID) (*Transaction, error) {
	return c.Query().Where(transaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionClient) GetX(ctx context.Context, id uuid.UUID) *Transaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImages queries the images edge of a Transaction.
func (c *TransactionClient) QueryImages(t *Transaction) *BinaryItemQuery {
	query := &BinaryItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(binaryitem.Table, binaryitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, transaction.ImagesTable, transaction.ImagesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccount queries the account edge of a Transaction.
func (c *TransactionClient) QueryAccount(t *Transaction) *AccountQuery {
	query := &AccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transaction.AccountTable, transaction.AccountColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionClient) Hooks() []Hook {
	return c.hooks.Transaction
}
