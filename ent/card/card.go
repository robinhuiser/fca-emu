// Code generated by entc, DO NOT EDIT.

package card

import (
	"fmt"
)

const (
	// Label holds the string label denoting the card type in the database.
	Label = "card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldStartDate holds the string denoting the startdate field in the database.
	FieldStartDate = "start_date"
	// FieldExpiryDate holds the string denoting the expirydate field in the database.
	FieldExpiryDate = "expiry_date"
	// FieldHolderName holds the string denoting the holdername field in the database.
	FieldHolderName = "holder_name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// EdgeNetwork holds the string denoting the network edge name in mutations.
	EdgeNetwork = "network"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// Table holds the table name of the card in the database.
	Table = "cards"
	// NetworkTable is the table the holds the network relation/edge.
	NetworkTable = "cards"
	// NetworkInverseTable is the table name for the CardNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "cardnetwork" package.
	NetworkInverseTable = "card_networks"
	// NetworkColumn is the table column denoting the network relation/edge.
	NetworkColumn = "card_network"
	// AccountTable is the table the holds the account relation/edge.
	AccountTable = "cards"
	// AccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountInverseTable = "accounts"
	// AccountColumn is the table column denoting the account relation/edge.
	AccountColumn = "account_cards"
)

// Columns holds all SQL columns for card fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldNumber,
	FieldStartDate,
	FieldExpiryDate,
	FieldHolderName,
	FieldStatus,
	FieldURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cards"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"account_cards",
	"card_network",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeCREDIT  Type = "CREDIT"
	TypeDEBIT   Type = "DEBIT"
	TypeLOYALTY Type = "LOYALTY"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeCREDIT, TypeDEBIT, TypeLOYALTY:
		return nil
	default:
		return fmt.Errorf("card: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusLOCKED      Status = "LOCKED"
	StatusOPERATIONAL Status = "OPERATIONAL"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusLOCKED, StatusOPERATIONAL:
		return nil
	default:
		return fmt.Errorf("card: invalid enum value for status field: %q", s)
	}
}
