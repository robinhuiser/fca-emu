// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/robinhuiser/fca-emu/ent/routingnumber"
)

// RoutingNumber is the model entity for the RoutingNumber schema.
type RoutingNumber struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Number holds the value of the "number" field.
	Number string `json:"number,omitempty"`
	// Type holds the value of the "type" field.
	Type                   routingnumber.Type `json:"type,omitempty"`
	account_routingnumbers *uuid.UUID
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoutingNumber) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case routingnumber.FieldID:
			values[i] = &sql.NullInt64{}
		case routingnumber.FieldNumber, routingnumber.FieldType:
			values[i] = &sql.NullString{}
		case routingnumber.ForeignKeys[0]: // account_routingnumbers
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type RoutingNumber", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoutingNumber fields.
func (rn *RoutingNumber) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case routingnumber.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rn.ID = int(value.Int64)
		case routingnumber.FieldNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				rn.Number = value.String
			}
		case routingnumber.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				rn.Type = routingnumber.Type(value.String)
			}
		case routingnumber.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field account_routingnumbers", values[i])
			} else if value != nil {
				rn.account_routingnumbers = value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RoutingNumber.
// Note that you need to call RoutingNumber.Unwrap() before calling this method if this RoutingNumber
// was returned from a transaction, and the transaction was committed or rolled back.
func (rn *RoutingNumber) Update() *RoutingNumberUpdateOne {
	return (&RoutingNumberClient{config: rn.config}).UpdateOne(rn)
}

// Unwrap unwraps the RoutingNumber entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rn *RoutingNumber) Unwrap() *RoutingNumber {
	tx, ok := rn.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoutingNumber is not a transactional entity")
	}
	rn.config.driver = tx.drv
	return rn
}

// String implements the fmt.Stringer.
func (rn *RoutingNumber) String() string {
	var builder strings.Builder
	builder.WriteString("RoutingNumber(")
	builder.WriteString(fmt.Sprintf("id=%v", rn.ID))
	builder.WriteString(", number=")
	builder.WriteString(rn.Number)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", rn.Type))
	builder.WriteByte(')')
	return builder.String()
}

// RoutingNumbers is a parsable slice of RoutingNumber.
type RoutingNumbers []*RoutingNumber

func (rn RoutingNumbers) config(cfg config) {
	for _i := range rn {
		rn[_i].config = cfg
	}
}
