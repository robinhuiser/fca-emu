// Code generated by entc, DO NOT EDIT.

package bank

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/robinhuiser/finite-mock-server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// BankCode applies equality check predicate on the "bankCode" field. It's identical to BankCodeEQ.
func BankCode(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankCode), v))
	})
}

// BankName applies equality check predicate on the "bankName" field. It's identical to BankNameEQ.
func BankName(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankName), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// Swift applies equality check predicate on the "swift" field. It's identical to SwiftEQ.
func Swift(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSwift), v))
	})
}

// BankCodeEQ applies the EQ predicate on the "bankCode" field.
func BankCodeEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankCode), v))
	})
}

// BankCodeNEQ applies the NEQ predicate on the "bankCode" field.
func BankCodeNEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankCode), v))
	})
}

// BankCodeIn applies the In predicate on the "bankCode" field.
func BankCodeIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankCode), v...))
	})
}

// BankCodeNotIn applies the NotIn predicate on the "bankCode" field.
func BankCodeNotIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankCode), v...))
	})
}

// BankCodeGT applies the GT predicate on the "bankCode" field.
func BankCodeGT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankCode), v))
	})
}

// BankCodeGTE applies the GTE predicate on the "bankCode" field.
func BankCodeGTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankCode), v))
	})
}

// BankCodeLT applies the LT predicate on the "bankCode" field.
func BankCodeLT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankCode), v))
	})
}

// BankCodeLTE applies the LTE predicate on the "bankCode" field.
func BankCodeLTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankCode), v))
	})
}

// BankCodeContains applies the Contains predicate on the "bankCode" field.
func BankCodeContains(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankCode), v))
	})
}

// BankCodeHasPrefix applies the HasPrefix predicate on the "bankCode" field.
func BankCodeHasPrefix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankCode), v))
	})
}

// BankCodeHasSuffix applies the HasSuffix predicate on the "bankCode" field.
func BankCodeHasSuffix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankCode), v))
	})
}

// BankCodeEqualFold applies the EqualFold predicate on the "bankCode" field.
func BankCodeEqualFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankCode), v))
	})
}

// BankCodeContainsFold applies the ContainsFold predicate on the "bankCode" field.
func BankCodeContainsFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankCode), v))
	})
}

// BankNameEQ applies the EQ predicate on the "bankName" field.
func BankNameEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankName), v))
	})
}

// BankNameNEQ applies the NEQ predicate on the "bankName" field.
func BankNameNEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankName), v))
	})
}

// BankNameIn applies the In predicate on the "bankName" field.
func BankNameIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankName), v...))
	})
}

// BankNameNotIn applies the NotIn predicate on the "bankName" field.
func BankNameNotIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankName), v...))
	})
}

// BankNameGT applies the GT predicate on the "bankName" field.
func BankNameGT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankName), v))
	})
}

// BankNameGTE applies the GTE predicate on the "bankName" field.
func BankNameGTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankName), v))
	})
}

// BankNameLT applies the LT predicate on the "bankName" field.
func BankNameLT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankName), v))
	})
}

// BankNameLTE applies the LTE predicate on the "bankName" field.
func BankNameLTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankName), v))
	})
}

// BankNameContains applies the Contains predicate on the "bankName" field.
func BankNameContains(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankName), v))
	})
}

// BankNameHasPrefix applies the HasPrefix predicate on the "bankName" field.
func BankNameHasPrefix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankName), v))
	})
}

// BankNameHasSuffix applies the HasSuffix predicate on the "bankName" field.
func BankNameHasSuffix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankName), v))
	})
}

// BankNameEqualFold applies the EqualFold predicate on the "bankName" field.
func BankNameEqualFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankName), v))
	})
}

// BankNameContainsFold applies the ContainsFold predicate on the "bankName" field.
func BankNameContainsFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankName), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// SwiftEQ applies the EQ predicate on the "swift" field.
func SwiftEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSwift), v))
	})
}

// SwiftNEQ applies the NEQ predicate on the "swift" field.
func SwiftNEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSwift), v))
	})
}

// SwiftIn applies the In predicate on the "swift" field.
func SwiftIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSwift), v...))
	})
}

// SwiftNotIn applies the NotIn predicate on the "swift" field.
func SwiftNotIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSwift), v...))
	})
}

// SwiftGT applies the GT predicate on the "swift" field.
func SwiftGT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSwift), v))
	})
}

// SwiftGTE applies the GTE predicate on the "swift" field.
func SwiftGTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSwift), v))
	})
}

// SwiftLT applies the LT predicate on the "swift" field.
func SwiftLT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSwift), v))
	})
}

// SwiftLTE applies the LTE predicate on the "swift" field.
func SwiftLTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSwift), v))
	})
}

// SwiftContains applies the Contains predicate on the "swift" field.
func SwiftContains(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSwift), v))
	})
}

// SwiftHasPrefix applies the HasPrefix predicate on the "swift" field.
func SwiftHasPrefix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSwift), v))
	})
}

// SwiftHasSuffix applies the HasSuffix predicate on the "swift" field.
func SwiftHasSuffix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSwift), v))
	})
}

// SwiftEqualFold applies the EqualFold predicate on the "swift" field.
func SwiftEqualFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSwift), v))
	})
}

// SwiftContainsFold applies the ContainsFold predicate on the "swift" field.
func SwiftContainsFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSwift), v))
	})
}

// HasBranches applies the HasEdge predicate on the "branches" edge.
func HasBranches() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BranchesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BranchesTable, BranchesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBranchesWith applies the HasEdge predicate on the "branches" edge with a given conditions (other predicates).
func HasBranchesWith(preds ...predicate.Branch) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BranchesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BranchesTable, BranchesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bank) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bank) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bank) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		p(s.Not())
	})
}
