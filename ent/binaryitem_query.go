// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/robinhuiser/fca-emu/ent/binaryitem"
	"github.com/robinhuiser/fca-emu/ent/predicate"
	"github.com/robinhuiser/fca-emu/ent/transaction"
)

// BinaryItemQuery is the builder for querying BinaryItem entities.
type BinaryItemQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.BinaryItem
	// eager-loading edges.
	withTransaction *TransactionQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BinaryItemQuery builder.
func (biq *BinaryItemQuery) Where(ps ...predicate.BinaryItem) *BinaryItemQuery {
	biq.predicates = append(biq.predicates, ps...)
	return biq
}

// Limit adds a limit step to the query.
func (biq *BinaryItemQuery) Limit(limit int) *BinaryItemQuery {
	biq.limit = &limit
	return biq
}

// Offset adds an offset step to the query.
func (biq *BinaryItemQuery) Offset(offset int) *BinaryItemQuery {
	biq.offset = &offset
	return biq
}

// Order adds an order step to the query.
func (biq *BinaryItemQuery) Order(o ...OrderFunc) *BinaryItemQuery {
	biq.order = append(biq.order, o...)
	return biq
}

// QueryTransaction chains the current query on the "transaction" edge.
func (biq *BinaryItemQuery) QueryTransaction() *TransactionQuery {
	query := &TransactionQuery{config: biq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := biq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := biq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(binaryitem.Table, binaryitem.FieldID, selector),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, binaryitem.TransactionTable, binaryitem.TransactionColumn),
		)
		fromU = sqlgraph.SetNeighbors(biq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BinaryItem entity from the query.
// Returns a *NotFoundError when no BinaryItem was found.
func (biq *BinaryItemQuery) First(ctx context.Context) (*BinaryItem, error) {
	nodes, err := biq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{binaryitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (biq *BinaryItemQuery) FirstX(ctx context.Context) *BinaryItem {
	node, err := biq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BinaryItem ID from the query.
// Returns a *NotFoundError when no BinaryItem ID was found.
func (biq *BinaryItemQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = biq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{binaryitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (biq *BinaryItemQuery) FirstIDX(ctx context.Context) int {
	id, err := biq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BinaryItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one BinaryItem entity is not found.
// Returns a *NotFoundError when no BinaryItem entities are found.
func (biq *BinaryItemQuery) Only(ctx context.Context) (*BinaryItem, error) {
	nodes, err := biq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{binaryitem.Label}
	default:
		return nil, &NotSingularError{binaryitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (biq *BinaryItemQuery) OnlyX(ctx context.Context) *BinaryItem {
	node, err := biq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BinaryItem ID in the query.
// Returns a *NotSingularError when exactly one BinaryItem ID is not found.
// Returns a *NotFoundError when no entities are found.
func (biq *BinaryItemQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = biq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{binaryitem.Label}
	default:
		err = &NotSingularError{binaryitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (biq *BinaryItemQuery) OnlyIDX(ctx context.Context) int {
	id, err := biq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BinaryItems.
func (biq *BinaryItemQuery) All(ctx context.Context) ([]*BinaryItem, error) {
	if err := biq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return biq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (biq *BinaryItemQuery) AllX(ctx context.Context) []*BinaryItem {
	nodes, err := biq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BinaryItem IDs.
func (biq *BinaryItemQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := biq.Select(binaryitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (biq *BinaryItemQuery) IDsX(ctx context.Context) []int {
	ids, err := biq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (biq *BinaryItemQuery) Count(ctx context.Context) (int, error) {
	if err := biq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return biq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (biq *BinaryItemQuery) CountX(ctx context.Context) int {
	count, err := biq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (biq *BinaryItemQuery) Exist(ctx context.Context) (bool, error) {
	if err := biq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return biq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (biq *BinaryItemQuery) ExistX(ctx context.Context) bool {
	exist, err := biq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BinaryItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (biq *BinaryItemQuery) Clone() *BinaryItemQuery {
	if biq == nil {
		return nil
	}
	return &BinaryItemQuery{
		config:          biq.config,
		limit:           biq.limit,
		offset:          biq.offset,
		order:           append([]OrderFunc{}, biq.order...),
		predicates:      append([]predicate.BinaryItem{}, biq.predicates...),
		withTransaction: biq.withTransaction.Clone(),
		// clone intermediate query.
		sql:  biq.sql.Clone(),
		path: biq.path,
	}
}

// WithTransaction tells the query-builder to eager-load the nodes that are connected to
// the "transaction" edge. The optional arguments are used to configure the query builder of the edge.
func (biq *BinaryItemQuery) WithTransaction(opts ...func(*TransactionQuery)) *BinaryItemQuery {
	query := &TransactionQuery{config: biq.config}
	for _, opt := range opts {
		opt(query)
	}
	biq.withTransaction = query
	return biq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Format string `json:"format,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BinaryItem.Query().
//		GroupBy(binaryitem.FieldFormat).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (biq *BinaryItemQuery) GroupBy(field string, fields ...string) *BinaryItemGroupBy {
	group := &BinaryItemGroupBy{config: biq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := biq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return biq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Format string `json:"format,omitempty"`
//	}
//
//	client.BinaryItem.Query().
//		Select(binaryitem.FieldFormat).
//		Scan(ctx, &v)
//
func (biq *BinaryItemQuery) Select(field string, fields ...string) *BinaryItemSelect {
	biq.fields = append([]string{field}, fields...)
	return &BinaryItemSelect{BinaryItemQuery: biq}
}

func (biq *BinaryItemQuery) prepareQuery(ctx context.Context) error {
	for _, f := range biq.fields {
		if !binaryitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if biq.path != nil {
		prev, err := biq.path(ctx)
		if err != nil {
			return err
		}
		biq.sql = prev
	}
	return nil
}

func (biq *BinaryItemQuery) sqlAll(ctx context.Context) ([]*BinaryItem, error) {
	var (
		nodes       = []*BinaryItem{}
		withFKs     = biq.withFKs
		_spec       = biq.querySpec()
		loadedTypes = [1]bool{
			biq.withTransaction != nil,
		}
	)
	if biq.withTransaction != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, binaryitem.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &BinaryItem{config: biq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, biq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := biq.withTransaction; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*BinaryItem)
		for i := range nodes {
			fk := nodes[i].transaction_images
			if fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(transaction.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "transaction_images" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Transaction = n
			}
		}
	}

	return nodes, nil
}

func (biq *BinaryItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := biq.querySpec()
	return sqlgraph.CountNodes(ctx, biq.driver, _spec)
}

func (biq *BinaryItemQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := biq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (biq *BinaryItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   binaryitem.Table,
			Columns: binaryitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: binaryitem.FieldID,
			},
		},
		From:   biq.sql,
		Unique: true,
	}
	if fields := biq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, binaryitem.FieldID)
		for i := range fields {
			if fields[i] != binaryitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := biq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := biq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := biq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := biq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, binaryitem.ValidColumn)
			}
		}
	}
	return _spec
}

func (biq *BinaryItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(biq.driver.Dialect())
	t1 := builder.Table(binaryitem.Table)
	selector := builder.Select(t1.Columns(binaryitem.Columns...)...).From(t1)
	if biq.sql != nil {
		selector = biq.sql
		selector.Select(selector.Columns(binaryitem.Columns...)...)
	}
	for _, p := range biq.predicates {
		p(selector)
	}
	for _, p := range biq.order {
		p(selector, binaryitem.ValidColumn)
	}
	if offset := biq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := biq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BinaryItemGroupBy is the group-by builder for BinaryItem entities.
type BinaryItemGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bigb *BinaryItemGroupBy) Aggregate(fns ...AggregateFunc) *BinaryItemGroupBy {
	bigb.fns = append(bigb.fns, fns...)
	return bigb
}

// Scan applies the group-by query and scans the result into the given value.
func (bigb *BinaryItemGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := bigb.path(ctx)
	if err != nil {
		return err
	}
	bigb.sql = query
	return bigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bigb *BinaryItemGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := bigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (bigb *BinaryItemGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(bigb.fields) > 1 {
		return nil, errors.New("ent: BinaryItemGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := bigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bigb *BinaryItemGroupBy) StringsX(ctx context.Context) []string {
	v, err := bigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bigb *BinaryItemGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{binaryitem.Label}
	default:
		err = fmt.Errorf("ent: BinaryItemGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bigb *BinaryItemGroupBy) StringX(ctx context.Context) string {
	v, err := bigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (bigb *BinaryItemGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(bigb.fields) > 1 {
		return nil, errors.New("ent: BinaryItemGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := bigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bigb *BinaryItemGroupBy) IntsX(ctx context.Context) []int {
	v, err := bigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bigb *BinaryItemGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{binaryitem.Label}
	default:
		err = fmt.Errorf("ent: BinaryItemGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bigb *BinaryItemGroupBy) IntX(ctx context.Context) int {
	v, err := bigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (bigb *BinaryItemGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(bigb.fields) > 1 {
		return nil, errors.New("ent: BinaryItemGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := bigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bigb *BinaryItemGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := bigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bigb *BinaryItemGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{binaryitem.Label}
	default:
		err = fmt.Errorf("ent: BinaryItemGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bigb *BinaryItemGroupBy) Float64X(ctx context.Context) float64 {
	v, err := bigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (bigb *BinaryItemGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(bigb.fields) > 1 {
		return nil, errors.New("ent: BinaryItemGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := bigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bigb *BinaryItemGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := bigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (bigb *BinaryItemGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{binaryitem.Label}
	default:
		err = fmt.Errorf("ent: BinaryItemGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bigb *BinaryItemGroupBy) BoolX(ctx context.Context) bool {
	v, err := bigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bigb *BinaryItemGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range bigb.fields {
		if !binaryitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := bigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bigb *BinaryItemGroupBy) sqlQuery() *sql.Selector {
	selector := bigb.sql
	columns := make([]string, 0, len(bigb.fields)+len(bigb.fns))
	columns = append(columns, bigb.fields...)
	for _, fn := range bigb.fns {
		columns = append(columns, fn(selector, binaryitem.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(bigb.fields...)
}

// BinaryItemSelect is the builder for selecting fields of BinaryItem entities.
type BinaryItemSelect struct {
	*BinaryItemQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (bis *BinaryItemSelect) Scan(ctx context.Context, v interface{}) error {
	if err := bis.prepareQuery(ctx); err != nil {
		return err
	}
	bis.sql = bis.BinaryItemQuery.sqlQuery(ctx)
	return bis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bis *BinaryItemSelect) ScanX(ctx context.Context, v interface{}) {
	if err := bis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (bis *BinaryItemSelect) Strings(ctx context.Context) ([]string, error) {
	if len(bis.fields) > 1 {
		return nil, errors.New("ent: BinaryItemSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := bis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bis *BinaryItemSelect) StringsX(ctx context.Context) []string {
	v, err := bis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (bis *BinaryItemSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{binaryitem.Label}
	default:
		err = fmt.Errorf("ent: BinaryItemSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bis *BinaryItemSelect) StringX(ctx context.Context) string {
	v, err := bis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (bis *BinaryItemSelect) Ints(ctx context.Context) ([]int, error) {
	if len(bis.fields) > 1 {
		return nil, errors.New("ent: BinaryItemSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := bis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bis *BinaryItemSelect) IntsX(ctx context.Context) []int {
	v, err := bis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (bis *BinaryItemSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{binaryitem.Label}
	default:
		err = fmt.Errorf("ent: BinaryItemSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bis *BinaryItemSelect) IntX(ctx context.Context) int {
	v, err := bis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (bis *BinaryItemSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(bis.fields) > 1 {
		return nil, errors.New("ent: BinaryItemSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := bis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bis *BinaryItemSelect) Float64sX(ctx context.Context) []float64 {
	v, err := bis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (bis *BinaryItemSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{binaryitem.Label}
	default:
		err = fmt.Errorf("ent: BinaryItemSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bis *BinaryItemSelect) Float64X(ctx context.Context) float64 {
	v, err := bis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (bis *BinaryItemSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(bis.fields) > 1 {
		return nil, errors.New("ent: BinaryItemSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := bis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bis *BinaryItemSelect) BoolsX(ctx context.Context) []bool {
	v, err := bis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (bis *BinaryItemSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{binaryitem.Label}
	default:
		err = fmt.Errorf("ent: BinaryItemSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bis *BinaryItemSelect) BoolX(ctx context.Context) bool {
	v, err := bis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bis *BinaryItemSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := bis.sqlQuery().Query()
	if err := bis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bis *BinaryItemSelect) sqlQuery() sql.Querier {
	selector := bis.sql
	selector.Select(selector.Columns(bis.fields...)...)
	return selector
}
