// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/robinhuiser/fca-emu/ent/binaryitem"
	"github.com/robinhuiser/fca-emu/ent/transaction"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
}

// SetSequenceInDay sets the "sequenceInDay" field.
func (tc *TransactionCreate) SetSequenceInDay(i int) *TransactionCreate {
	tc.mutation.SetSequenceInDay(i)
	return tc
}

// SetNillableSequenceInDay sets the "sequenceInDay" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableSequenceInDay(i *int) *TransactionCreate {
	if i != nil {
		tc.SetSequenceInDay(*i)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TransactionCreate) SetStatus(t transaction.Status) *TransactionCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetExecutedAmount sets the "executedAmount" field.
func (tc *TransactionCreate) SetExecutedAmount(f float64) *TransactionCreate {
	tc.mutation.SetExecutedAmount(f)
	return tc
}

// SetExecutedCurrencyCode sets the "executedCurrencyCode" field.
func (tc *TransactionCreate) SetExecutedCurrencyCode(s string) *TransactionCreate {
	tc.mutation.SetExecutedCurrencyCode(s)
	return tc
}

// SetExchangeRate sets the "exchangeRate" field.
func (tc *TransactionCreate) SetExchangeRate(f float64) *TransactionCreate {
	tc.mutation.SetExchangeRate(f)
	return tc
}

// SetNillableExchangeRate sets the "exchangeRate" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableExchangeRate(f *float64) *TransactionCreate {
	if f != nil {
		tc.SetExchangeRate(*f)
	}
	return tc
}

// SetOriginatingAmount sets the "originatingAmount" field.
func (tc *TransactionCreate) SetOriginatingAmount(f float64) *TransactionCreate {
	tc.mutation.SetOriginatingAmount(f)
	return tc
}

// SetNillableOriginatingAmount sets the "originatingAmount" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableOriginatingAmount(f *float64) *TransactionCreate {
	if f != nil {
		tc.SetOriginatingAmount(*f)
	}
	return tc
}

// SetOriginatingCurrencyCode sets the "originatingCurrencyCode" field.
func (tc *TransactionCreate) SetOriginatingCurrencyCode(s string) *TransactionCreate {
	tc.mutation.SetOriginatingCurrencyCode(s)
	return tc
}

// SetNillableOriginatingCurrencyCode sets the "originatingCurrencyCode" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableOriginatingCurrencyCode(s *string) *TransactionCreate {
	if s != nil {
		tc.SetOriginatingCurrencyCode(*s)
	}
	return tc
}

// SetDirection sets the "direction" field.
func (tc *TransactionCreate) SetDirection(t transaction.Direction) *TransactionCreate {
	tc.mutation.SetDirection(t)
	return tc
}

// SetRunningBalance sets the "runningBalance" field.
func (tc *TransactionCreate) SetRunningBalance(f float64) *TransactionCreate {
	tc.mutation.SetRunningBalance(f)
	return tc
}

// SetCreatedDate sets the "createdDate" field.
func (tc *TransactionCreate) SetCreatedDate(t time.Time) *TransactionCreate {
	tc.mutation.SetCreatedDate(t)
	return tc
}

// SetPostedDate sets the "postedDate" field.
func (tc *TransactionCreate) SetPostedDate(t time.Time) *TransactionCreate {
	tc.mutation.SetPostedDate(t)
	return tc
}

// SetNillablePostedDate sets the "postedDate" field if the given value is not nil.
func (tc *TransactionCreate) SetNillablePostedDate(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetPostedDate(*t)
	}
	return tc
}

// SetExecutedDate sets the "executedDate" field.
func (tc *TransactionCreate) SetExecutedDate(t time.Time) *TransactionCreate {
	tc.mutation.SetExecutedDate(t)
	return tc
}

// SetNillableExecutedDate sets the "executedDate" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableExecutedDate(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetExecutedDate(*t)
	}
	return tc
}

// SetUpdatedDate sets the "updatedDate" field.
func (tc *TransactionCreate) SetUpdatedDate(t time.Time) *TransactionCreate {
	tc.mutation.SetUpdatedDate(t)
	return tc
}

// SetNillableUpdatedDate sets the "updatedDate" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableUpdatedDate(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetUpdatedDate(*t)
	}
	return tc
}

// SetDescription sets the "description" field.
func (tc *TransactionCreate) SetDescription(s string) *TransactionCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableDescription(s *string) *TransactionCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetMemo sets the "memo" field.
func (tc *TransactionCreate) SetMemo(s string) *TransactionCreate {
	tc.mutation.SetMemo(s)
	return tc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableMemo(s *string) *TransactionCreate {
	if s != nil {
		tc.SetMemo(*s)
	}
	return tc
}

// SetGroup sets the "group" field.
func (tc *TransactionCreate) SetGroup(s string) *TransactionCreate {
	tc.mutation.SetGroup(s)
	return tc
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableGroup(s *string) *TransactionCreate {
	if s != nil {
		tc.SetGroup(*s)
	}
	return tc
}

// SetType sets the "type" field.
func (tc *TransactionCreate) SetType(s string) *TransactionCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableType(s *string) *TransactionCreate {
	if s != nil {
		tc.SetType(*s)
	}
	return tc
}

// SetMainCategory sets the "mainCategory" field.
func (tc *TransactionCreate) SetMainCategory(s string) *TransactionCreate {
	tc.mutation.SetMainCategory(s)
	return tc
}

// SetNillableMainCategory sets the "mainCategory" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableMainCategory(s *string) *TransactionCreate {
	if s != nil {
		tc.SetMainCategory(*s)
	}
	return tc
}

// SetSubCategory sets the "subCategory" field.
func (tc *TransactionCreate) SetSubCategory(s string) *TransactionCreate {
	tc.mutation.SetSubCategory(s)
	return tc
}

// SetNillableSubCategory sets the "subCategory" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableSubCategory(s *string) *TransactionCreate {
	if s != nil {
		tc.SetSubCategory(*s)
	}
	return tc
}

// SetCheckNumber sets the "checkNumber" field.
func (tc *TransactionCreate) SetCheckNumber(s string) *TransactionCreate {
	tc.mutation.SetCheckNumber(s)
	return tc
}

// SetNillableCheckNumber sets the "checkNumber" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableCheckNumber(s *string) *TransactionCreate {
	if s != nil {
		tc.SetCheckNumber(*s)
	}
	return tc
}

// SetLatitude sets the "latitude" field.
func (tc *TransactionCreate) SetLatitude(f float64) *TransactionCreate {
	tc.mutation.SetLatitude(f)
	return tc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableLatitude(f *float64) *TransactionCreate {
	if f != nil {
		tc.SetLatitude(*f)
	}
	return tc
}

// SetLongitude sets the "longitude" field.
func (tc *TransactionCreate) SetLongitude(f float64) *TransactionCreate {
	tc.mutation.SetLongitude(f)
	return tc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableLongitude(f *float64) *TransactionCreate {
	if f != nil {
		tc.SetLongitude(*f)
	}
	return tc
}

// SetMerchantCode sets the "merchantCode" field.
func (tc *TransactionCreate) SetMerchantCode(s string) *TransactionCreate {
	tc.mutation.SetMerchantCode(s)
	return tc
}

// SetNillableMerchantCode sets the "merchantCode" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableMerchantCode(s *string) *TransactionCreate {
	if s != nil {
		tc.SetMerchantCode(*s)
	}
	return tc
}

// SetReversal sets the "reversal" field.
func (tc *TransactionCreate) SetReversal(b bool) *TransactionCreate {
	tc.mutation.SetReversal(b)
	return tc
}

// SetReversalFor sets the "reversalFor" field.
func (tc *TransactionCreate) SetReversalFor(s string) *TransactionCreate {
	tc.mutation.SetReversalFor(s)
	return tc
}

// SetNillableReversalFor sets the "reversalFor" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableReversalFor(s *string) *TransactionCreate {
	if s != nil {
		tc.SetReversalFor(*s)
	}
	return tc
}

// SetReversed sets the "reversed" field.
func (tc *TransactionCreate) SetReversed(b bool) *TransactionCreate {
	tc.mutation.SetReversed(b)
	return tc
}

// SetReversedBy sets the "reversedBy" field.
func (tc *TransactionCreate) SetReversedBy(s string) *TransactionCreate {
	tc.mutation.SetReversedBy(s)
	return tc
}

// SetNillableReversedBy sets the "reversedBy" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableReversedBy(s *string) *TransactionCreate {
	if s != nil {
		tc.SetReversedBy(*s)
	}
	return tc
}

// SetURL sets the "url" field.
func (tc *TransactionCreate) SetURL(s string) *TransactionCreate {
	tc.mutation.SetURL(s)
	return tc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableURL(s *string) *TransactionCreate {
	if s != nil {
		tc.SetURL(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TransactionCreate) SetID(u uuid.UUID) *TransactionCreate {
	tc.mutation.SetID(u)
	return tc
}

// AddImageIDs adds the "images" edge to the BinaryItem entity by IDs.
func (tc *TransactionCreate) AddImageIDs(ids ...int) *TransactionCreate {
	tc.mutation.AddImageIDs(ids...)
	return tc
}

// AddImages adds the "images" edges to the BinaryItem entity.
func (tc *TransactionCreate) AddImages(b ...*BinaryItem) *TransactionCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tc.AddImageIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tc *TransactionCreate) Mutation() *TransactionMutation {
	return tc.mutation
}

// Save creates the Transaction in the database.
func (tc *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	var (
		err  error
		node *Transaction
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tc *TransactionCreate) defaults() {
	if _, ok := tc.mutation.ID(); !ok {
		v := transaction.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionCreate) check() error {
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := transaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := tc.mutation.ExecutedAmount(); !ok {
		return &ValidationError{Name: "executedAmount", err: errors.New("ent: missing required field \"executedAmount\"")}
	}
	if _, ok := tc.mutation.ExecutedCurrencyCode(); !ok {
		return &ValidationError{Name: "executedCurrencyCode", err: errors.New("ent: missing required field \"executedCurrencyCode\"")}
	}
	if v, ok := tc.mutation.ExecutedCurrencyCode(); ok {
		if err := transaction.ExecutedCurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "executedCurrencyCode", err: fmt.Errorf("ent: validator failed for field \"executedCurrencyCode\": %w", err)}
		}
	}
	if v, ok := tc.mutation.OriginatingCurrencyCode(); ok {
		if err := transaction.OriginatingCurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "originatingCurrencyCode", err: fmt.Errorf("ent: validator failed for field \"originatingCurrencyCode\": %w", err)}
		}
	}
	if _, ok := tc.mutation.Direction(); !ok {
		return &ValidationError{Name: "direction", err: errors.New("ent: missing required field \"direction\"")}
	}
	if v, ok := tc.mutation.Direction(); ok {
		if err := transaction.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf("ent: validator failed for field \"direction\": %w", err)}
		}
	}
	if _, ok := tc.mutation.RunningBalance(); !ok {
		return &ValidationError{Name: "runningBalance", err: errors.New("ent: missing required field \"runningBalance\"")}
	}
	if _, ok := tc.mutation.CreatedDate(); !ok {
		return &ValidationError{Name: "createdDate", err: errors.New("ent: missing required field \"createdDate\"")}
	}
	if _, ok := tc.mutation.Reversal(); !ok {
		return &ValidationError{Name: "reversal", err: errors.New("ent: missing required field \"reversal\"")}
	}
	if _, ok := tc.mutation.Reversed(); !ok {
		return &ValidationError{Name: "reversed", err: errors.New("ent: missing required field \"reversed\"")}
	}
	return nil
}

func (tc *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (tc *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: transaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: transaction.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.SequenceInDay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldSequenceInDay,
		})
		_node.SequenceInDay = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: transaction.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := tc.mutation.ExecutedAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldExecutedAmount,
		})
		_node.ExecutedAmount = value
	}
	if value, ok := tc.mutation.ExecutedCurrencyCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldExecutedCurrencyCode,
		})
		_node.ExecutedCurrencyCode = value
	}
	if value, ok := tc.mutation.ExchangeRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldExchangeRate,
		})
		_node.ExchangeRate = value
	}
	if value, ok := tc.mutation.OriginatingAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldOriginatingAmount,
		})
		_node.OriginatingAmount = value
	}
	if value, ok := tc.mutation.OriginatingCurrencyCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldOriginatingCurrencyCode,
		})
		_node.OriginatingCurrencyCode = value
	}
	if value, ok := tc.mutation.Direction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: transaction.FieldDirection,
		})
		_node.Direction = value
	}
	if value, ok := tc.mutation.RunningBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldRunningBalance,
		})
		_node.RunningBalance = value
	}
	if value, ok := tc.mutation.CreatedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldCreatedDate,
		})
		_node.CreatedDate = value
	}
	if value, ok := tc.mutation.PostedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldPostedDate,
		})
		_node.PostedDate = value
	}
	if value, ok := tc.mutation.ExecutedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldExecutedDate,
		})
		_node.ExecutedDate = value
	}
	if value, ok := tc.mutation.UpdatedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldUpdatedDate,
		})
		_node.UpdatedDate = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := tc.mutation.Memo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldMemo,
		})
		_node.Memo = value
	}
	if value, ok := tc.mutation.Group(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldGroup,
		})
		_node.Group = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldType,
		})
		_node.Type = value
	}
	if value, ok := tc.mutation.MainCategory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldMainCategory,
		})
		_node.MainCategory = value
	}
	if value, ok := tc.mutation.SubCategory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldSubCategory,
		})
		_node.SubCategory = value
	}
	if value, ok := tc.mutation.CheckNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldCheckNumber,
		})
		_node.CheckNumber = value
	}
	if value, ok := tc.mutation.Latitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldLatitude,
		})
		_node.Latitude = value
	}
	if value, ok := tc.mutation.Longitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldLongitude,
		})
		_node.Longitude = value
	}
	if value, ok := tc.mutation.MerchantCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldMerchantCode,
		})
		_node.MerchantCode = value
	}
	if value, ok := tc.mutation.Reversal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: transaction.FieldReversal,
		})
		_node.Reversal = value
	}
	if value, ok := tc.mutation.ReversalFor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldReversalFor,
		})
		_node.ReversalFor = value
	}
	if value, ok := tc.mutation.Reversed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: transaction.FieldReversed,
		})
		_node.Reversed = value
	}
	if value, ok := tc.mutation.ReversedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldReversedBy,
		})
		_node.ReversedBy = value
	}
	if value, ok := tc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldURL,
		})
		_node.URL = value
	}
	if nodes := tc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.ImagesTable,
			Columns: []string{transaction.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: binaryitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	builders []*TransactionCreate
}

// Save creates the Transaction entities in the database.
func (tcb *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transaction, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
