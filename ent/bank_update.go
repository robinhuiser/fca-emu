// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/robinhuiser/finite-mock-server/ent/bank"
	"github.com/robinhuiser/finite-mock-server/ent/branch"
	"github.com/robinhuiser/finite-mock-server/ent/predicate"
)

// BankUpdate is the builder for updating Bank entities.
type BankUpdate struct {
	config
	hooks    []Hook
	mutation *BankMutation
}

// Where adds a new predicate for the BankUpdate builder.
func (bu *BankUpdate) Where(ps ...predicate.Bank) *BankUpdate {
	bu.mutation.predicates = append(bu.mutation.predicates, ps...)
	return bu
}

// SetBankCode sets the "bankCode" field.
func (bu *BankUpdate) SetBankCode(s string) *BankUpdate {
	bu.mutation.SetBankCode(s)
	return bu
}

// SetBankName sets the "bankName" field.
func (bu *BankUpdate) SetBankName(s string) *BankUpdate {
	bu.mutation.SetBankName(s)
	return bu
}

// SetURL sets the "url" field.
func (bu *BankUpdate) SetURL(s string) *BankUpdate {
	bu.mutation.SetURL(s)
	return bu
}

// SetSwift sets the "swift" field.
func (bu *BankUpdate) SetSwift(s string) *BankUpdate {
	bu.mutation.SetSwift(s)
	return bu
}

// AddBranchIDs adds the "branches" edge to the Branch entity by IDs.
func (bu *BankUpdate) AddBranchIDs(ids ...int) *BankUpdate {
	bu.mutation.AddBranchIDs(ids...)
	return bu
}

// AddBranches adds the "branches" edges to the Branch entity.
func (bu *BankUpdate) AddBranches(b ...*Branch) *BankUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddBranchIDs(ids...)
}

// Mutation returns the BankMutation object of the builder.
func (bu *BankUpdate) Mutation() *BankMutation {
	return bu.mutation
}

// ClearBranches clears all "branches" edges to the Branch entity.
func (bu *BankUpdate) ClearBranches() *BankUpdate {
	bu.mutation.ClearBranches()
	return bu
}

// RemoveBranchIDs removes the "branches" edge to Branch entities by IDs.
func (bu *BankUpdate) RemoveBranchIDs(ids ...int) *BankUpdate {
	bu.mutation.RemoveBranchIDs(ids...)
	return bu
}

// RemoveBranches removes "branches" edges to Branch entities.
func (bu *BankUpdate) RemoveBranches(b ...*Branch) *BankUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveBranchIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BankUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BankUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BankUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BankUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BankUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bank.Table,
			Columns: bank.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bank.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BankCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldBankCode,
		})
	}
	if value, ok := bu.mutation.BankName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldBankName,
		})
	}
	if value, ok := bu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldURL,
		})
	}
	if value, ok := bu.mutation.Swift(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldSwift,
		})
	}
	if bu.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.BranchesTable,
			Columns: []string{bank.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBranchesIDs(); len(nodes) > 0 && !bu.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.BranchesTable,
			Columns: []string{bank.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BranchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.BranchesTable,
			Columns: []string{bank.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bank.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BankUpdateOne is the builder for updating a single Bank entity.
type BankUpdateOne struct {
	config
	hooks    []Hook
	mutation *BankMutation
}

// SetBankCode sets the "bankCode" field.
func (buo *BankUpdateOne) SetBankCode(s string) *BankUpdateOne {
	buo.mutation.SetBankCode(s)
	return buo
}

// SetBankName sets the "bankName" field.
func (buo *BankUpdateOne) SetBankName(s string) *BankUpdateOne {
	buo.mutation.SetBankName(s)
	return buo
}

// SetURL sets the "url" field.
func (buo *BankUpdateOne) SetURL(s string) *BankUpdateOne {
	buo.mutation.SetURL(s)
	return buo
}

// SetSwift sets the "swift" field.
func (buo *BankUpdateOne) SetSwift(s string) *BankUpdateOne {
	buo.mutation.SetSwift(s)
	return buo
}

// AddBranchIDs adds the "branches" edge to the Branch entity by IDs.
func (buo *BankUpdateOne) AddBranchIDs(ids ...int) *BankUpdateOne {
	buo.mutation.AddBranchIDs(ids...)
	return buo
}

// AddBranches adds the "branches" edges to the Branch entity.
func (buo *BankUpdateOne) AddBranches(b ...*Branch) *BankUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddBranchIDs(ids...)
}

// Mutation returns the BankMutation object of the builder.
func (buo *BankUpdateOne) Mutation() *BankMutation {
	return buo.mutation
}

// ClearBranches clears all "branches" edges to the Branch entity.
func (buo *BankUpdateOne) ClearBranches() *BankUpdateOne {
	buo.mutation.ClearBranches()
	return buo
}

// RemoveBranchIDs removes the "branches" edge to Branch entities by IDs.
func (buo *BankUpdateOne) RemoveBranchIDs(ids ...int) *BankUpdateOne {
	buo.mutation.RemoveBranchIDs(ids...)
	return buo
}

// RemoveBranches removes "branches" edges to Branch entities.
func (buo *BankUpdateOne) RemoveBranches(b ...*Branch) *BankUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveBranchIDs(ids...)
}

// Save executes the query and returns the updated Bank entity.
func (buo *BankUpdateOne) Save(ctx context.Context) (*Bank, error) {
	var (
		err  error
		node *Bank
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BankUpdateOne) SaveX(ctx context.Context) *Bank {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BankUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BankUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BankUpdateOne) sqlSave(ctx context.Context) (_node *Bank, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bank.Table,
			Columns: bank.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bank.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bank.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.BankCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldBankCode,
		})
	}
	if value, ok := buo.mutation.BankName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldBankName,
		})
	}
	if value, ok := buo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldURL,
		})
	}
	if value, ok := buo.mutation.Swift(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldSwift,
		})
	}
	if buo.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.BranchesTable,
			Columns: []string{bank.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBranchesIDs(); len(nodes) > 0 && !buo.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.BranchesTable,
			Columns: []string{bank.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BranchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.BranchesTable,
			Columns: []string{bank.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bank{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bank.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
