// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/robinhuiser/finite-mock-server/ent/account"
	"github.com/robinhuiser/finite-mock-server/ent/predicate"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// Where adds a new predicate for the AccountUpdate builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetType sets the "type" field.
func (au *AccountUpdate) SetType(s string) *AccountUpdate {
	au.mutation.SetType(s)
	return au
}

// SetNumber sets the "number" field.
func (au *AccountUpdate) SetNumber(s string) *AccountUpdate {
	au.mutation.SetNumber(s)
	return au
}

// SetParentId sets the "parentId" field.
func (au *AccountUpdate) SetParentId(u uuid.UUID) *AccountUpdate {
	au.mutation.SetParentId(u)
	return au
}

// SetName sets the "name" field.
func (au *AccountUpdate) SetName(s string) *AccountUpdate {
	au.mutation.SetName(s)
	return au
}

// SetTitle sets the "title" field.
func (au *AccountUpdate) SetTitle(s string) *AccountUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetIban sets the "iban" field.
func (au *AccountUpdate) SetIban(s string) *AccountUpdate {
	au.mutation.SetIban(s)
	return au
}

// SetDateCreated sets the "dateCreated" field.
func (au *AccountUpdate) SetDateCreated(t time.Time) *AccountUpdate {
	au.mutation.SetDateCreated(t)
	return au
}

// SetDateOpened sets the "dateOpened" field.
func (au *AccountUpdate) SetDateOpened(t time.Time) *AccountUpdate {
	au.mutation.SetDateOpened(t)
	return au
}

// SetDateLastUpdated sets the "dateLastUpdated" field.
func (au *AccountUpdate) SetDateLastUpdated(t time.Time) *AccountUpdate {
	au.mutation.SetDateLastUpdated(t)
	return au
}

// SetDateClosed sets the "dateClosed" field.
func (au *AccountUpdate) SetDateClosed(t time.Time) *AccountUpdate {
	au.mutation.SetDateClosed(t)
	return au
}

// SetNillableDateClosed sets the "dateClosed" field if the given value is not nil.
func (au *AccountUpdate) SetNillableDateClosed(t *time.Time) *AccountUpdate {
	if t != nil {
		au.SetDateClosed(*t)
	}
	return au
}

// ClearDateClosed clears the value of the "dateClosed" field.
func (au *AccountUpdate) ClearDateClosed() *AccountUpdate {
	au.mutation.ClearDateClosed()
	return au
}

// SetCurrencyCode sets the "currencyCode" field.
func (au *AccountUpdate) SetCurrencyCode(s string) *AccountUpdate {
	au.mutation.SetCurrencyCode(s)
	return au
}

// SetStatus sets the "status" field.
func (au *AccountUpdate) SetStatus(s string) *AccountUpdate {
	au.mutation.SetStatus(s)
	return au
}

// SetSource sets the "source" field.
func (au *AccountUpdate) SetSource(s string) *AccountUpdate {
	au.mutation.SetSource(s)
	return au
}

// SetInterestReporting sets the "interestReporting" field.
func (au *AccountUpdate) SetInterestReporting(b bool) *AccountUpdate {
	au.mutation.SetInterestReporting(b)
	return au
}

// Mutation returns the AccountMutation object of the builder.
func (au *AccountUpdate) Mutation() *AccountMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: account.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldType,
		})
	}
	if value, ok := au.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldNumber,
		})
	}
	if value, ok := au.mutation.ParentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: account.FieldParentId,
		})
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldName,
		})
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldTitle,
		})
	}
	if value, ok := au.mutation.Iban(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldIban,
		})
	}
	if value, ok := au.mutation.DateCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateCreated,
		})
	}
	if value, ok := au.mutation.DateOpened(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateOpened,
		})
	}
	if value, ok := au.mutation.DateLastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateLastUpdated,
		})
	}
	if value, ok := au.mutation.DateClosed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateClosed,
		})
	}
	if au.mutation.DateClosedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: account.FieldDateClosed,
		})
	}
	if value, ok := au.mutation.CurrencyCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldCurrencyCode,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldStatus,
		})
	}
	if value, ok := au.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldSource,
		})
	}
	if value, ok := au.mutation.InterestReporting(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldInterestReporting,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// SetType sets the "type" field.
func (auo *AccountUpdateOne) SetType(s string) *AccountUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetNumber sets the "number" field.
func (auo *AccountUpdateOne) SetNumber(s string) *AccountUpdateOne {
	auo.mutation.SetNumber(s)
	return auo
}

// SetParentId sets the "parentId" field.
func (auo *AccountUpdateOne) SetParentId(u uuid.UUID) *AccountUpdateOne {
	auo.mutation.SetParentId(u)
	return auo
}

// SetName sets the "name" field.
func (auo *AccountUpdateOne) SetName(s string) *AccountUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetTitle sets the "title" field.
func (auo *AccountUpdateOne) SetTitle(s string) *AccountUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetIban sets the "iban" field.
func (auo *AccountUpdateOne) SetIban(s string) *AccountUpdateOne {
	auo.mutation.SetIban(s)
	return auo
}

// SetDateCreated sets the "dateCreated" field.
func (auo *AccountUpdateOne) SetDateCreated(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDateCreated(t)
	return auo
}

// SetDateOpened sets the "dateOpened" field.
func (auo *AccountUpdateOne) SetDateOpened(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDateOpened(t)
	return auo
}

// SetDateLastUpdated sets the "dateLastUpdated" field.
func (auo *AccountUpdateOne) SetDateLastUpdated(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDateLastUpdated(t)
	return auo
}

// SetDateClosed sets the "dateClosed" field.
func (auo *AccountUpdateOne) SetDateClosed(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDateClosed(t)
	return auo
}

// SetNillableDateClosed sets the "dateClosed" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableDateClosed(t *time.Time) *AccountUpdateOne {
	if t != nil {
		auo.SetDateClosed(*t)
	}
	return auo
}

// ClearDateClosed clears the value of the "dateClosed" field.
func (auo *AccountUpdateOne) ClearDateClosed() *AccountUpdateOne {
	auo.mutation.ClearDateClosed()
	return auo
}

// SetCurrencyCode sets the "currencyCode" field.
func (auo *AccountUpdateOne) SetCurrencyCode(s string) *AccountUpdateOne {
	auo.mutation.SetCurrencyCode(s)
	return auo
}

// SetStatus sets the "status" field.
func (auo *AccountUpdateOne) SetStatus(s string) *AccountUpdateOne {
	auo.mutation.SetStatus(s)
	return auo
}

// SetSource sets the "source" field.
func (auo *AccountUpdateOne) SetSource(s string) *AccountUpdateOne {
	auo.mutation.SetSource(s)
	return auo
}

// SetInterestReporting sets the "interestReporting" field.
func (auo *AccountUpdateOne) SetInterestReporting(b bool) *AccountUpdateOne {
	auo.mutation.SetInterestReporting(b)
	return auo
}

// Mutation returns the AccountMutation object of the builder.
func (auo *AccountUpdateOne) Mutation() *AccountMutation {
	return auo.mutation
}

// Save executes the query and returns the updated Account entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	var (
		err  error
		node *Account
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (_node *Account, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: account.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Account.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldType,
		})
	}
	if value, ok := auo.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldNumber,
		})
	}
	if value, ok := auo.mutation.ParentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: account.FieldParentId,
		})
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldName,
		})
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldTitle,
		})
	}
	if value, ok := auo.mutation.Iban(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldIban,
		})
	}
	if value, ok := auo.mutation.DateCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateCreated,
		})
	}
	if value, ok := auo.mutation.DateOpened(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateOpened,
		})
	}
	if value, ok := auo.mutation.DateLastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateLastUpdated,
		})
	}
	if value, ok := auo.mutation.DateClosed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateClosed,
		})
	}
	if auo.mutation.DateClosedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: account.FieldDateClosed,
		})
	}
	if value, ok := auo.mutation.CurrencyCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldCurrencyCode,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldStatus,
		})
	}
	if value, ok := auo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldSource,
		})
	}
	if value, ok := auo.mutation.InterestReporting(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldInterestReporting,
		})
	}
	_node = &Account{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
