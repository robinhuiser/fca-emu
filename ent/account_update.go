// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/robinhuiser/fca-emu/ent/account"
	"github.com/robinhuiser/fca-emu/ent/branch"
	"github.com/robinhuiser/fca-emu/ent/card"
	"github.com/robinhuiser/fca-emu/ent/entity"
	"github.com/robinhuiser/fca-emu/ent/predicate"
	"github.com/robinhuiser/fca-emu/ent/preference"
	"github.com/robinhuiser/fca-emu/ent/product"
	"github.com/robinhuiser/fca-emu/ent/routingnumber"
	"github.com/robinhuiser/fca-emu/ent/transaction"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// Where adds a new predicate for the AccountUpdate builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetType sets the "type" field.
func (au *AccountUpdate) SetType(s string) *AccountUpdate {
	au.mutation.SetType(s)
	return au
}

// SetNumber sets the "number" field.
func (au *AccountUpdate) SetNumber(s string) *AccountUpdate {
	au.mutation.SetNumber(s)
	return au
}

// SetParentId sets the "parentId" field.
func (au *AccountUpdate) SetParentId(u uuid.UUID) *AccountUpdate {
	au.mutation.SetParentId(u)
	return au
}

// ClearParentId clears the value of the "parentId" field.
func (au *AccountUpdate) ClearParentId() *AccountUpdate {
	au.mutation.ClearParentId()
	return au
}

// SetName sets the "name" field.
func (au *AccountUpdate) SetName(s string) *AccountUpdate {
	au.mutation.SetName(s)
	return au
}

// SetTitle sets the "title" field.
func (au *AccountUpdate) SetTitle(s string) *AccountUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetDateCreated sets the "dateCreated" field.
func (au *AccountUpdate) SetDateCreated(t time.Time) *AccountUpdate {
	au.mutation.SetDateCreated(t)
	return au
}

// SetDateOpened sets the "dateOpened" field.
func (au *AccountUpdate) SetDateOpened(t time.Time) *AccountUpdate {
	au.mutation.SetDateOpened(t)
	return au
}

// SetDateLastUpdated sets the "dateLastUpdated" field.
func (au *AccountUpdate) SetDateLastUpdated(t time.Time) *AccountUpdate {
	au.mutation.SetDateLastUpdated(t)
	return au
}

// SetDateClosed sets the "dateClosed" field.
func (au *AccountUpdate) SetDateClosed(t time.Time) *AccountUpdate {
	au.mutation.SetDateClosed(t)
	return au
}

// SetNillableDateClosed sets the "dateClosed" field if the given value is not nil.
func (au *AccountUpdate) SetNillableDateClosed(t *time.Time) *AccountUpdate {
	if t != nil {
		au.SetDateClosed(*t)
	}
	return au
}

// ClearDateClosed clears the value of the "dateClosed" field.
func (au *AccountUpdate) ClearDateClosed() *AccountUpdate {
	au.mutation.ClearDateClosed()
	return au
}

// SetCurrencyCode sets the "currencyCode" field.
func (au *AccountUpdate) SetCurrencyCode(s string) *AccountUpdate {
	au.mutation.SetCurrencyCode(s)
	return au
}

// SetStatus sets the "status" field.
func (au *AccountUpdate) SetStatus(s string) *AccountUpdate {
	au.mutation.SetStatus(s)
	return au
}

// SetSource sets the "source" field.
func (au *AccountUpdate) SetSource(s string) *AccountUpdate {
	au.mutation.SetSource(s)
	return au
}

// SetInterestReporting sets the "interestReporting" field.
func (au *AccountUpdate) SetInterestReporting(b bool) *AccountUpdate {
	au.mutation.SetInterestReporting(b)
	return au
}

// SetCurrentBalance sets the "currentBalance" field.
func (au *AccountUpdate) SetCurrentBalance(f float32) *AccountUpdate {
	au.mutation.ResetCurrentBalance()
	au.mutation.SetCurrentBalance(f)
	return au
}

// AddCurrentBalance adds f to the "currentBalance" field.
func (au *AccountUpdate) AddCurrentBalance(f float32) *AccountUpdate {
	au.mutation.AddCurrentBalance(f)
	return au
}

// SetAvailableBalance sets the "availableBalance" field.
func (au *AccountUpdate) SetAvailableBalance(f float32) *AccountUpdate {
	au.mutation.ResetAvailableBalance()
	au.mutation.SetAvailableBalance(f)
	return au
}

// AddAvailableBalance adds f to the "availableBalance" field.
func (au *AccountUpdate) AddAvailableBalance(f float32) *AccountUpdate {
	au.mutation.AddAvailableBalance(f)
	return au
}

// SetURL sets the "url" field.
func (au *AccountUpdate) SetURL(s string) *AccountUpdate {
	au.mutation.SetURL(s)
	return au
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (au *AccountUpdate) SetNillableURL(s *string) *AccountUpdate {
	if s != nil {
		au.SetURL(*s)
	}
	return au
}

// ClearURL clears the value of the "url" field.
func (au *AccountUpdate) ClearURL() *AccountUpdate {
	au.mutation.ClearURL()
	return au
}

// SetBranchID sets the "branch" edge to the Branch entity by ID.
func (au *AccountUpdate) SetBranchID(id int) *AccountUpdate {
	au.mutation.SetBranchID(id)
	return au
}

// SetNillableBranchID sets the "branch" edge to the Branch entity by ID if the given value is not nil.
func (au *AccountUpdate) SetNillableBranchID(id *int) *AccountUpdate {
	if id != nil {
		au = au.SetBranchID(*id)
	}
	return au
}

// SetBranch sets the "branch" edge to the Branch entity.
func (au *AccountUpdate) SetBranch(b *Branch) *AccountUpdate {
	return au.SetBranchID(b.ID)
}

// AddOwnerIDs adds the "owners" edge to the Entity entity by IDs.
func (au *AccountUpdate) AddOwnerIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.AddOwnerIDs(ids...)
	return au
}

// AddOwners adds the "owners" edges to the Entity entity.
func (au *AccountUpdate) AddOwners(e ...*Entity) *AccountUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddOwnerIDs(ids...)
}

// AddPreferenceIDs adds the "preferences" edge to the Preference entity by IDs.
func (au *AccountUpdate) AddPreferenceIDs(ids ...int) *AccountUpdate {
	au.mutation.AddPreferenceIDs(ids...)
	return au
}

// AddPreferences adds the "preferences" edges to the Preference entity.
func (au *AccountUpdate) AddPreferences(p ...*Preference) *AccountUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPreferenceIDs(ids...)
}

// AddRoutingnumberIDs adds the "routingnumbers" edge to the RoutingNumber entity by IDs.
func (au *AccountUpdate) AddRoutingnumberIDs(ids ...int) *AccountUpdate {
	au.mutation.AddRoutingnumberIDs(ids...)
	return au
}

// AddRoutingnumbers adds the "routingnumbers" edges to the RoutingNumber entity.
func (au *AccountUpdate) AddRoutingnumbers(r ...*RoutingNumber) *AccountUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRoutingnumberIDs(ids...)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (au *AccountUpdate) SetProductID(id int) *AccountUpdate {
	au.mutation.SetProductID(id)
	return au
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (au *AccountUpdate) SetNillableProductID(id *int) *AccountUpdate {
	if id != nil {
		au = au.SetProductID(*id)
	}
	return au
}

// SetProduct sets the "product" edge to the Product entity.
func (au *AccountUpdate) SetProduct(p *Product) *AccountUpdate {
	return au.SetProductID(p.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (au *AccountUpdate) AddTransactionIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.AddTransactionIDs(ids...)
	return au
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (au *AccountUpdate) AddTransactions(t ...*Transaction) *AccountUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTransactionIDs(ids...)
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (au *AccountUpdate) AddCardIDs(ids ...int) *AccountUpdate {
	au.mutation.AddCardIDs(ids...)
	return au
}

// AddCards adds the "cards" edges to the Card entity.
func (au *AccountUpdate) AddCards(c ...*Card) *AccountUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCardIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (au *AccountUpdate) Mutation() *AccountMutation {
	return au.mutation
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (au *AccountUpdate) ClearBranch() *AccountUpdate {
	au.mutation.ClearBranch()
	return au
}

// ClearOwners clears all "owners" edges to the Entity entity.
func (au *AccountUpdate) ClearOwners() *AccountUpdate {
	au.mutation.ClearOwners()
	return au
}

// RemoveOwnerIDs removes the "owners" edge to Entity entities by IDs.
func (au *AccountUpdate) RemoveOwnerIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.RemoveOwnerIDs(ids...)
	return au
}

// RemoveOwners removes "owners" edges to Entity entities.
func (au *AccountUpdate) RemoveOwners(e ...*Entity) *AccountUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveOwnerIDs(ids...)
}

// ClearPreferences clears all "preferences" edges to the Preference entity.
func (au *AccountUpdate) ClearPreferences() *AccountUpdate {
	au.mutation.ClearPreferences()
	return au
}

// RemovePreferenceIDs removes the "preferences" edge to Preference entities by IDs.
func (au *AccountUpdate) RemovePreferenceIDs(ids ...int) *AccountUpdate {
	au.mutation.RemovePreferenceIDs(ids...)
	return au
}

// RemovePreferences removes "preferences" edges to Preference entities.
func (au *AccountUpdate) RemovePreferences(p ...*Preference) *AccountUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePreferenceIDs(ids...)
}

// ClearRoutingnumbers clears all "routingnumbers" edges to the RoutingNumber entity.
func (au *AccountUpdate) ClearRoutingnumbers() *AccountUpdate {
	au.mutation.ClearRoutingnumbers()
	return au
}

// RemoveRoutingnumberIDs removes the "routingnumbers" edge to RoutingNumber entities by IDs.
func (au *AccountUpdate) RemoveRoutingnumberIDs(ids ...int) *AccountUpdate {
	au.mutation.RemoveRoutingnumberIDs(ids...)
	return au
}

// RemoveRoutingnumbers removes "routingnumbers" edges to RoutingNumber entities.
func (au *AccountUpdate) RemoveRoutingnumbers(r ...*RoutingNumber) *AccountUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRoutingnumberIDs(ids...)
}

// ClearProduct clears the "product" edge to the Product entity.
func (au *AccountUpdate) ClearProduct() *AccountUpdate {
	au.mutation.ClearProduct()
	return au
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (au *AccountUpdate) ClearTransactions() *AccountUpdate {
	au.mutation.ClearTransactions()
	return au
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (au *AccountUpdate) RemoveTransactionIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.RemoveTransactionIDs(ids...)
	return au
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (au *AccountUpdate) RemoveTransactions(t ...*Transaction) *AccountUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTransactionIDs(ids...)
}

// ClearCards clears all "cards" edges to the Card entity.
func (au *AccountUpdate) ClearCards() *AccountUpdate {
	au.mutation.ClearCards()
	return au
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (au *AccountUpdate) RemoveCardIDs(ids ...int) *AccountUpdate {
	au.mutation.RemoveCardIDs(ids...)
	return au
}

// RemoveCards removes "cards" edges to Card entities.
func (au *AccountUpdate) RemoveCards(c ...*Card) *AccountUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCardIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: account.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldType,
		})
	}
	if value, ok := au.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldNumber,
		})
	}
	if value, ok := au.mutation.ParentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: account.FieldParentId,
		})
	}
	if au.mutation.ParentIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: account.FieldParentId,
		})
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldName,
		})
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldTitle,
		})
	}
	if value, ok := au.mutation.DateCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateCreated,
		})
	}
	if value, ok := au.mutation.DateOpened(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateOpened,
		})
	}
	if value, ok := au.mutation.DateLastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateLastUpdated,
		})
	}
	if value, ok := au.mutation.DateClosed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateClosed,
		})
	}
	if au.mutation.DateClosedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: account.FieldDateClosed,
		})
	}
	if value, ok := au.mutation.CurrencyCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldCurrencyCode,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldStatus,
		})
	}
	if value, ok := au.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldSource,
		})
	}
	if value, ok := au.mutation.InterestReporting(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldInterestReporting,
		})
	}
	if value, ok := au.mutation.CurrentBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: account.FieldCurrentBalance,
		})
	}
	if value, ok := au.mutation.AddedCurrentBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: account.FieldCurrentBalance,
		})
	}
	if value, ok := au.mutation.AvailableBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: account.FieldAvailableBalance,
		})
	}
	if value, ok := au.mutation.AddedAvailableBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: account.FieldAvailableBalance,
		})
	}
	if value, ok := au.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldURL,
		})
	}
	if au.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldURL,
		})
	}
	if au.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   account.BranchTable,
			Columns: []string{account.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   account.BranchTable,
			Columns: []string{account.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.OwnersTable,
			Columns: account.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOwnersIDs(); len(nodes) > 0 && !au.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.OwnersTable,
			Columns: account.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.OwnersTable,
			Columns: account.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PreferencesTable,
			Columns: []string{account.PreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPreferencesIDs(); len(nodes) > 0 && !au.mutation.PreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PreferencesTable,
			Columns: []string{account.PreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PreferencesTable,
			Columns: []string{account.PreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RoutingnumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.RoutingnumbersTable,
			Columns: []string{account.RoutingnumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: routingnumber.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRoutingnumbersIDs(); len(nodes) > 0 && !au.mutation.RoutingnumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.RoutingnumbersTable,
			Columns: []string{account.RoutingnumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: routingnumber.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RoutingnumbersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.RoutingnumbersTable,
			Columns: []string{account.RoutingnumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: routingnumber.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   account.ProductTable,
			Columns: []string{account.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   account.ProductTable,
			Columns: []string{account.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TransactionsTable,
			Columns: []string{account.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !au.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TransactionsTable,
			Columns: []string{account.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TransactionsTable,
			Columns: []string{account.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CardsTable,
			Columns: []string{account.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCardsIDs(); len(nodes) > 0 && !au.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CardsTable,
			Columns: []string{account.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CardsTable,
			Columns: []string{account.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// SetType sets the "type" field.
func (auo *AccountUpdateOne) SetType(s string) *AccountUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetNumber sets the "number" field.
func (auo *AccountUpdateOne) SetNumber(s string) *AccountUpdateOne {
	auo.mutation.SetNumber(s)
	return auo
}

// SetParentId sets the "parentId" field.
func (auo *AccountUpdateOne) SetParentId(u uuid.UUID) *AccountUpdateOne {
	auo.mutation.SetParentId(u)
	return auo
}

// ClearParentId clears the value of the "parentId" field.
func (auo *AccountUpdateOne) ClearParentId() *AccountUpdateOne {
	auo.mutation.ClearParentId()
	return auo
}

// SetName sets the "name" field.
func (auo *AccountUpdateOne) SetName(s string) *AccountUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetTitle sets the "title" field.
func (auo *AccountUpdateOne) SetTitle(s string) *AccountUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetDateCreated sets the "dateCreated" field.
func (auo *AccountUpdateOne) SetDateCreated(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDateCreated(t)
	return auo
}

// SetDateOpened sets the "dateOpened" field.
func (auo *AccountUpdateOne) SetDateOpened(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDateOpened(t)
	return auo
}

// SetDateLastUpdated sets the "dateLastUpdated" field.
func (auo *AccountUpdateOne) SetDateLastUpdated(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDateLastUpdated(t)
	return auo
}

// SetDateClosed sets the "dateClosed" field.
func (auo *AccountUpdateOne) SetDateClosed(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDateClosed(t)
	return auo
}

// SetNillableDateClosed sets the "dateClosed" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableDateClosed(t *time.Time) *AccountUpdateOne {
	if t != nil {
		auo.SetDateClosed(*t)
	}
	return auo
}

// ClearDateClosed clears the value of the "dateClosed" field.
func (auo *AccountUpdateOne) ClearDateClosed() *AccountUpdateOne {
	auo.mutation.ClearDateClosed()
	return auo
}

// SetCurrencyCode sets the "currencyCode" field.
func (auo *AccountUpdateOne) SetCurrencyCode(s string) *AccountUpdateOne {
	auo.mutation.SetCurrencyCode(s)
	return auo
}

// SetStatus sets the "status" field.
func (auo *AccountUpdateOne) SetStatus(s string) *AccountUpdateOne {
	auo.mutation.SetStatus(s)
	return auo
}

// SetSource sets the "source" field.
func (auo *AccountUpdateOne) SetSource(s string) *AccountUpdateOne {
	auo.mutation.SetSource(s)
	return auo
}

// SetInterestReporting sets the "interestReporting" field.
func (auo *AccountUpdateOne) SetInterestReporting(b bool) *AccountUpdateOne {
	auo.mutation.SetInterestReporting(b)
	return auo
}

// SetCurrentBalance sets the "currentBalance" field.
func (auo *AccountUpdateOne) SetCurrentBalance(f float32) *AccountUpdateOne {
	auo.mutation.ResetCurrentBalance()
	auo.mutation.SetCurrentBalance(f)
	return auo
}

// AddCurrentBalance adds f to the "currentBalance" field.
func (auo *AccountUpdateOne) AddCurrentBalance(f float32) *AccountUpdateOne {
	auo.mutation.AddCurrentBalance(f)
	return auo
}

// SetAvailableBalance sets the "availableBalance" field.
func (auo *AccountUpdateOne) SetAvailableBalance(f float32) *AccountUpdateOne {
	auo.mutation.ResetAvailableBalance()
	auo.mutation.SetAvailableBalance(f)
	return auo
}

// AddAvailableBalance adds f to the "availableBalance" field.
func (auo *AccountUpdateOne) AddAvailableBalance(f float32) *AccountUpdateOne {
	auo.mutation.AddAvailableBalance(f)
	return auo
}

// SetURL sets the "url" field.
func (auo *AccountUpdateOne) SetURL(s string) *AccountUpdateOne {
	auo.mutation.SetURL(s)
	return auo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableURL(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetURL(*s)
	}
	return auo
}

// ClearURL clears the value of the "url" field.
func (auo *AccountUpdateOne) ClearURL() *AccountUpdateOne {
	auo.mutation.ClearURL()
	return auo
}

// SetBranchID sets the "branch" edge to the Branch entity by ID.
func (auo *AccountUpdateOne) SetBranchID(id int) *AccountUpdateOne {
	auo.mutation.SetBranchID(id)
	return auo
}

// SetNillableBranchID sets the "branch" edge to the Branch entity by ID if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableBranchID(id *int) *AccountUpdateOne {
	if id != nil {
		auo = auo.SetBranchID(*id)
	}
	return auo
}

// SetBranch sets the "branch" edge to the Branch entity.
func (auo *AccountUpdateOne) SetBranch(b *Branch) *AccountUpdateOne {
	return auo.SetBranchID(b.ID)
}

// AddOwnerIDs adds the "owners" edge to the Entity entity by IDs.
func (auo *AccountUpdateOne) AddOwnerIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.AddOwnerIDs(ids...)
	return auo
}

// AddOwners adds the "owners" edges to the Entity entity.
func (auo *AccountUpdateOne) AddOwners(e ...*Entity) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddOwnerIDs(ids...)
}

// AddPreferenceIDs adds the "preferences" edge to the Preference entity by IDs.
func (auo *AccountUpdateOne) AddPreferenceIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.AddPreferenceIDs(ids...)
	return auo
}

// AddPreferences adds the "preferences" edges to the Preference entity.
func (auo *AccountUpdateOne) AddPreferences(p ...*Preference) *AccountUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPreferenceIDs(ids...)
}

// AddRoutingnumberIDs adds the "routingnumbers" edge to the RoutingNumber entity by IDs.
func (auo *AccountUpdateOne) AddRoutingnumberIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.AddRoutingnumberIDs(ids...)
	return auo
}

// AddRoutingnumbers adds the "routingnumbers" edges to the RoutingNumber entity.
func (auo *AccountUpdateOne) AddRoutingnumbers(r ...*RoutingNumber) *AccountUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRoutingnumberIDs(ids...)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (auo *AccountUpdateOne) SetProductID(id int) *AccountUpdateOne {
	auo.mutation.SetProductID(id)
	return auo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableProductID(id *int) *AccountUpdateOne {
	if id != nil {
		auo = auo.SetProductID(*id)
	}
	return auo
}

// SetProduct sets the "product" edge to the Product entity.
func (auo *AccountUpdateOne) SetProduct(p *Product) *AccountUpdateOne {
	return auo.SetProductID(p.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (auo *AccountUpdateOne) AddTransactionIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.AddTransactionIDs(ids...)
	return auo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (auo *AccountUpdateOne) AddTransactions(t ...*Transaction) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTransactionIDs(ids...)
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (auo *AccountUpdateOne) AddCardIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.AddCardIDs(ids...)
	return auo
}

// AddCards adds the "cards" edges to the Card entity.
func (auo *AccountUpdateOne) AddCards(c ...*Card) *AccountUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCardIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (auo *AccountUpdateOne) Mutation() *AccountMutation {
	return auo.mutation
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (auo *AccountUpdateOne) ClearBranch() *AccountUpdateOne {
	auo.mutation.ClearBranch()
	return auo
}

// ClearOwners clears all "owners" edges to the Entity entity.
func (auo *AccountUpdateOne) ClearOwners() *AccountUpdateOne {
	auo.mutation.ClearOwners()
	return auo
}

// RemoveOwnerIDs removes the "owners" edge to Entity entities by IDs.
func (auo *AccountUpdateOne) RemoveOwnerIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.RemoveOwnerIDs(ids...)
	return auo
}

// RemoveOwners removes "owners" edges to Entity entities.
func (auo *AccountUpdateOne) RemoveOwners(e ...*Entity) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveOwnerIDs(ids...)
}

// ClearPreferences clears all "preferences" edges to the Preference entity.
func (auo *AccountUpdateOne) ClearPreferences() *AccountUpdateOne {
	auo.mutation.ClearPreferences()
	return auo
}

// RemovePreferenceIDs removes the "preferences" edge to Preference entities by IDs.
func (auo *AccountUpdateOne) RemovePreferenceIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.RemovePreferenceIDs(ids...)
	return auo
}

// RemovePreferences removes "preferences" edges to Preference entities.
func (auo *AccountUpdateOne) RemovePreferences(p ...*Preference) *AccountUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePreferenceIDs(ids...)
}

// ClearRoutingnumbers clears all "routingnumbers" edges to the RoutingNumber entity.
func (auo *AccountUpdateOne) ClearRoutingnumbers() *AccountUpdateOne {
	auo.mutation.ClearRoutingnumbers()
	return auo
}

// RemoveRoutingnumberIDs removes the "routingnumbers" edge to RoutingNumber entities by IDs.
func (auo *AccountUpdateOne) RemoveRoutingnumberIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.RemoveRoutingnumberIDs(ids...)
	return auo
}

// RemoveRoutingnumbers removes "routingnumbers" edges to RoutingNumber entities.
func (auo *AccountUpdateOne) RemoveRoutingnumbers(r ...*RoutingNumber) *AccountUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRoutingnumberIDs(ids...)
}

// ClearProduct clears the "product" edge to the Product entity.
func (auo *AccountUpdateOne) ClearProduct() *AccountUpdateOne {
	auo.mutation.ClearProduct()
	return auo
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (auo *AccountUpdateOne) ClearTransactions() *AccountUpdateOne {
	auo.mutation.ClearTransactions()
	return auo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (auo *AccountUpdateOne) RemoveTransactionIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.RemoveTransactionIDs(ids...)
	return auo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (auo *AccountUpdateOne) RemoveTransactions(t ...*Transaction) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTransactionIDs(ids...)
}

// ClearCards clears all "cards" edges to the Card entity.
func (auo *AccountUpdateOne) ClearCards() *AccountUpdateOne {
	auo.mutation.ClearCards()
	return auo
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (auo *AccountUpdateOne) RemoveCardIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.RemoveCardIDs(ids...)
	return auo
}

// RemoveCards removes "cards" edges to Card entities.
func (auo *AccountUpdateOne) RemoveCards(c ...*Card) *AccountUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCardIDs(ids...)
}

// Save executes the query and returns the updated Account entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	var (
		err  error
		node *Account
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (_node *Account, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: account.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Account.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldType,
		})
	}
	if value, ok := auo.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldNumber,
		})
	}
	if value, ok := auo.mutation.ParentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: account.FieldParentId,
		})
	}
	if auo.mutation.ParentIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: account.FieldParentId,
		})
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldName,
		})
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldTitle,
		})
	}
	if value, ok := auo.mutation.DateCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateCreated,
		})
	}
	if value, ok := auo.mutation.DateOpened(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateOpened,
		})
	}
	if value, ok := auo.mutation.DateLastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateLastUpdated,
		})
	}
	if value, ok := auo.mutation.DateClosed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDateClosed,
		})
	}
	if auo.mutation.DateClosedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: account.FieldDateClosed,
		})
	}
	if value, ok := auo.mutation.CurrencyCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldCurrencyCode,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldStatus,
		})
	}
	if value, ok := auo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldSource,
		})
	}
	if value, ok := auo.mutation.InterestReporting(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldInterestReporting,
		})
	}
	if value, ok := auo.mutation.CurrentBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: account.FieldCurrentBalance,
		})
	}
	if value, ok := auo.mutation.AddedCurrentBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: account.FieldCurrentBalance,
		})
	}
	if value, ok := auo.mutation.AvailableBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: account.FieldAvailableBalance,
		})
	}
	if value, ok := auo.mutation.AddedAvailableBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: account.FieldAvailableBalance,
		})
	}
	if value, ok := auo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldURL,
		})
	}
	if auo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldURL,
		})
	}
	if auo.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   account.BranchTable,
			Columns: []string{account.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   account.BranchTable,
			Columns: []string{account.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.OwnersTable,
			Columns: account.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOwnersIDs(); len(nodes) > 0 && !auo.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.OwnersTable,
			Columns: account.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.OwnersTable,
			Columns: account.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PreferencesTable,
			Columns: []string{account.PreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPreferencesIDs(); len(nodes) > 0 && !auo.mutation.PreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PreferencesTable,
			Columns: []string{account.PreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PreferencesTable,
			Columns: []string{account.PreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: preference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RoutingnumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.RoutingnumbersTable,
			Columns: []string{account.RoutingnumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: routingnumber.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRoutingnumbersIDs(); len(nodes) > 0 && !auo.mutation.RoutingnumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.RoutingnumbersTable,
			Columns: []string{account.RoutingnumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: routingnumber.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RoutingnumbersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.RoutingnumbersTable,
			Columns: []string{account.RoutingnumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: routingnumber.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   account.ProductTable,
			Columns: []string{account.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   account.ProductTable,
			Columns: []string{account.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TransactionsTable,
			Columns: []string{account.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !auo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TransactionsTable,
			Columns: []string{account.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TransactionsTable,
			Columns: []string{account.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CardsTable,
			Columns: []string{account.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCardsIDs(); len(nodes) > 0 && !auo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CardsTable,
			Columns: []string{account.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.CardsTable,
			Columns: []string{account.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Account{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
