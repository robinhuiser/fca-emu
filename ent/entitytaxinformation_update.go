// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/robinhuiser/finite-mock-server/ent/entitytaxinformation"
	"github.com/robinhuiser/finite-mock-server/ent/predicate"
)

// EntityTaxInformationUpdate is the builder for updating EntityTaxInformation entities.
type EntityTaxInformationUpdate struct {
	config
	hooks    []Hook
	mutation *EntityTaxInformationMutation
}

// Where adds a new predicate for the EntityTaxInformationUpdate builder.
func (etiu *EntityTaxInformationUpdate) Where(ps ...predicate.EntityTaxInformation) *EntityTaxInformationUpdate {
	etiu.mutation.predicates = append(etiu.mutation.predicates, ps...)
	return etiu
}

// SetType sets the "type" field.
func (etiu *EntityTaxInformationUpdate) SetType(e entitytaxinformation.Type) *EntityTaxInformationUpdate {
	etiu.mutation.SetType(e)
	return etiu
}

// SetTaxId sets the "taxId" field.
func (etiu *EntityTaxInformationUpdate) SetTaxId(s string) *EntityTaxInformationUpdate {
	etiu.mutation.SetTaxId(s)
	return etiu
}

// Mutation returns the EntityTaxInformationMutation object of the builder.
func (etiu *EntityTaxInformationUpdate) Mutation() *EntityTaxInformationMutation {
	return etiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etiu *EntityTaxInformationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(etiu.hooks) == 0 {
		if err = etiu.check(); err != nil {
			return 0, err
		}
		affected, err = etiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityTaxInformationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = etiu.check(); err != nil {
				return 0, err
			}
			etiu.mutation = mutation
			affected, err = etiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(etiu.hooks) - 1; i >= 0; i-- {
			mut = etiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (etiu *EntityTaxInformationUpdate) SaveX(ctx context.Context) int {
	affected, err := etiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etiu *EntityTaxInformationUpdate) Exec(ctx context.Context) error {
	_, err := etiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etiu *EntityTaxInformationUpdate) ExecX(ctx context.Context) {
	if err := etiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etiu *EntityTaxInformationUpdate) check() error {
	if v, ok := etiu.mutation.GetType(); ok {
		if err := entitytaxinformation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (etiu *EntityTaxInformationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entitytaxinformation.Table,
			Columns: entitytaxinformation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entitytaxinformation.FieldID,
			},
		},
	}
	if ps := etiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etiu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entitytaxinformation.FieldType,
		})
	}
	if value, ok := etiu.mutation.TaxId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entitytaxinformation.FieldTaxId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitytaxinformation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EntityTaxInformationUpdateOne is the builder for updating a single EntityTaxInformation entity.
type EntityTaxInformationUpdateOne struct {
	config
	hooks    []Hook
	mutation *EntityTaxInformationMutation
}

// SetType sets the "type" field.
func (etiuo *EntityTaxInformationUpdateOne) SetType(e entitytaxinformation.Type) *EntityTaxInformationUpdateOne {
	etiuo.mutation.SetType(e)
	return etiuo
}

// SetTaxId sets the "taxId" field.
func (etiuo *EntityTaxInformationUpdateOne) SetTaxId(s string) *EntityTaxInformationUpdateOne {
	etiuo.mutation.SetTaxId(s)
	return etiuo
}

// Mutation returns the EntityTaxInformationMutation object of the builder.
func (etiuo *EntityTaxInformationUpdateOne) Mutation() *EntityTaxInformationMutation {
	return etiuo.mutation
}

// Save executes the query and returns the updated EntityTaxInformation entity.
func (etiuo *EntityTaxInformationUpdateOne) Save(ctx context.Context) (*EntityTaxInformation, error) {
	var (
		err  error
		node *EntityTaxInformation
	)
	if len(etiuo.hooks) == 0 {
		if err = etiuo.check(); err != nil {
			return nil, err
		}
		node, err = etiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityTaxInformationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = etiuo.check(); err != nil {
				return nil, err
			}
			etiuo.mutation = mutation
			node, err = etiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(etiuo.hooks) - 1; i >= 0; i-- {
			mut = etiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (etiuo *EntityTaxInformationUpdateOne) SaveX(ctx context.Context) *EntityTaxInformation {
	node, err := etiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etiuo *EntityTaxInformationUpdateOne) Exec(ctx context.Context) error {
	_, err := etiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etiuo *EntityTaxInformationUpdateOne) ExecX(ctx context.Context) {
	if err := etiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etiuo *EntityTaxInformationUpdateOne) check() error {
	if v, ok := etiuo.mutation.GetType(); ok {
		if err := entitytaxinformation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (etiuo *EntityTaxInformationUpdateOne) sqlSave(ctx context.Context) (_node *EntityTaxInformation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entitytaxinformation.Table,
			Columns: entitytaxinformation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entitytaxinformation.FieldID,
			},
		},
	}
	id, ok := etiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing EntityTaxInformation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := etiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etiuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entitytaxinformation.FieldType,
		})
	}
	if value, ok := etiuo.mutation.TaxId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entitytaxinformation.FieldTaxId,
		})
	}
	_node = &EntityTaxInformation{config: etiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitytaxinformation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
