// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/robinhuiser/fca-emu/ent/entitytaxinformation"
)

// EntityTaxInformation is the model entity for the EntityTaxInformation schema.
type EntityTaxInformation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type entitytaxinformation.Type `json:"type,omitempty"`
	// TaxId holds the value of the "taxId" field.
	TaxId                         string `json:"taxId,omitempty"`
	entity_entity_tax_information *uuid.UUID
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntityTaxInformation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case entitytaxinformation.FieldID:
			values[i] = &sql.NullInt64{}
		case entitytaxinformation.FieldType, entitytaxinformation.FieldTaxId:
			values[i] = &sql.NullString{}
		case entitytaxinformation.ForeignKeys[0]: // entity_entity_tax_information
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type EntityTaxInformation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntityTaxInformation fields.
func (eti *EntityTaxInformation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entitytaxinformation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eti.ID = int(value.Int64)
		case entitytaxinformation.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				eti.Type = entitytaxinformation.Type(value.String)
			}
		case entitytaxinformation.FieldTaxId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field taxId", values[i])
			} else if value.Valid {
				eti.TaxId = value.String
			}
		case entitytaxinformation.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field entity_entity_tax_information", values[i])
			} else if value != nil {
				eti.entity_entity_tax_information = value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this EntityTaxInformation.
// Note that you need to call EntityTaxInformation.Unwrap() before calling this method if this EntityTaxInformation
// was returned from a transaction, and the transaction was committed or rolled back.
func (eti *EntityTaxInformation) Update() *EntityTaxInformationUpdateOne {
	return (&EntityTaxInformationClient{config: eti.config}).UpdateOne(eti)
}

// Unwrap unwraps the EntityTaxInformation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eti *EntityTaxInformation) Unwrap() *EntityTaxInformation {
	tx, ok := eti.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntityTaxInformation is not a transactional entity")
	}
	eti.config.driver = tx.drv
	return eti
}

// String implements the fmt.Stringer.
func (eti *EntityTaxInformation) String() string {
	var builder strings.Builder
	builder.WriteString("EntityTaxInformation(")
	builder.WriteString(fmt.Sprintf("id=%v", eti.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", eti.Type))
	builder.WriteString(", taxId=")
	builder.WriteString(eti.TaxId)
	builder.WriteByte(')')
	return builder.String()
}

// EntityTaxInformations is a parsable slice of EntityTaxInformation.
type EntityTaxInformations []*EntityTaxInformation

func (eti EntityTaxInformations) config(cfg config) {
	for _i := range eti {
		eti[_i].config = cfg
	}
}
