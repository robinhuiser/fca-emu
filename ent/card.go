// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/robinhuiser/finite-mock-server/ent/card"
	"github.com/robinhuiser/finite-mock-server/ent/cardnetwork"
)

// Card is the model entity for the Card schema.
type Card struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type card.Type `json:"type,omitempty"`
	// Number holds the value of the "number" field.
	Number string `json:"number,omitempty"`
	// StartDate holds the value of the "startDate" field.
	StartDate time.Time `json:"startDate,omitempty"`
	// ExpiryDate holds the value of the "expiryDate" field.
	ExpiryDate time.Time `json:"expiryDate,omitempty"`
	// HolderName holds the value of the "holderName" field.
	HolderName string `json:"holderName,omitempty"`
	// Status holds the value of the "status" field.
	Status card.Status `json:"status,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CardQuery when eager-loading is set.
	Edges        CardEdges `json:"edges"`
	card_network *int
}

// CardEdges holds the relations/edges for other nodes in the graph.
type CardEdges struct {
	// Network holds the value of the network edge.
	Network *CardNetwork `json:"network,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NetworkOrErr returns the Network value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CardEdges) NetworkOrErr() (*CardNetwork, error) {
	if e.loadedTypes[0] {
		if e.Network == nil {
			// The edge network was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cardnetwork.Label}
		}
		return e.Network, nil
	}
	return nil, &NotLoadedError{edge: "network"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Card) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case card.FieldID:
			values[i] = &sql.NullInt64{}
		case card.FieldType, card.FieldNumber, card.FieldHolderName, card.FieldStatus, card.FieldURL:
			values[i] = &sql.NullString{}
		case card.FieldStartDate, card.FieldExpiryDate:
			values[i] = &sql.NullTime{}
		case card.ForeignKeys[0]: // card_network
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Card", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Card fields.
func (c *Card) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case card.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case card.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = card.Type(value.String)
			}
		case card.FieldNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				c.Number = value.String
			}
		case card.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startDate", values[i])
			} else if value.Valid {
				c.StartDate = value.Time
			}
		case card.FieldExpiryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiryDate", values[i])
			} else if value.Valid {
				c.ExpiryDate = value.Time
			}
		case card.FieldHolderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field holderName", values[i])
			} else if value.Valid {
				c.HolderName = value.String
			}
		case card.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = card.Status(value.String)
			}
		case card.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				c.URL = value.String
			}
		case card.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field card_network", value)
			} else if value.Valid {
				c.card_network = new(int)
				*c.card_network = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryNetwork queries the "network" edge of the Card entity.
func (c *Card) QueryNetwork() *CardNetworkQuery {
	return (&CardClient{config: c.config}).QueryNetwork(c)
}

// Update returns a builder for updating this Card.
// Note that you need to call Card.Unwrap() before calling this method if this Card
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Card) Update() *CardUpdateOne {
	return (&CardClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Card entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Card) Unwrap() *Card {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Card is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Card) String() string {
	var builder strings.Builder
	builder.WriteString("Card(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", number=")
	builder.WriteString(c.Number)
	builder.WriteString(", startDate=")
	builder.WriteString(c.StartDate.Format(time.ANSIC))
	builder.WriteString(", expiryDate=")
	builder.WriteString(c.ExpiryDate.Format(time.ANSIC))
	builder.WriteString(", holderName=")
	builder.WriteString(c.HolderName)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", url=")
	builder.WriteString(c.URL)
	builder.WriteByte(')')
	return builder.String()
}

// Cards is a parsable slice of Card.
type Cards []*Card

func (c Cards) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
