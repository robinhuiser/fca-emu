// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/robinhuiser/finite-mock-server/ent/entityaddress"
)

// EntityAddress is the model entity for the EntityAddress schema.
type EntityAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// PostalCode holds the value of the "postalCode" field.
	PostalCode string `json:"postalCode,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Type holds the value of the "type" field.
	Type entityaddress.Type `json:"type,omitempty"`
	// Line1 holds the value of the "line1" field.
	Line1 string `json:"line1,omitempty"`
	// Line2 holds the value of the "line2" field.
	Line2 string `json:"line2,omitempty"`
	// Line3 holds the value of the "line3" field.
	Line3 string `json:"line3,omitempty"`
	// Primary holds the value of the "primary" field.
	Primary                 bool `json:"primary,omitempty"`
	entity_entity_addresses *uuid.UUID
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntityAddress) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case entityaddress.FieldPrimary:
			values[i] = &sql.NullBool{}
		case entityaddress.FieldID:
			values[i] = &sql.NullInt64{}
		case entityaddress.FieldCountry, entityaddress.FieldCity, entityaddress.FieldPostalCode, entityaddress.FieldState, entityaddress.FieldType, entityaddress.FieldLine1, entityaddress.FieldLine2, entityaddress.FieldLine3:
			values[i] = &sql.NullString{}
		case entityaddress.ForeignKeys[0]: // entity_entity_addresses
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type EntityAddress", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntityAddress fields.
func (ea *EntityAddress) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entityaddress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ea.ID = int(value.Int64)
		case entityaddress.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				ea.Country = value.String
			}
		case entityaddress.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				ea.City = value.String
			}
		case entityaddress.FieldPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postalCode", values[i])
			} else if value.Valid {
				ea.PostalCode = value.String
			}
		case entityaddress.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ea.State = value.String
			}
		case entityaddress.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ea.Type = entityaddress.Type(value.String)
			}
		case entityaddress.FieldLine1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line1", values[i])
			} else if value.Valid {
				ea.Line1 = value.String
			}
		case entityaddress.FieldLine2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line2", values[i])
			} else if value.Valid {
				ea.Line2 = value.String
			}
		case entityaddress.FieldLine3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line3", values[i])
			} else if value.Valid {
				ea.Line3 = value.String
			}
		case entityaddress.FieldPrimary:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field primary", values[i])
			} else if value.Valid {
				ea.Primary = value.Bool
			}
		case entityaddress.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field entity_entity_addresses", values[i])
			} else if value != nil {
				ea.entity_entity_addresses = value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this EntityAddress.
// Note that you need to call EntityAddress.Unwrap() before calling this method if this EntityAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EntityAddress) Update() *EntityAddressUpdateOne {
	return (&EntityAddressClient{config: ea.config}).UpdateOne(ea)
}

// Unwrap unwraps the EntityAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EntityAddress) Unwrap() *EntityAddress {
	tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntityAddress is not a transactional entity")
	}
	ea.config.driver = tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EntityAddress) String() string {
	var builder strings.Builder
	builder.WriteString("EntityAddress(")
	builder.WriteString(fmt.Sprintf("id=%v", ea.ID))
	builder.WriteString(", country=")
	builder.WriteString(ea.Country)
	builder.WriteString(", city=")
	builder.WriteString(ea.City)
	builder.WriteString(", postalCode=")
	builder.WriteString(ea.PostalCode)
	builder.WriteString(", state=")
	builder.WriteString(ea.State)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", ea.Type))
	builder.WriteString(", line1=")
	builder.WriteString(ea.Line1)
	builder.WriteString(", line2=")
	builder.WriteString(ea.Line2)
	builder.WriteString(", line3=")
	builder.WriteString(ea.Line3)
	builder.WriteString(", primary=")
	builder.WriteString(fmt.Sprintf("%v", ea.Primary))
	builder.WriteByte(')')
	return builder.String()
}

// EntityAddresses is a parsable slice of EntityAddress.
type EntityAddresses []*EntityAddress

func (ea EntityAddresses) config(cfg config) {
	for _i := range ea {
		ea[_i].config = cfg
	}
}
