/*
 * Cloud API
 *
 * The public facing API through which connectors are exposed as a single abtract API
 *
 * API version: v1.5
 * Contact: support@trexis.net
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"net/http"

	finite "github.com/robinhuiser/finite-mock-server/go"
)

func main() {
	log.Printf("Server started")

	AccountsApiService := finite.NewAccountsApiService()
	AccountsApiController := finite.NewAccountsApiController(AccountsApiService)

	CacheApiService := finite.NewCacheApiService()
	CacheApiController := finite.NewCacheApiController(CacheApiService)

	CardsApiService := finite.NewCardsApiService()
	CardsApiController := finite.NewCardsApiController(CardsApiService)

	EntityApiService := finite.NewEntityApiService()
	EntityApiController := finite.NewEntityApiController(EntityApiService)

	ExchangeApiService := finite.NewExchangeApiService()
	ExchangeApiController := finite.NewExchangeApiController(ExchangeApiService)

	ProductsApiService := finite.NewProductsApiService()
	ProductsApiController := finite.NewProductsApiController(ProductsApiService)

	StatementApiService := finite.NewStatementApiService()
	StatementApiController := finite.NewStatementApiController(StatementApiService)

	StatementsApiService := finite.NewStatementsApiService()
	StatementsApiController := finite.NewStatementsApiController(StatementsApiService)

	TransactionsApiService := finite.NewTransactionsApiService()
	TransactionsApiController := finite.NewTransactionsApiController(TransactionsApiService)

	router := finite.NewRouter(AccountsApiController, CacheApiController, CardsApiController, EntityApiController, ExchangeApiController, ProductsApiController, StatementApiController, StatementsApiController, TransactionsApiController)

	log.Fatal(http.ListenAndServe(":8080", router))
}
